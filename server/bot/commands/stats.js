import { Markup } from 'telegraf';
import { db } from '../../infrastructure/supabase.js';
import { subDays, format } from 'date-fns';
import ru from 'date-fns/locale/ru/index.js';
import { beginChatResponse, replyWithTracking } from '../utils/chat.js';
import { getProgressionOverview } from '../../services/staticPlan.js';

const EXERCISE_LABELS = {
    pullups: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è',
    pushups: '–û—Ç–∂–∏–º–∞–Ω–∏—è',
    squats: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
    legRaises: '–ö–æ—Ä',
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
 */
export async function statsCommand(ctx) {
    const profileId = ctx.state.profileId;

    try {
        await beginChatResponse(ctx);
        await replyWithTracking(ctx, '‚è≥ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏
        const endDate = new Date();
        const startDate = subDays(endDate, 28);

        const sessions = await db.getTrainingSessions(profileId, {
            startDate: format(startDate, 'yyyy-MM-dd'),
            endDate: format(endDate, 'yyyy-MM-dd'),
        });

        if (!sessions || sessions.length === 0) {
            await beginChatResponse(ctx);
            await replyWithTracking(ctx, buildPrimerMessage(), { parse_mode: 'Markdown' });
            return;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        const stats = calculateStats(sessions);
        const statsMessage = formatStatsMessage(stats);

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'stats_detailed')],
            [Markup.button.callback('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'stats_achievements')],
        ]);

        await beginChatResponse(ctx);
        await replyWithTracking(ctx, statsMessage, { parse_mode: 'Markdown', ...keyboard });

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await db.recordMetric(profileId, 'stats_viewed', 1, 'count');

    } catch (error) {
        console.error('Error in stats command:', error);
        await beginChatResponse(ctx);
        await replyWithTracking(ctx, 'üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    }
}

/**
 * –†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function calculateStats(sessions) {
    const total = sessions.length;
    const completed = sessions.filter(s => s.status === 'done').length;
    const skipped = sessions.filter(s => s.status === 'skipped').length;
    const adherence = total > 0 ? Math.round((completed / total) * 100) : 0;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ RPE
    const rpeValues = sessions
        .filter(s => s.rpe !== null && s.rpe !== undefined)
        .map(s => parseFloat(s.rpe));
    const avgRpe = rpeValues.length > 0
        ? (rpeValues.reduce((sum, val) => sum + val, 0) / rpeValues.length).toFixed(1)
        : null;

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é
    let currentStreak = 0;
    const sortedSessions = [...sessions].sort((a, b) =>
        new Date(b.date).getTime() - new Date(a.date).getTime()
    );

    for (const session of sortedSessions) {
        if (session.status === 'done') {
            currentStreak++;
        } else {
            break;
        }
    }

    return {
        total,
        completed,
        skipped,
        adherence,
        avgRpe,
        currentStreak,
    };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
function formatStatsMessage(stats) {
    let message = `üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 4 –Ω–µ–¥–µ–ª–∏**\n\n`;

    // Adherence —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    const adherenceEmoji =
        stats.adherence >= 80 ? 'üî•' :
            stats.adherence >= 60 ? 'üí™' :
                stats.adherence >= 40 ? 'üëç' : 'üìà';

    message += `**–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å:** ${stats.adherence}% ${adherenceEmoji}\n`;
    message += `${stats.completed} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ ${stats.total} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n\n`;

    // –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
    if (stats.avgRpe) {
        const rpeEmoji =
            stats.avgRpe >= 8 ? 'üî•' :
                stats.avgRpe >= 6 ? 'üí™' : 'üòå';
        message += `**–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞:** ${stats.avgRpe}/10 ${rpeEmoji}\n\n`;
    }

    // –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
    if (stats.currentStreak > 0) {
        message += `**–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:** ${stats.currentStreak} üî•\n`;

        if (stats.currentStreak >= 7) {
            message += `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n`;
        } else if (stats.currentStreak >= 3) {
            message += `–•–æ—Ä–æ—à–∏–π —Ç–µ–º–ø! –î–µ—Ä–∂–∏ —Ñ–æ—Ä–º—É!\n`;
        }
        message += '\n';
    }

    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
    if (stats.adherence >= 80) {
        message += `‚ú® –¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è –æ—á–µ–Ω—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ! –≠—Ç–æ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç.\n`;
    } else if (stats.adherence >= 60) {
        message += `üëç –•–æ—Ä–æ—à–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å! –ü–æ–ø—Ä–æ–±—É–π –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n`;
    } else if (stats.adherence >= 40) {
        message += `üìà –ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ. –î–∞–≤–∞–π –¥–µ—Ä–∂–∞—Ç—å —Ä–∏—Ç–º!\n`;
    } else if (stats.completed > 0) {
        message += `üí™ –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—á–∞–ª! –ü–æ–ø—Ä–æ–±—É–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–∞—â–µ.\n`;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∏
    if (stats.skipped > 0) {
        message += `\n‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.skipped}\n`;
        if (stats.skipped >= 5) {
            message += `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤. –î–∞–≤–∞–π –Ω–∞–π–¥—ë–º —Å–ø–æ—Å–æ–± –≤–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n`;
        }
    }

    return message;
}

/**
 * –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 */
export async function statsDetailedCallback(ctx) {
    await ctx.answerCbQuery();

    try {
        await ctx.deleteMessage();
    } catch (error) {
        // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
    }

    await beginChatResponse(ctx);

    await replyWithTracking(ctx,
        'üìà **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n' +
        '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ WebApp.\n\n' +
        '–¢–∞–º —Ç—ã —É–≤–∏–¥–∏—à—å:\n' +
        '‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º\n' +
        '‚Ä¢ –î–∏–Ω–∞–º–∏–∫—É –æ–±—ä—ë–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n' +
        '‚Ä¢ –¢—Ä–µ–Ω–¥—ã RPE\n' +
        '‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n' +
        'üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        { parse_mode: 'Markdown' }
    );
}

/**
 * –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */
export async function statsAchievementsCallback(ctx) {
    await ctx.answerCbQuery();

    const profileId = ctx.state.profileId;

    try {
        try {
            await ctx.deleteMessage();
        } catch (error) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
        }

        await beginChatResponse(ctx);

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –ë–î (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ)
        const achievements = []; // await getAchievements(profileId);

        if (achievements.length === 0) {
            await replyWithTracking(ctx,
                'üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n' +
                '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n' +
                '–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è!\n\n' +
                '–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n' +
                '‚Ä¢ –ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚úÖ\n' +
                '‚Ä¢ –°–µ—Ä–∏—è 7 –¥–Ω–µ–π üî•\n' +
                '‚Ä¢ –ú–µ—Å—è—Ü –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ üíé\n' +
                '‚Ä¢ –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ üèÖ',
                { parse_mode: 'Markdown' }
            );
        } else {
            let message = 'üèÜ **–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n';
            achievements.forEach(ach => {
                message += `${ach.emoji} ${ach.title}\n`;
                message += `   ${ach.description}\n\n`;
            });
            await replyWithTracking(ctx, message, { parse_mode: 'Markdown' });
        }

    } catch (error) {
        console.error('Error showing achievements:', error);
        await beginChatResponse(ctx);
        await replyWithTracking(ctx, 'üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.');
    }
}

function buildPrimerMessage() {
    const overviewKeys = ['pullups', 'pushups', 'squats'];
    const items = overviewKeys
        .map(key => ({ key, data: getProgressionOverview(key) }))
        .filter(item => item.data);

    let message = 'üìä **–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n';
    message += '–Ø –≤–µ–¥—É –∏—Å—Ç–æ—Ä–∏—é, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–µ—Ä–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.\n\n';

    if (items.length > 0) {
        message += '–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è—Ö:\n';
        message += items.map(({ key, data }) => {
            const label = EXERCISE_LABELS[key] || key;
            return `‚Ä¢ ${label}: ${data.startLevel} ‚Üí ${data.peakLevel} (${data.totalSteps} —à–∞–≥–æ–≤)`;
        }).join('\n');
        message += '\n\n';
    }

    message += '–û—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤—ã–π –æ—Ç—á—ë—Ç ‚Äî –∏ —è –ø–æ–∫–∞–∂—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å, RPE –∏ —Å–µ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.';
    return message;
}

export default {
    statsCommand,
    statsDetailedCallback,
    statsAchievementsCallback,
};

