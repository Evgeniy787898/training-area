import { Markup } from 'telegraf';
import { db } from '../../infrastructure/supabase.js';
import { beginChatResponse, replyWithTracking } from '../utils/chat.js';

const EQUIPMENT_STATE_KEY = 'settings_equipment_draft';
const EQUIPMENT_OPTIONS = [
    { key: 'bodyweight', label: '–¢–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞', icon: 'üßò' },
    { key: 'pullup_bar', label: '–¢—É—Ä–Ω–∏–∫', icon: 'üèóÔ∏è' },
    { key: 'parallel_bars', label: '–ë—Ä—É—Å—å—è', icon: 'ü§∏' },
    { key: 'rings', label: '–ö–æ–ª—å—Ü–∞', icon: '‚≠ï' },
    { key: 'dumbbells', label: '–ì–∞–Ω—Ç–µ–ª–∏/–≥–∏—Ä–∏', icon: 'üèãÔ∏è' },
    { key: 'resistance_bands', label: '–†–µ–∑–∏–Ω–∫–∏', icon: 'ü™¢' },
];

const GOAL_OPTIONS = [
    { key: 'strength_endurance', label: '–°–∏–ª–æ–≤–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', icon: 'üí™' },
    { key: 'body_recomposition', label: '–†–µ–ª—å–µ—Ñ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è', icon: 'üî•' },
    { key: 'wellness', label: '–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ', icon: 'üåø' },
];

/**
 * –ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
 */
export async function settingsCommand(ctx) {
    const profile = ctx.state.profile;
    const settingsMessage = formatSettingsMessage(profile);

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'settings_notification_time')],
        [Markup.button.callback('üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 'settings_timezone')],
        [Markup.button.callback('üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏', 'settings_goals')],
        [Markup.button.callback('üèãÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'settings_equipment')],
        [Markup.button.callback('üîï –ü–∞—É–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'settings_pause_notifications')],
    ]);

    await beginChatResponse(ctx);
    await replyWithTracking(ctx, settingsMessage, { parse_mode: 'Markdown', ...keyboard });
}

function formatSettingsMessage(profile) {
    let message = `‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n`;

    const goalLabel = profile.goals?.description || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    message += `üéØ **–¶–µ–ª—å:** ${goalLabel}\n\n`;

    const equipment = profile.equipment?.length > 0
        ? profile.equipment.map(resolveEquipmentLabel).join(', ')
        : '–¢–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞';
    message += `üèãÔ∏è **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** ${equipment}\n\n`;

    const notificationTime = profile.notification_time || '06:00';
    message += `‚è∞ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** ${notificationTime}\n`;

    const timezone = profile.timezone || 'Europe/Moscow';
    message += `üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** ${timezone}\n\n`;

    const notificationStatus = profile.notifications_paused
        ? 'üîï –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'
        : '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã';
    message += `**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** ${notificationStatus}\n`;

    return message;
}

export async function settingsNotificationTimeCallback(ctx) {
    await ctx.answerCbQuery();

    const message =
        `‚è∞ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n` +
        `–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üåÖ 06:00', 'set_time_06:00')],
        [Markup.button.callback('üåÖ 07:00', 'set_time_07:00')],
        [Markup.button.callback('‚òÄÔ∏è 08:00', 'set_time_08:00')],
        [Markup.button.callback('‚òÄÔ∏è 09:00', 'set_time_09:00')],
        [Markup.button.callback('üåÜ 18:00', 'set_time_18:00')],
        [Markup.button.callback('üåÜ 19:00', 'set_time_19:00')],
        [Markup.button.callback('üåô 20:00', 'set_time_20:00')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'settings_back')],
    ]);

    await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
}

export async function setTimeCallback(ctx) {
    await ctx.answerCbQuery();

    const time = ctx.callbackQuery.data.replace('set_time_', '');

    try {
        const updated = await db.updateProfile(ctx.state.profileId, {
            notification_time: time,
        });
        ctx.state.profile = updated;

        await ctx.editMessageText(
            `‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${time}\n\n` +
            `–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –≤ —ç—Ç–æ –≤—Ä–µ–º—è.`,
            { parse_mode: 'Markdown' }
        );

        await db.logEvent(
            ctx.state.profileId,
            'settings_updated',
            'info',
            { setting: 'notification_time', value: time }
        );

        setTimeout(() => {
            settingsCommand(ctx);
        }, 2000);
    } catch (error) {
        console.error('Error updating notification time:', error);
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
}

export async function settingsTimezoneCallback(ctx) {
    await ctx.answerCbQuery();

    const message =
        `üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**\n\n` +
        `–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üá∑üá∫ –ú–æ—Å–∫–≤–∞ (MSK, UTC+3)', 'set_tz_Europe/Moscow')],
        [Markup.button.callback('üá∑üá∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)', 'set_tz_Asia/Yekaterinburg')],
        [Markup.button.callback('üá∑üá∫ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)', 'set_tz_Asia/Novosibirsk')],
        [Markup.button.callback('üá∑üá∫ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)', 'set_tz_Asia/Vladivostok')],
        [Markup.button.callback('üá∫üá¶ –ö–∏–µ–≤ (UTC+2)', 'set_tz_Europe/Kiev')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'settings_back')],
    ]);

    await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
}

export async function setTimezoneCallback(ctx) {
    await ctx.answerCbQuery();

    const timezone = ctx.callbackQuery.data.replace('set_tz_', '');

    try {
        const updated = await db.updateProfile(ctx.state.profileId, {
            timezone,
        });
        ctx.state.profile = updated;

        await ctx.editMessageText(
            `‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${timezone}`,
            { parse_mode: 'Markdown' }
        );

        await db.logEvent(
            ctx.state.profileId,
            'settings_updated',
            'info',
            { setting: 'timezone', value: timezone }
        );

        setTimeout(() => {
            settingsCommand(ctx);
        }, 2000);
    } catch (error) {
        console.error('Error updating timezone:', error);
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
}

export async function settingsPauseNotificationsCallback(ctx) {
    await ctx.answerCbQuery();

    const profile = ctx.state.profile;
    const isPaused = profile.notifications_paused;

    try {
        const updated = await db.updateProfile(ctx.state.profileId, {
            notifications_paused: !isPaused,
        });
        ctx.state.profile = updated;

        const message = !isPaused
            ? 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n–í–∫–ª—é—á–∏ –∏—Ö —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'
            : '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n–¢–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.';

        await ctx.editMessageText(message, { parse_mode: 'Markdown' });

        await db.logEvent(
            ctx.state.profileId,
            'settings_updated',
            'info',
            { setting: 'notifications_paused', value: !isPaused }
        );

        setTimeout(() => {
            settingsCommand(ctx);
        }, 2000);
    } catch (error) {
        console.error('Error toggling notifications:', error);
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
}

export async function settingsBackCallback(ctx) {
    await ctx.answerCbQuery();
    await settingsCommand(ctx);
}

export async function settingsGoalsCallback(ctx) {
    await ctx.answerCbQuery();

    const keyboard = Markup.inlineKeyboard([
        ...GOAL_OPTIONS.map(option => [
            Markup.button.callback(`${option.icon} ${option.label}`, `set_goal_${option.key}`),
        ]),
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'settings_back')],
    ]);

    const message =
        'üéØ **–í—ã–±–æ—Ä —Ü–µ–ª–∏**\n\n' +
        '–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ ‚Äî —è –∞–¥–∞–ø—Ç–∏—Ä—É—é –ø–ª–∞–Ω –∏ –∞–∫—Ü–µ–Ω—Ç—ã –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.';

    await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
}

export async function setGoalCallback(ctx) {
    await ctx.answerCbQuery();
    const goalKey = ctx.callbackQuery.data.replace('set_goal_', '');
    const option = GOAL_OPTIONS.find(item => item.key === goalKey);

    if (!option) {
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å');
        return;
    }

    try {
        const updated = await db.updateProfile(ctx.state.profileId, {
            goals: {
                key: option.key,
                description: option.label,
            },
        });
        ctx.state.profile = updated;

        await ctx.editMessageText(
            `üéØ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${option.label}\n\n` +
            '–Ø —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ —ç—Ç—É –∑–∞–¥–∞—á—É.',
            { parse_mode: 'Markdown' }
        );

        setTimeout(() => {
            settingsCommand(ctx);
        }, 2000);
    } catch (error) {
        console.error('Failed to update goal:', error);
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å');
    }
}

export async function settingsEquipmentCallback(ctx) {
    await ctx.answerCbQuery();

    const profile = ctx.state.profile;
    const current = Array.isArray(profile.equipment) && profile.equipment.length > 0
        ? profile.equipment
        : ['bodyweight'];

    await db.saveDialogState(
        ctx.state.profileId,
        EQUIPMENT_STATE_KEY,
        { selected: current },
        new Date(Date.now() + 15 * 60 * 1000)
    );

    await renderEquipmentEditor(ctx, current);
}

export async function toggleEquipmentCallback(ctx) {
    await ctx.answerCbQuery();

    const optionKey = ctx.callbackQuery.data.replace('equip_toggle_', '');
    const option = EQUIPMENT_OPTIONS.find(item => item.key === optionKey);

    if (!option) {
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ');
        return;
    }

    const state = await db.getDialogState(ctx.state.profileId, EQUIPMENT_STATE_KEY);
    const selected = new Set(state?.state_payload?.selected || []);

    if (option.key === 'bodyweight') {
        selected.clear();
        selected.add('bodyweight');
    } else {
        if (selected.has(option.key)) {
            selected.delete(option.key);
        } else {
            selected.add(option.key);
        }
        selected.delete('bodyweight');
        if (selected.size === 0) {
            selected.add('bodyweight');
        }
    }

    const newSelection = Array.from(selected);

    await db.saveDialogState(
        ctx.state.profileId,
        EQUIPMENT_STATE_KEY,
        { selected: newSelection },
        new Date(Date.now() + 15 * 60 * 1000)
    );

    await renderEquipmentEditor(ctx, newSelection);
}

export async function settingsEquipmentSaveCallback(ctx) {
    await ctx.answerCbQuery();

    const state = await db.getDialogState(ctx.state.profileId, EQUIPMENT_STATE_KEY);
    const selected = state?.state_payload?.selected || ['bodyweight'];

    try {
        const updated = await db.updateProfile(ctx.state.profileId, {
            equipment: selected,
        });
        ctx.state.profile = updated;
        await db.clearDialogState(ctx.state.profileId, EQUIPMENT_STATE_KEY);

        await ctx.editMessageText(
            'üèãÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –Ø —É—á—Ç—É –µ–≥–æ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞.',
            { parse_mode: 'Markdown' }
        );

        setTimeout(() => {
            settingsCommand(ctx);
        }, 2000);
    } catch (error) {
        console.error('Failed to update equipment:', error);
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ');
    }
}

function resolveEquipmentLabel(key) {
    const option = EQUIPMENT_OPTIONS.find(item => item.key === key);
    return option ? option.label : key;
}

async function renderEquipmentEditor(ctx, selected) {
    const keyboard = Markup.inlineKeyboard([
        ...EQUIPMENT_OPTIONS.map(option => [
            Markup.button.callback(
                `${selected.includes(option.key) ? '‚úÖ' : '‚ñ´Ô∏è'} ${option.icon} ${option.label}`,
                `equip_toggle_${option.key}`
            ),
        ]),
        [Markup.button.callback('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'equip_save')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'settings_back')],
    ]);

    const activeList = selected.map(resolveEquipmentLabel).join(', ');

    const message =
        'üèãÔ∏è **–î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ**\n\n' +
        '–û—Ç–º–µ—Ç—å, —á—Ç–æ –µ—Å—Ç—å –ø–æ–¥ —Ä—É–∫–æ–π ‚Äî –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—É–¥—É—Ç —Ç–æ—á–Ω–µ–µ.\n\n' +
        `–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: ${activeList}`;

    await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
}

export default {
    settingsCommand,
    settingsNotificationTimeCallback,
    setTimeCallback,
    settingsTimezoneCallback,
    setTimezoneCallback,
    settingsPauseNotificationsCallback,
    settingsBackCallback,
    settingsGoalsCallback,
    setGoalCallback,
    settingsEquipmentCallback,
    toggleEquipmentCallback,
    settingsEquipmentSaveCallback,
};
