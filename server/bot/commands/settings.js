import { Markup } from 'telegraf';
import { db } from '../../infrastructure/supabase.js';
import { beginChatResponse, replyWithTracking } from '../utils/chat.js';

/**
 * –ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
 */
export async function settingsCommand(ctx) {
    const profile = ctx.state.profile;

    const settingsMessage = formatSettingsMessage(profile);

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'settings_notification_time')],
        [Markup.button.callback('üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 'settings_timezone')],
        [Markup.button.callback('üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏', 'settings_goals')],
        [Markup.button.callback('üèãÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'settings_equipment')],
        [Markup.button.callback('üîï –ü–∞—É–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'settings_pause_notifications')],
    ]);

    await beginChatResponse(ctx);
    await replyWithTracking(ctx, settingsMessage, { parse_mode: 'Markdown', ...keyboard });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function formatSettingsMessage(profile) {
    let message = `‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n`;

    // –¶–µ–ª—å
    const goalLabel = profile.goals?.description || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    message += `üéØ **–¶–µ–ª—å:** ${goalLabel}\n\n`;

    // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    const equipment = profile.equipment?.length > 0
        ? profile.equipment.join(', ')
        : '–¢–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞';
    message += `üèãÔ∏è **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** ${equipment}\n\n`;

    // –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationTime = profile.notification_time || '06:00';
    message += `‚è∞ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** ${notificationTime}\n`;

    // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    const timezone = profile.timezone || 'Europe/Moscow';
    message += `üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** ${timezone}\n\n`;

    // –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationStatus = profile.notifications_paused
        ? 'üîï –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'
        : '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã';
    message += `**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** ${notificationStatus}\n`;

    return message;
}

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function settingsNotificationTimeCallback(ctx) {
    await ctx.answerCbQuery();

    const message =
        `‚è∞ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n` +
        `–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üåÖ 06:00', 'set_time_06:00')],
        [Markup.button.callback('üåÖ 07:00', 'set_time_07:00')],
        [Markup.button.callback('‚òÄÔ∏è 08:00', 'set_time_08:00')],
        [Markup.button.callback('‚òÄÔ∏è 09:00', 'set_time_09:00')],
        [Markup.button.callback('üåÜ 18:00', 'set_time_18:00')],
        [Markup.button.callback('üåÜ 19:00', 'set_time_19:00')],
        [Markup.button.callback('üåô 20:00', 'set_time_20:00')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'settings_back')],
    ]);

    await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function setTimeCallback(ctx) {
    await ctx.answerCbQuery();

    const time = ctx.callbackQuery.data.replace('set_time_', '');

    try {
        await db.updateProfile(ctx.state.profileId, {
            notification_time: time,
        });

        await ctx.editMessageText(
            `‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${time}\n\n` +
            `–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –≤ —ç—Ç–æ –≤—Ä–µ–º—è.`,
            { parse_mode: 'Markdown' }
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        await db.logEvent(
            ctx.state.profileId,
            'settings_updated',
            'info',
            { setting: 'notification_time', value: time }
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        setTimeout(() => {
            settingsCommand(ctx);
        }, 2000);

    } catch (error) {
        console.error('Error updating notification time:', error);
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
}

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
 */
export async function settingsTimezoneCallback(ctx) {
    await ctx.answerCbQuery();

    const message =
        `üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å**\n\n` +
        `–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üá∑üá∫ –ú–æ—Å–∫–≤–∞ (MSK, UTC+3)', 'set_tz_Europe/Moscow')],
        [Markup.button.callback('üá∑üá∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)', 'set_tz_Asia/Yekaterinburg')],
        [Markup.button.callback('üá∑üá∫ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)', 'set_tz_Asia/Novosibirsk')],
        [Markup.button.callback('üá∑üá∫ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)', 'set_tz_Asia/Vladivostok')],
        [Markup.button.callback('üá∫üá¶ –ö–∏–µ–≤ (UTC+2)', 'set_tz_Europe/Kiev')],
        [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'settings_back')],
    ]);

    await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
 */
export async function setTimezoneCallback(ctx) {
    await ctx.answerCbQuery();

    const timezone = ctx.callbackQuery.data.replace('set_tz_', '');

    try {
        await db.updateProfile(ctx.state.profileId, {
            timezone,
        });

        await ctx.editMessageText(
            `‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${timezone}`,
            { parse_mode: 'Markdown' }
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        await db.logEvent(
            ctx.state.profileId,
            'settings_updated',
            'info',
            { setting: 'timezone', value: timezone }
        );

        setTimeout(() => {
            settingsCommand(ctx);
        }, 2000);

    } catch (error) {
        console.error('Error updating timezone:', error);
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
}

/**
 * –ü–∞—É–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function settingsPauseNotificationsCallback(ctx) {
    await ctx.answerCbQuery();

    const profile = ctx.state.profile;
    const isPaused = profile.notifications_paused;

    try {
        await db.updateProfile(ctx.state.profileId, {
            notifications_paused: !isPaused,
        });

        const message = !isPaused
            ? 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n–í–∫–ª—é—á–∏ –∏—Ö —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'
            : '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n–¢–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.';

        await ctx.editMessageText(message, { parse_mode: 'Markdown' });

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        await db.logEvent(
            ctx.state.profileId,
            'settings_updated',
            'info',
            { setting: 'notifications_paused', value: !isPaused }
        );

        setTimeout(() => {
            settingsCommand(ctx);
        }, 2000);

    } catch (error) {
        console.error('Error toggling notifications:', error);
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
}

/**
 * –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
 */
export async function settingsBackCallback(ctx) {
    await ctx.answerCbQuery();
    await settingsCommand(ctx);
}

export default {
    settingsCommand,
    settingsNotificationTimeCallback,
    setTimeCallback,
    settingsTimezoneCallback,
    setTimezoneCallback,
    settingsPauseNotificationsCallback,
    settingsBackCallback,
};

