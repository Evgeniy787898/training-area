import { Markup } from 'telegraf';
import { db } from '../../infrastructure/supabase.js';
import { format, addDays, startOfWeek } from 'date-fns';
import ru from 'date-fns/locale/ru/index.js';

/**
 * –ö–æ–º–∞–Ω–¥–∞ /plan - –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
 */
export async function planCommand(ctx) {
    const profileId = ctx.state.profileId;

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        const today = new Date();
        const weekStart = startOfWeek(today, { weekStartsOn: 1 }); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        const weekEnd = addDays(weekStart, 6);

        const sessions = await db.getTrainingSessions(profileId, {
            startDate: format(weekStart, 'yyyy-MM-dd'),
            endDate: format(weekEnd, 'yyyy-MM-dd'),
        });

        if (!sessions || sessions.length === 0) {
            await sendNoPlanMessage(ctx);
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
        let planMessage = `üìÖ **–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é**\n\n`;
        planMessage += `–ü–µ—Ä–∏–æ–¥: ${format(weekStart, 'd MMMM', { locale: ru })} ‚Äî ${format(weekEnd, 'd MMMM', { locale: ru })}\n\n`;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        for (let i = 0; i < 7; i++) {
            const currentDate = addDays(weekStart, i);
            const dateStr = format(currentDate, 'yyyy-MM-dd');
            const daySession = sessions.find(s => s.date === dateStr);

            const dayName = format(currentDate, 'EEEE', { locale: ru });
            const dateDisplay = format(currentDate, 'd MMM', { locale: ru });
            const isToday = format(currentDate, 'yyyy-MM-dd') === format(today, 'yyyy-MM-dd');

            if (daySession) {
                const statusEmoji = getStatusEmoji(daySession.status);
                planMessage += `${isToday ? 'üëâ ' : ''}**${dayName}, ${dateDisplay}** ${statusEmoji}\n`;
                planMessage += formatSessionPreview(daySession);
                planMessage += '\n';
            } else {
                planMessage += `${isToday ? 'üëâ ' : ''}**${dayName}, ${dateDisplay}** üí§ –û—Ç–¥—ã—Ö\n\n`;
            }
        }

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìã –°–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ', 'plan_today')],
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω', 'plan_regenerate')],
        ]);

        await ctx.reply(planMessage, { parse_mode: 'Markdown', ...keyboard });

    } catch (error) {
        console.error('Error in plan command:', error);
        await ctx.reply(
            'üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
 */
export async function planTodayCallback(ctx) {
    await ctx.answerCbQuery();

    const profileId = ctx.state.profileId;
    const today = format(new Date(), 'yyyy-MM-dd');

    try {
        const sessions = await db.getTrainingSessions(profileId, {
            startDate: today,
            endDate: today,
        });

        if (!sessions || sessions.length === 0) {
            await ctx.reply('üí§ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. –û—Ç–¥—ã—Ö–∞–π!');
            return;
        }

        const session = sessions[0];
        const detailedMessage = formatDetailedSession(session);

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', `session_start_${session.id}`)],
            [Markup.button.callback('üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', `session_reschedule_${session.id}`)],
        ]);

        await ctx.reply(detailedMessage, { parse_mode: 'Markdown', ...keyboard });

    } catch (error) {
        console.error('Error showing today plan:', error);
        await ctx.reply('üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.');
    }
}

/**
 * –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç
 */
async function sendNoPlanMessage(ctx) {
    const message =
        `üìÖ **–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n` +
        `–ü–æ—Ö–æ–∂–µ, –ø–ª–∞–Ω –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω. –î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º –µ–≥–æ!`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üöÄ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω', 'plan_create')],
    ]);

    await ctx.reply(message, { parse_mode: 'Markdown', ...keyboard });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—Ä–µ–≤—å—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
 */
function formatSessionPreview(session) {
    const exercises = session.exercises || [];

    if (exercises.length === 0) {
        return `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${session.session_type || '–û—Å–Ω–æ–≤–Ω–∞—è'}\n`;
    }

    const preview = exercises.slice(0, 2).map(ex =>
        `‚Ä¢ ${ex.name || ex.exercise_key}`
    ).join('\n');

    const more = exercises.length > 2 ? `\n‚Ä¢ ... –∏ –µ—â—ë ${exercises.length - 2}` : '';

    return preview + more + '\n';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
 */
function formatDetailedSession(session) {
    let message = `üèãÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ ${format(new Date(session.date), 'd MMMM', { locale: ru })}**\n\n`;

    if (session.session_type) {
        message += `**–¢–∏–ø:** ${session.session_type}\n\n`;
    }

    const exercises = session.exercises || [];

    if (exercises.length > 0) {
        message += `**–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n\n`;

        exercises.forEach((ex, index) => {
            message += `${index + 1}. **${ex.name || ex.exercise_key}**\n`;

            if (ex.sets && ex.reps) {
                message += `   –ü–æ–¥—Ö–æ–¥—ã: ${ex.sets} √ó ${ex.reps}\n`;
            }

            if (ex.tempo) {
                message += `   –¢–µ–º–ø: ${ex.tempo}\n`;
            }

            if (ex.rest) {
                message += `   –û—Ç–¥—ã—Ö: ${ex.rest} —Å–µ–∫\n`;
            }

            if (ex.notes) {
                message += `   üí° ${ex.notes}\n`;
            }

            message += '\n';
        });
    }

    if (session.notes) {
        message += `**–ó–∞–º–µ—Ç–∫–∏:**\n${session.notes}\n\n`;
    }

    const targetRpe = session.rpe || 7;
    message += `üéØ –¶–µ–ª–µ–≤–æ–µ RPE: ${targetRpe}/10\n`;

    return message;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusEmoji(status) {
    const statusMap = {
        'planned': 'üìã',
        'in_progress': 'üèÉ',
        'done': '‚úÖ',
        'skipped': '‚è≠Ô∏è',
        'rescheduled': 'üîÑ',
    };
    return statusMap[status] || 'üìã';
}

export default {
    planCommand,
    planTodayCallback,
};

