import { Markup } from 'telegraf';
import { db } from '../../infrastructure/supabase.js';
import { format, addDays, startOfWeek } from 'date-fns';
import ru from 'date-fns/locale/ru/index.js';
import { beginChatResponse, replyWithTracking } from '../utils/chat.js';
import { buildDefaultWeekPlan } from '../../services/staticPlan.js';

const PLAN_CACHE_STATE = 'ui_cached_plan';

/**
 * –ö–æ–º–∞–Ω–¥–∞ /plan - –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
 */
export async function planCommand(ctx) {
    const profileId = ctx.state.profileId;
    const profile = ctx.state.profile;
    const today = new Date();
    const weekStart = startOfWeek(today, { weekStartsOn: 1 });
    const weekEnd = addDays(weekStart, 6);

    try {
        await beginChatResponse(ctx);

        const sessions = await db.getTrainingSessions(profileId, {
            startDate: format(weekStart, 'yyyy-MM-dd'),
            endDate: format(weekEnd, 'yyyy-MM-dd'),
        });

        if (!sessions || sessions.length === 0) {
            await sendFallbackPlan(ctx, profile, weekStart, weekEnd, today);
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
        let planMessage = `üìÖ **–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é**\n\n`;
        planMessage += `–ü–µ—Ä–∏–æ–¥: ${format(weekStart, 'd MMMM', { locale: ru })} ‚Äî ${format(weekEnd, 'd MMMM', { locale: ru })}\n\n`;

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        for (let i = 0; i < 7; i++) {
            const currentDate = addDays(weekStart, i);
            const dateStr = format(currentDate, 'yyyy-MM-dd');
            const daySession = sessions.find(s => s.date === dateStr);

            const dayName = format(currentDate, 'EEEE', { locale: ru });
            const dateDisplay = format(currentDate, 'd MMM', { locale: ru });
            const isToday = format(currentDate, 'yyyy-MM-dd') === format(today, 'yyyy-MM-dd');

            if (daySession) {
                const statusEmoji = getStatusEmoji(daySession.status);
                planMessage += `${isToday ? 'üëâ ' : ''}**${dayName}, ${dateDisplay}** ${statusEmoji}\n`;
                planMessage += formatSessionPreview(daySession);
                planMessage += '\n';
            } else {
                planMessage += `${isToday ? 'üëâ ' : ''}**${dayName}, ${dateDisplay}** üí§ –û—Ç–¥—ã—Ö\n\n`;
            }
        }

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìã –°–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ', 'plan_today')],
        ]);

        await replyWithTracking(ctx, planMessage, { parse_mode: 'Markdown', ...keyboard });

    } catch (error) {
        console.error('Error in plan command:', error);

        try {
            await sendFallbackPlan(ctx, profile, weekStart, weekEnd, today);
        } catch (fallbackError) {
            console.error('Fallback plan failed:', fallbackError);
            await replyWithTracking(ctx,
                'üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
        }
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
 */
export async function planTodayCallback(ctx) {
    if (ctx.updateType === 'callback_query') {
        await ctx.answerCbQuery();
    }

    const profileId = ctx.state.profileId;
    const profile = ctx.state.profile;
    const today = format(new Date(), 'yyyy-MM-dd');

    if (ctx.updateType === 'callback_query') {
        try {
            await ctx.deleteMessage();
        } catch (error) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
        }
    }

    try {
        const sessions = await db.getTrainingSessions(profileId, {
            startDate: today,
            endDate: today,
        });

        if (!sessions || sessions.length === 0) {
            await serveFallbackToday(ctx, profile, today);
            return;
        }

        const session = sessions[0];
        const detailedMessage = formatDetailedSession(session);

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', `session_start_${session.id}`)],
            [Markup.button.callback('üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', `session_reschedule_${session.id}`)],
        ]);

        await beginChatResponse(ctx);
        await replyWithTracking(ctx, detailedMessage, { parse_mode: 'Markdown', ...keyboard });

    } catch (error) {
        console.error('Error showing today plan:', error);
        await beginChatResponse(ctx);
        await replyWithTracking(ctx, 'üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.');
    }
}

/**
 * –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–ª–∞–Ω–∞ –Ω–µ—Ç
 */
async function sendFallbackPlan(ctx, profile, weekStart, weekEnd, today) {
    const profileId = ctx.state.profileId;
    const plan = await loadFallbackPlan(profile, profileId, weekStart, weekEnd);

    const sessionsByDate = new Map((plan.sessions || []).map(session => [session.date, session]));

    let message = `üìÖ **–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é**\n\n`;
    message += `–ü–µ—Ä–∏–æ–¥: ${format(weekStart, 'd MMMM', { locale: ru })} ‚Äî ${format(weekEnd, 'd MMMM', { locale: ru })}\n\n`;

    for (let i = 0; i < 7; i++) {
        const currentDate = addDays(weekStart, i);
        const dateStr = format(currentDate, 'yyyy-MM-dd');
        const session = sessionsByDate.get(dateStr);
        const dayName = format(currentDate, 'EEEE', { locale: ru });
        const dateDisplay = format(currentDate, 'd MMM', { locale: ru });
        const isToday = format(currentDate, 'yyyy-MM-dd') === format(today, 'yyyy-MM-dd');

        if (session) {
            message += `${isToday ? 'üëâ ' : ''}**${dayName}, ${dateDisplay}** üìã\n`;
            message += formatSessionPreview(session);
            message += '\n';
        } else {
            message += `${isToday ? 'üëâ ' : ''}**${dayName}, ${dateDisplay}** üí§ –û—Ç–¥—ã—Ö\n\n`;
        }
    }

    message += `–ü–ª–∞–Ω –ø–æ—Å—Ç—Ä–æ–µ–Ω –ø–æ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.\n`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìã –°–µ–≥–æ–¥–Ω—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ', 'plan_today')],
    ]);

    await replyWithTracking(ctx, message, { parse_mode: 'Markdown', ...keyboard });
}

async function loadFallbackPlan(profile, profileId, weekStart, weekEnd) {
    const weekStartStr = format(weekStart, 'yyyy-MM-dd');

    try {
        const cached = await db.getDialogState(profileId, PLAN_CACHE_STATE);
        if (cached?.state_payload?.plan?.metadata?.week_start === weekStartStr) {
            return cached.state_payload.plan;
        }
    } catch (error) {
        console.error('Failed to load cached plan:', error);
    }

    const frequency = profile?.preferences?.training_frequency || 4;
    const plan = buildDefaultWeekPlan({ startDate: weekStart, frequency });

    try {
        await db.saveDialogState(
            profileId,
            PLAN_CACHE_STATE,
            {
                plan,
                generated_at: new Date().toISOString(),
            },
            addDays(weekEnd, 1)
        );
    } catch (error) {
        console.error('Failed to store fallback plan:', error);
    }

    return plan;
}

async function serveFallbackToday(ctx, profile, todayIso) {
    const todayDate = new Date(todayIso);
    const weekStart = startOfWeek(todayDate, { weekStartsOn: 1 });
    const weekEnd = addDays(weekStart, 6);
    const plan = await loadFallbackPlan(profile, ctx.state.profileId, weekStart, weekEnd);
    const session = (plan.sessions || []).find(item => item.date === todayIso);

    await beginChatResponse(ctx);

    if (!session) {
        await replyWithTracking(
            ctx,
            'üí§ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –¥–µ–Ω—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ª—ë–≥–∫–æ–π –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏.'
        );
        return;
    }

    const message = formatDetailedSession(session) + '\n\n–û—Ç–∫—Ä–æ–π WebApp, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é.';
    await replyWithTracking(ctx, message, { parse_mode: 'Markdown' });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—Ä–µ–≤—å—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
 */
function formatSessionPreview(session) {
    const exercises = session.exercises || [];

    if (exercises.length === 0) {
        return `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${session.session_type || '–û—Å–Ω–æ–≤–Ω–∞—è'}\n`;
    }

    const preview = exercises.slice(0, 2).map(ex => {
        const name = ex.name || ex.exercise_key;
        const level = ex.level ? ` (${ex.level})` : '';
        const volume = ex.sets && ex.reps ? ` ‚Äî ${ex.sets}√ó${ex.reps}` : '';
        return `‚Ä¢ ${name}${level}${volume}`;
    }).join('\n');

    const more = exercises.length > 2 ? `\n‚Ä¢ ... –∏ –µ—â—ë ${exercises.length - 2}` : '';

    return preview + more + '\n';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
 */
function formatDetailedSession(session) {
    let message = `üèãÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ ${format(new Date(session.date), 'd MMMM', { locale: ru })}**\n\n`;

    if (session.focus) {
        message += `**–§–æ–∫—É—Å:** ${session.focus}\n\n`;
    }

    if (session.session_type) {
        message += `**–¢–∏–ø:** ${session.session_type}\n\n`;
    }

    if (session.warmup && session.warmup.length > 0) {
        message += `**–†–∞–∑–º–∏–Ω–∫–∞:**\n`;
        message += session.warmup.map(item => `‚Ä¢ ${item}`).join('\n');
        message += '\n\n';
    }

    const exercises = session.exercises || [];

    if (exercises.length > 0) {
        message += `**–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n\n`;

        exercises.forEach((ex, index) => {
            message += `${index + 1}. **${ex.name || ex.exercise_key}**\n`;

            if (ex.level) {
                message += `   –£—Ä–æ–≤–µ–Ω—å: ${ex.level}\n`;
            }

            if (ex.sets && ex.reps) {
                message += `   –ü–æ–¥—Ö–æ–¥—ã: ${ex.sets} √ó ${ex.reps}\n`;
            }

            if (ex.tempo) {
                message += `   –¢–µ–º–ø: ${ex.tempo}\n`;
            }

            if (ex.rest) {
                message += `   –û—Ç–¥—ã—Ö: ${ex.rest} —Å–µ–∫\n`;
            }

            if (ex.notes) {
                message += `   üí° ${ex.notes}\n`;
            }

            message += '\n';
        });
    }

    if (session.notes) {
        message += `**–ó–∞–º–µ—Ç–∫–∏:**\n${session.notes}\n\n`;
    }

    if (session.cooldown && session.cooldown.length > 0) {
        message += `**–ó–∞–º–∏–Ω–∫–∞:**\n`;
        message += session.cooldown.map(item => `‚Ä¢ ${item}`).join('\n');
        message += '\n\n';
    }

    const targetRpe = session.rpe || 7;
    message += `üéØ –¶–µ–ª–µ–≤–æ–µ RPE: ${targetRpe}/10\n`;

    return message;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusEmoji(status) {
    const statusMap = {
        'planned': 'üìã',
        'in_progress': 'üèÉ',
        'done': '‚úÖ',
        'skipped': '‚è≠Ô∏è',
        'rescheduled': 'üîÑ',
    };
    return statusMap[status] || 'üìã';
}

export default {
    planCommand,
    planTodayCallback,
};

