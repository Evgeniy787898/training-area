import { Markup } from 'telegraf';
import { db } from '../../infrastructure/supabase.js';
import plannerService from '../../services/planner.js';

/**
 * –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
 */
export async function startCommand(ctx) {
    const profile = ctx.state.profile;
    const firstName = ctx.from.first_name || '–¥—Ä—É–≥';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫
    const isFirstTime = !profile.goals || Object.keys(profile.goals).length === 0;

    if (isFirstTime) {
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        await sendOnboardingWelcome(ctx, firstName);
    } else {
        // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await sendMainMenu(ctx, firstName);
    }
}

/**
 * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function sendOnboardingWelcome(ctx, firstName) {
    const welcomeMessage =
        `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n` +
        `–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–º–æ–≥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ –±–µ–∑ –±–æ–ª–∏.\n\n` +
        `üéØ **–ß—Ç–æ —è —É–º–µ—é:**\n` +
        `‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n` +
        `‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ–¥ —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n` +
        `‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n` +
        `‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n\n` +
        `–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥ —Ç–µ–±—è.`;

    await ctx.reply(welcomeMessage, Markup.inlineKeyboard([
        [Markup.button.callback('üöÄ –ü–æ–µ—Ö–∞–ª–∏!', 'onboarding_start')],
    ]));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    await db.saveDialogState(
        ctx.state.profileId,
        'onboarding',
        { step: 'welcome', started_at: new Date().toISOString() },
        new Date(Date.now() + 24 * 60 * 60 * 1000) // expires in 24 hours
    );
}

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function sendMainMenu(ctx, firstName) {
    const menuMessage =
        `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName}!\n\n` +
        `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await ctx.reply(menuMessage, Markup.keyboard([
        ['üìÖ –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
        ['üìù –û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
        ['‚ùì –ü–æ–º–æ—â—å'],
    ]).resize());
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 */
export async function onboardingStartCallback(ctx) {
    await ctx.answerCbQuery();
    await ctx.deleteMessage();

    const goalMessage =
        `üéØ **–®–∞–≥ 1 –∏–∑ 4: –¢–≤–æ—è —Ü–µ–ª—å**\n\n` +
        `–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:`;

    await ctx.reply(goalMessage, Markup.inlineKeyboard([
        [Markup.button.callback('üí™ –°–∏–ª–æ–≤–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', 'goal_strength_endurance')],
        [Markup.button.callback('üî• –†–µ–ª—å–µ—Ñ', 'goal_definition')],
        [Markup.button.callback('‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å', 'goal_health')],
        [Markup.button.callback('üéØ –í—Å—ë –ø–æ–Ω–µ–º–Ω–æ–≥—É', 'goal_balanced')],
    ]));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.saveDialogState(
        ctx.state.profileId,
        'onboarding',
        { step: 'goal' },
        new Date(Date.now() + 24 * 60 * 60 * 1000)
    );
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
 */
export async function goalCallback(ctx) {
    await ctx.answerCbQuery();

    const goalMap = {
        'goal_strength_endurance': { primary: '–°–∏–ª–æ–≤–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', key: 'strength_endurance' },
        'goal_definition': { primary: '–†–µ–ª—å–µ—Ñ', key: 'definition' },
        'goal_health': { primary: '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å', key: 'health' },
        'goal_balanced': { primary: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', key: 'balanced' },
    };

    const selectedGoal = goalMap[ctx.callbackQuery.data];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const currentState = await db.getDialogState(ctx.state.profileId, 'onboarding');
    const newPayload = {
        ...currentState.state_payload,
        goal: selectedGoal,
        step: 'equipment',
    };

    await db.saveDialogState(
        ctx.state.profileId,
        'onboarding',
        newPayload,
        new Date(Date.now() + 24 * 60 * 60 * 1000)
    );

    await ctx.deleteMessage();

    const equipmentMessage =
        `üèãÔ∏è **–®–∞–≥ 2 –∏–∑ 4: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ**\n\n` +
        `–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):`;

    await ctx.reply(equipmentMessage, Markup.inlineKeyboard([
        [Markup.button.callback('üö´ –¢–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞', 'equip_bodyweight')],
        [Markup.button.callback('üèÉ –¢—É—Ä–Ω–∏–∫', 'equip_pullup_bar')],
        [Markup.button.callback('üí™ –ë—Ä—É—Å—å—è', 'equip_parallel_bars')],
        [Markup.button.callback('üéæ –†–µ–∑–∏–Ω–∫–∏/TRX', 'equip_resistance')],
        [Markup.button.callback('üèãÔ∏è –ì–∞–Ω—Ç–µ–ª–∏/–≥–∏—Ä–∏', 'equip_weights')],
        [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'equip_done')],
    ]));
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 */
export async function equipmentCallback(ctx) {
    await ctx.answerCbQuery();

    const currentState = await db.getDialogState(ctx.state.profileId, 'onboarding');
    let equipment = currentState.state_payload.equipment || [];

    const equipmentMap = {
        'equip_bodyweight': '–í–µ—Å —Ç–µ–ª–∞',
        'equip_pullup_bar': '–¢—É—Ä–Ω–∏–∫',
        'equip_parallel_bars': '–ë—Ä—É—Å—å—è',
        'equip_resistance': '–†–µ–∑–∏–Ω–∫–∏/TRX',
        'equip_weights': '–ì–∞–Ω—Ç–µ–ª–∏/–≥–∏—Ä–∏',
    };

    if (ctx.callbackQuery.data === 'equip_done') {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await askSchedule(ctx, currentState);
        return;
    }

    const selectedEquipment = equipmentMap[ctx.callbackQuery.data];

    if (selectedEquipment) {
        if (!equipment.includes(selectedEquipment)) {
            equipment.push(selectedEquipment);
        }

        const newPayload = {
            ...currentState.state_payload,
            equipment,
        };

        await db.saveDialogState(
            ctx.state.profileId,
            'onboarding',
            newPayload,
            new Date(Date.now() + 24 * 60 * 60 * 1000)
        );

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        await ctx.answerCbQuery(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${selectedEquipment}`);
    }
}

/**
 * –í–æ–ø—Ä–æ—Å –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
 */
async function askSchedule(ctx, currentState) {
    await ctx.deleteMessage();

    const scheduleMessage =
        `üìÖ **–®–∞–≥ 3 –∏–∑ 4: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ**\n\n` +
        `–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?`;

    await ctx.reply(scheduleMessage, Markup.inlineKeyboard([
        [
            Markup.button.callback('3 —Ä–∞–∑–∞', 'schedule_3'),
            Markup.button.callback('4 —Ä–∞–∑–∞', 'schedule_4'),
        ],
        [
            Markup.button.callback('5 —Ä–∞–∑', 'schedule_5'),
            Markup.button.callback('6 —Ä–∞–∑', 'schedule_6'),
        ],
    ]));

    const newPayload = {
        ...currentState.state_payload,
        step: 'schedule',
    };

    await db.saveDialogState(
        ctx.state.profileId,
        'onboarding',
        newPayload,
        new Date(Date.now() + 24 * 60 * 60 * 1000)
    );
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export async function scheduleCallback(ctx) {
    await ctx.answerCbQuery();

    const scheduleMap = {
        'schedule_3': 3,
        'schedule_4': 4,
        'schedule_5': 5,
        'schedule_6': 6,
    };

    const frequency = scheduleMap[ctx.callbackQuery.data];
    const currentState = await db.getDialogState(ctx.state.profileId, 'onboarding');

    const newPayload = {
        ...currentState.state_payload,
        frequency,
        step: 'time',
    };

    await db.saveDialogState(
        ctx.state.profileId,
        'onboarding',
        newPayload,
        new Date(Date.now() + 24 * 60 * 60 * 1000)
    );

    await ctx.deleteMessage();

    const timeMessage =
        `‚è∞ **–®–∞–≥ 4 –∏–∑ 4: –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n` +
        `–ö–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?`;

    await ctx.reply(timeMessage, Markup.inlineKeyboard([
        [Markup.button.callback('üåÖ –£—Ç—Ä–æ–º (6:00-9:00)', 'time_morning')],
        [Markup.button.callback('‚òÄÔ∏è –î–Ω—ë–º (12:00-15:00)', 'time_afternoon')],
        [Markup.button.callback('üåÜ –í–µ—á–µ—Ä–æ–º (18:00-21:00)', 'time_evening')],
    ]));
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 */
export async function timeCallback(ctx) {
    await ctx.answerCbQuery();

    const timeMap = {
        'time_morning': { time: '06:00:00', label: '—É—Ç—Ä–æ' },
        'time_afternoon': { time: '12:00:00', label: '–¥–µ–Ω—å' },
        'time_evening': { time: '18:00:00', label: '–≤–µ—á–µ—Ä' },
    };

    const selectedTime = timeMap[ctx.callbackQuery.data];
    const currentState = await db.getDialogState(ctx.state.profileId, 'onboarding');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await db.updateProfile(ctx.state.profileId, {
        goals: {
            primary: currentState.state_payload.goal.key,
            description: currentState.state_payload.goal.primary,
        },
        equipment: currentState.state_payload.equipment || [],
        preferences: {
            ...ctx.state.profile.preferences,
            training_frequency: currentState.state_payload.frequency,
            preferred_time: selectedTime.label,
        },
        notification_time: selectedTime.time,
    });

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    await db.clearDialogState(ctx.state.profileId, 'onboarding');

    await ctx.deleteMessage();

    const summaryMessage =
        `üéâ **–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω**\n\n` +
        `‚úÖ –¶–µ–ª—å: ${currentState.state_payload.goal.primary}\n` +
        `‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${currentState.state_payload.equipment.join(', ') || '–í–µ—Å —Ç–µ–ª–∞'}\n` +
        `‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: ${currentState.state_payload.frequency}\n` +
        `‚úÖ –í—Ä–µ–º—è: ${selectedTime.label}\n\n` +
        `–°–µ–π—á–∞—Å —è —Å–æ—Å—Ç–∞–≤–ª—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...`;

    await ctx.reply(summaryMessage);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞
    await generateInitialPlan(ctx);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
 */
async function generateInitialPlan(ctx) {
    try {
        await ctx.reply('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω...');

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É —Å ChatGPT
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏

        const completionMessage =
            `‚úÖ **–ü–ª–∞–Ω –≥–æ—Ç–æ–≤!**\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n` +
            `üìÖ /plan ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é\n` +
            `üìù /report ‚Äî –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\n` +
            `üìä /stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n` +
            `‚öôÔ∏è /settings ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
            `–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!`;

        await ctx.reply(completionMessage, Markup.keyboard([
            ['üìÖ –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
            ['üìù –û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
            ['‚ùì –ü–æ–º–æ—â—å'],
        ]).resize());

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        await db.logEvent(
            ctx.state.profileId,
            'onboarding_completed',
            'info',
            { timestamp: new Date().toISOString() }
        );

    } catch (error) {
        console.error('Error generating initial plan:', error);
        await ctx.reply(
            'üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /plan —á—É—Ç—å –ø–æ–∑–∂–µ.'
        );
    }
}

export default {
    startCommand,
    onboardingStartCallback,
    goalCallback,
    equipmentCallback,
    scheduleCallback,
    timeCallback,
};

