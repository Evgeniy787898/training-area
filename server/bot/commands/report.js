import { Markup } from 'telegraf';
import { format } from 'date-fns';
import ru from 'date-fns/locale/ru/index.js';
import { db } from '../../infrastructure/supabase.js';
import plannerService from '../../services/planner.js';
import progressionService from '../../services/progression.js';
import { beginChatResponse, replyWithTracking } from '../utils/chat.js';
import { buildMainMenuKeyboard, withMainMenuButton } from '../utils/menu.js';

const REPORT_STATE_KEY = 'report';
const REPORT_STATE_TTL_MS = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞
const PERFORMANCE_SKIP_ACTION = 'report_performance_skip';

const EXERCISE_SYNONYMS = {
    pullups: ['–ø–æ–¥—Ç—è–≥', '—Ç—è–≥', 'pull'],
    pushups: ['–æ—Ç–∂–∏–º', '–∂–∏–º', 'push'],
    squats: ['–ø—Ä–∏—Å–µ–¥', 'squat'],
    legRaises: ['–ø—Ä–µ—Å—Å', '–∫–æ—Ä', '—É–≥–æ–ª–æ–∫', '–ø–æ–¥—ä—ë–º', '–ø–æ–¥—ä–µ–º', 'raises'],
    handstand: ['—Å—Ç–æ–π–∫', 'handstand'],
    bridge: ['–º–æ—Å—Ç', 'bridge'],
};

const COMPLETION_LABELS = {
    full: { rate: 100, label: '–ü–æ–ª–Ω–æ—Å—Ç—å—é' },
    partial: { rate: 70, label: '–ß–∞—Å—Ç–∏—á–Ω–æ' },
    none: { rate: 0, label: '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å' },
};

/**
 * –ö–æ–º–∞–Ω–¥–∞ /report - –æ—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
 */
export async function reportCommand(ctx) {
    const profileId = ctx.state.profileId;

    try {
        await beginChatResponse(ctx);

        const sessions = await db.getTrainingSessions(profileId, {
            status: 'planned',
        });

        if (!sessions || sessions.length === 0) {
            await replyWithTracking(ctx,
                'üìã –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –æ—Ç—á—ë—Ç–∞.\n\n' +
                '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π /plan',
                buildMainMenuKeyboard()
            );
            return;
        }

        const buttons = sessions.slice(0, 5).map(session => {
            const dateStr = format(new Date(session.date), 'd MMMM', { locale: ru });
            return [Markup.button.callback(
                `${dateStr} ‚Äî ${session.session_type || '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'}`,
                `report_session_${session.id}`
            )];
        });

        const keyboard = withMainMenuButton(buttons);

        await replyWithTracking(ctx,
            'üìù **–û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ**\n\n' +
            '–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è:',
            { parse_mode: 'Markdown', ...keyboard }
        );

    } catch (error) {
        console.error('Error in report command:', error);
        await beginChatResponse(ctx);
        await replyWithTracking(ctx, 'üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.');
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞
 */
export async function reportSessionCallback(ctx) {
    await ctx.answerCbQuery();

    const sessionId = ctx.callbackQuery.data.replace('report_session_', '');

    try {
        const session = await db.getTrainingSession(sessionId);

        if (!session) {
            await ctx.reply('üòî –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        await db.saveDialogState(
            ctx.state.profileId,
            REPORT_STATE_KEY,
            {
                sessionId: session.id,
                step: 'performance',
                performance: null,
            },
            stateExpiry()
        );

        await ctx.deleteMessage().catch(() => {});
        await beginChatResponse(ctx);

        const dateLabel = format(new Date(session.date), 'd MMMM', { locale: ru });
        const message =
            `üìù **–û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ**\n\n` +
            `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${dateLabel}\n\n` +
            `**–®–∞–≥ 1/3: –ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?**\n` +
            `–ù–∞–ø–∏—à–∏ –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n` +
            `‚Ä¢ ¬´–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è 3x8¬ª\n` +
            `‚Ä¢ ¬´–û—Ç–∂–∏–º–∞–Ω–∏—è 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12¬ª\n` +
            `‚Ä¢ ¬´–ü—Ä–µ—Å—Å 3√ó20¬ª\n\n` +
            `–ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –µ–≥–æ.\n`;

        const keyboard = withMainMenuButton([
            [Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ RPE', PERFORMANCE_SKIP_ACTION)],
        ]);

        await replyWithTracking(ctx, message, { parse_mode: 'Markdown', ...keyboard });

    } catch (error) {
        console.error('Error in report session callback:', error);
        await beginChatResponse(ctx);
        await replyWithTracking(ctx, 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.');
    }
}

export async function performanceSkipCallback(ctx) {
    await ctx.answerCbQuery();

    const state = await db.getDialogState(ctx.state.profileId, REPORT_STATE_KEY);
    if (!state?.state_payload) {
        return;
    }

    const payload = {
        ...state.state_payload,
        step: 'rpe',
        performance: {
            entries: [],
            completionRate: 100,
            summary: '–î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥—Ö–æ–¥–∞—Ö –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É.',
        },
    };

    await db.saveDialogState(
        ctx.state.profileId,
        REPORT_STATE_KEY,
        payload,
        stateExpiry()
    );

    await promptForRpe(ctx, payload.performance.summary);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ–¥—Ö–æ–¥–æ–≤
 */
export async function handlePerformanceText(ctx) {
    const state = await db.getDialogState(ctx.state.profileId, REPORT_STATE_KEY);
    if (!state?.state_payload || state.state_payload.step !== 'performance') {
        return false;
    }

    const session = await db.getTrainingSession(state.state_payload.sessionId);
    if (!session) {
        await replyWithTracking(ctx, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /report.');
        return true;
    }

    const parsed = parsePerformanceInput(ctx.message.text, session);

    if (!parsed.entries.length) {
        await replyWithTracking(ctx,
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–¥—Ö–æ–¥—ã. –£–∫–∞–∂–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è 3x8¬ª –∏–ª–∏ ¬´–û—Ç–∂–∏–º–∞–Ω–∏—è 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12¬ª.');
        return true;
    }

    const payload = {
        ...state.state_payload,
        performance: parsed,
        completionRate: parsed.completionRate,
        step: 'rpe',
    };

    await db.saveDialogState(
        ctx.state.profileId,
        REPORT_STATE_KEY,
        payload,
        stateExpiry()
    );

    await promptForRpe(ctx, parsed.summary);
    return true;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ RPE
 */
export async function rpeCallback(ctx) {
    await ctx.answerCbQuery();

    const state = await db.getDialogState(ctx.state.profileId, REPORT_STATE_KEY);
    if (!state?.state_payload || state.state_payload.step !== 'rpe') {
        return;
    }

    const rpeMap = {
        'rpe_2': 2,
        'rpe_5': 5,
        'rpe_7': 7.5,
        'rpe_9': 9,
    };

    const rpe = rpeMap[ctx.callbackQuery.data];

    const newPayload = {
        ...state.state_payload,
        rpe,
        step: 'completion',
    };

    await db.saveDialogState(
        ctx.state.profileId,
        REPORT_STATE_KEY,
        newPayload,
        stateExpiry()
    );

    await ctx.deleteMessage().catch(() => {});
    await beginChatResponse(ctx);

    const estimatedCompletion = newPayload.completionRate ?? newPayload.performance?.completionRate;
    const suggestion = estimatedCompletion != null
        ? `–ü–æ –∑–∞–ø–∏—Å—è–º –≤–∏–∂—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ ${estimatedCompletion}%.\n`
        : '';

    const message =
        `üìù **–û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ**\n\n` +
        `‚úÖ RPE: ${rpe}/10\n\n` +
        `${suggestion}` +
        `**–®–∞–≥ 3/3: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞**`;

    const keyboard = withMainMenuButton([
        [Markup.button.callback('‚úÖ –î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é', 'completion_full')],
        [Markup.button.callback('üî∏ –ß–∞—Å—Ç–∏—á–Ω–æ', 'completion_partial')],
        [Markup.button.callback('‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å', 'completion_none')],
    ]);

    await replyWithTracking(ctx, message, { parse_mode: 'Markdown', ...keyboard });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–µ–ø–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function completionCallback(ctx) {
    await ctx.answerCbQuery();

    const completionMap = {
        'completion_full': COMPLETION_LABELS.full,
        'completion_partial': COMPLETION_LABELS.partial,
        'completion_none': COMPLETION_LABELS.none,
    };

    const selection = completionMap[ctx.callbackQuery.data];
    if (!selection) {
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±–æ—Ä');
        return;
    }

    const currentState = await db.getDialogState(ctx.state.profileId, REPORT_STATE_KEY);
    if (!currentState?.state_payload) {
        return;
    }

    const newPayload = {
        ...currentState.state_payload,
        completionRate: selection.rate,
        completionLabel: selection.label,
        step: 'notes',
    };

    await db.saveDialogState(
        ctx.state.profileId,
        REPORT_STATE_KEY,
        newPayload,
        stateExpiry()
    );

    await ctx.deleteMessage().catch(() => {});
    await beginChatResponse(ctx);

    const message =
        `üìù **–û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ**\n\n` +
        `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${selection.label}\n\n` +
        `**–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥:** –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–µ?\n` +
        `–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.`;

    const keyboard = withMainMenuButton([
        [Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'notes_skip')],
    ]);

    await replyWithTracking(ctx, message, { parse_mode: 'Markdown', ...keyboard });
}

export async function notesSkipCallback(ctx) {
    await ctx.answerCbQuery();
    await finalizeReport(ctx, null);
}

export async function notesTextHandler(ctx) {
    const state = await db.getDialogState(ctx.state.profileId, REPORT_STATE_KEY);

    if (!state || state.state_payload.step !== 'notes') {
        return false;
    }

    const notes = ctx.message.text;
    await finalizeReport(ctx, notes);
    return true;
}

async function finalizeReport(ctx, notes) {
    const state = await db.getDialogState(ctx.state.profileId, REPORT_STATE_KEY);
    if (!state?.state_payload) {
        await replyWithTracking(ctx, '–ü–æ—Ö–æ–∂–µ, –æ—Ç—á—ë—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.');
        return;
    }

    const { sessionId, rpe, completionRate, performance } = state.state_payload;

    try {
        const session = await db.getTrainingSession(sessionId);

        if (!session) {
            await replyWithTracking(ctx, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /report.');
            return;
        }

        const completionValue = typeof completionRate === 'number'
            ? completionRate
            : performance?.completionRate ?? COMPLETION_LABELS.partial.rate;

        const updatedExercises = mergePerformanceIntoSession(performance, session);

        const updatedSession = await db.updateTrainingSession(sessionId, {
            status: completionValue > 50 ? 'done' : 'skipped',
            rpe,
            notes: notes || '',
            exercises: updatedExercises,
            updated_at: new Date().toISOString(),
        });

        await db.clearDialogState(ctx.state.profileId, REPORT_STATE_KEY);

        const refreshedSession = await db.getTrainingSession(sessionId);

        if (performance?.entries?.length) {
            await persistProgressionDecisions(ctx.state.profileId, refreshedSession, performance, rpe, notes);
        }

        const feedbackMessage = buildFeedbackMessage(refreshedSession, performance, rpe, completionValue, notes);

        await beginChatResponse(ctx);
        const placeholder = `${feedbackMessage}\n\n‚è≥ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...`;
        const summaryMessage = await replyWithTracking(ctx, placeholder, { parse_mode: 'Markdown' });

        setTimeout(async () => {
            try {
                const analysis = await plannerService.analyzeTrainingReport({
                    session: refreshedSession,
                    exercises: refreshedSession.exercises || [],
                    rpe,
                    notes,
                    history: await db.getTrainingSessions(ctx.state.profileId, {
                        endDate: refreshedSession.date,
                    }),
                });

                const analysisText = analysis?.feedback
                    ? `${feedbackMessage}\n\nüí≠ **–ú–æ–π –∞–Ω–∞–ª–∏–∑:**\n\n${analysis.feedback}`
                    : feedbackMessage;

                try {
                    await ctx.telegram.editMessageText(
                        ctx.chat.id,
                        summaryMessage.message_id,
                        undefined,
                        analysisText,
                        { parse_mode: 'Markdown' }
                    );
                } catch (editError) {
                    console.error('Failed to edit summary message:', editError);
                    await replyWithTracking(ctx, analysisText, { parse_mode: 'Markdown' });
                }
            } catch (error) {
                console.error('Error getting AI analysis:', error);
                try {
                    await ctx.telegram.editMessageText(
                        ctx.chat.id,
                        summaryMessage.message_id,
                        undefined,
                        `${feedbackMessage}\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä—é –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∂–µ.`,
                        { parse_mode: 'Markdown' }
                    );
                } catch (editError) {
                    console.error('Failed to update summary after analysis error:', editError);
                }
            }
        }, 1000);

        await db.recordMetric(
            ctx.state.profileId,
            'training_completed',
            1,
            'count'
        );

        await db.logEvent(
            ctx.state.profileId,
            'training_report_submitted',
            'info',
            {
                session_id: sessionId,
                rpe,
                completion_rate: completionValue,
            }
        );

        await db.logDialogEvent(
            ctx.state.profileId,
            'report_submitted',
            {
                session_id: sessionId,
                rpe,
                completion_rate: completionValue,
                exercises: performance?.entries || [],
            }
        );

    } catch (error) {
        console.error('Error finalizing report:', error);
        await beginChatResponse(ctx);
        await replyWithTracking(ctx, 'üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    }
}

function stateExpiry() {
    return new Date(Date.now() + REPORT_STATE_TTL_MS);
}

async function promptForRpe(ctx, summary) {
    await ctx.deleteMessage().catch(() => {});
    await beginChatResponse(ctx);

    const message =
        `${summary ? `${summary}\n\n` : ''}` +
        `**–®–∞–≥ 2/3: –û—Ü–µ–Ω–∏ –Ω–∞–≥—Ä—É–∑–∫—É (RPE)**\n` +
        `1-3 ‚Äî –û—á–µ–Ω—å –ª–µ–≥–∫–æ\n` +
        `4-6 ‚Äî –£–º–µ—Ä–µ–Ω–Ω–æ\n` +
        `7-8 ‚Äî –¢—è–∂–µ–ª–æ\n` +
        `9-10 ‚Äî –ü—Ä–µ–¥–µ–ª—å–Ω–æ`;

    const keyboard = withMainMenuButton([
        [
            Markup.button.callback('1-3 üòå', 'rpe_2'),
            Markup.button.callback('4-6 üòä', 'rpe_5'),
            Markup.button.callback('7-8 üí™', 'rpe_7'),
            Markup.button.callback('9-10 üî•', 'rpe_9'),
        ],
    ]);

    await replyWithTracking(ctx, message, { parse_mode: 'Markdown', ...keyboard });
}

function parsePerformanceInput(text, session) {
    const lines = text
        .split(/\n|;/)
        .map(line => line.trim())
        .filter(Boolean);

    const planExercises = Array.isArray(session?.exercises) ? session.exercises : [];
    const entries = [];
    const unmatchedLines = [];

    for (const line of lines) {
        const numbers = extractSetsReps(line);
        if (!numbers) {
            unmatchedLines.push(line);
            continue;
        }

        const targetKey = resolveExerciseKey(line, planExercises);
        entries.push({
            exercise_key: targetKey,
            sets: numbers.sets,
            reps: numbers.reps,
            raw: line,
        });
    }

    const enriched = enrichEntriesWithPlan(entries, planExercises);
    const completionRate = calculateCompletionRate(enriched, planExercises);

    const summaryLines = enriched
        .filter(entry => entry.exercise_key)
        .map(entry => {
            const name = entry.name || entry.exercise_key;
            const target = entry.targetSets && entry.targetReps
                ? `${entry.targetSets}√ó${entry.targetReps}`
                : '—Å–≤–æ–±–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
            return `‚Ä¢ ${name}: ${entry.sets}√ó${entry.reps} (–ø–ª–∞–Ω ${target})`;
        });

    if (unmatchedLines.length > 0) {
        summaryLines.push(`‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: ${unmatchedLines.join('; ')}`);
    }

    const summary = summaryLines.length
        ? `–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª:\n${summaryLines.join('\n')}\n\n–û—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚âà ${completionRate}%`
        : '–î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥—Ö–æ–¥–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.';

    return {
        entries: enriched,
        unmatched: unmatchedLines,
        completionRate,
        summary,
    };
}

function extractSetsReps(line) {
    const normalized = line.replace(',', '.');
    const crossMatch = /(\d+)\s*[x—Ö√ó*]\s*(\d+)/i.exec(normalized);
    if (crossMatch) {
        return {
            sets: Number(crossMatch[1]),
            reps: Number(crossMatch[2]),
        };
    }

    const wordsMatch = /(\d+)\s*(?:–ø–æ–¥—Ö–æ–¥\w*)\D+(\d+)/i.exec(normalized);
    if (wordsMatch) {
        return {
            sets: Number(wordsMatch[1]),
            reps: Number(wordsMatch[2]),
        };
    }

    const numbers = normalized.match(/\d+/g);
    if (numbers && numbers.length >= 2) {
        return {
            sets: Number(numbers[0]),
            reps: Number(numbers[1]),
        };
    }

    return null;
}

function resolveExerciseKey(line, planExercises) {
    const normalized = line.toLowerCase();

    for (const exercise of planExercises) {
        if (!exercise) continue;
        const name = (exercise.name || exercise.exercise_key || '').toLowerCase();
        if (name && normalized.includes(name)) {
            return exercise.exercise_key || exercise.name || null;
        }

        const synonyms = EXERCISE_SYNONYMS[exercise.exercise_key] || [];
        if (synonyms.some(syn => normalized.includes(syn))) {
            return exercise.exercise_key;
        }
    }

    for (const [key, synonyms] of Object.entries(EXERCISE_SYNONYMS)) {
        if (synonyms.some(syn => normalized.includes(syn))) {
            return key;
        }
    }

    return null;
}

function enrichEntriesWithPlan(entries, planExercises) {
    return entries.map(entry => {
        if (!entry.exercise_key) {
            return entry;
        }

        const plan = planExercises.find(ex => ex.exercise_key === entry.exercise_key);

        if (!plan) {
            return entry;
        }

        const targetSets = plan.target?.sets ?? plan.sets ?? null;
        const targetReps = plan.target?.reps ?? plan.reps ?? null;
        const targetVolume = targetSets && targetReps ? targetSets * targetReps : null;
        const actualVolume = entry.sets * entry.reps;

        const completionRatio = targetVolume
            ? Math.min(actualVolume / targetVolume, 1.3)
            : (actualVolume > 0 ? 1 : 0);

        return {
            ...entry,
            name: plan.name || plan.exercise_key,
            targetSets,
            targetReps,
            completionRatio,
            planLevel: plan.level || plan.target?.level || null,
        };
    });
}

function calculateCompletionRate(entries, planExercises) {
    const matched = entries.filter(entry => entry.exercise_key && typeof entry.completionRatio === 'number');

    if (matched.length) {
        const sum = matched.reduce((acc, entry) => acc + entry.completionRatio, 0);
        return Math.round((sum / matched.length) * 100);
    }

    if (planExercises.length === 0) {
        return 100;
    }

    return 70;
}

function mergePerformanceIntoSession(performance, session) {
    if (!performance?.entries?.length || !Array.isArray(session.exercises)) {
        return session.exercises || [];
    }

    const performanceMap = new Map(
        performance.entries
            .filter(entry => entry.exercise_key)
            .map(entry => [entry.exercise_key, entry])
    );

    return session.exercises.map(exercise => {
        const entry = performanceMap.get(exercise.exercise_key);
        if (!entry) {
            return exercise;
        }

        const ratio = entry.completionRatio ?? (entry.sets && entry.reps ? 1 : 0);
        let state = exercise.state;
        if (ratio >= 1) {
            state = 'done';
        } else if (ratio >= 0.5) {
            state = 'in_progress';
        } else {
            state = 'skipped';
        }

        return {
            ...exercise,
            actual: {
                sets: entry.sets,
                reps: entry.reps,
            },
            state,
        };
    });
}

async function persistProgressionDecisions(profileId, session, performance, rpe, notes) {
    if (!Array.isArray(session?.exercises) || !performance?.entries?.length) {
        return;
    }

    for (const entry of performance.entries) {
        if (!entry.exercise_key) {
            continue;
        }

        const planExercise = session.exercises.find(ex => ex.exercise_key === entry.exercise_key);
        if (!planExercise) {
            continue;
        }

        const targetSets = planExercise.target?.sets ?? planExercise.sets ?? 0;
        const targetReps = planExercise.target?.reps ?? planExercise.reps ?? 0;

        const analysis = await progressionService.analyzeExercise({
            exerciseKey: entry.exercise_key,
            targetSets,
            targetReps,
            actualSets: entry.sets,
            actualReps: entry.reps,
            rpe,
            notes,
        });

        const currentLevel = planExercise.level || planExercise.target?.level || null;
        const nextLevel = currentLevel
            ? progressionService.calculateNextLevel(currentLevel, analysis.decision)
            : currentLevel;

        await progressionService.saveProgressionDecision(
            session.id,
            entry.exercise_key,
            analysis,
            currentLevel,
            nextLevel
        );

        await db.logEvent(
            profileId,
            'exercise_progress_updated',
            'info',
            {
                session_id: session.id,
                exercise_key: entry.exercise_key,
                decision: analysis.decision,
                next_level: nextLevel,
            }
        );
    }
}

function buildFeedbackMessage(session, performance, rpe, completionRate, notes) {
    const dateHuman = format(new Date(session.date), 'd MMMM', { locale: ru });
    let message =
        `‚úÖ **–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç!**\n\n` +
        `–î–∞—Ç–∞: ${dateHuman}\n` +
        `RPE: ${rpe}/10\n` +
        `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${completionRate}%\n`;

    if (performance?.entries?.length) {
        const lines = performance.entries
            .filter(entry => entry.exercise_key)
            .map(entry => {
                const name = entry.name || entry.exercise_key;
                return `‚Ä¢ ${name}: ${entry.sets}√ó${entry.reps}`;
            });

        if (lines.length) {
            message += `\n–§–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n${lines.join('\n')}\n`;
        }
    }

    if (notes) {
        message += `\n–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏: ${notes}\n`;
    }

    return message;
}

export default {
    reportCommand,
    reportSessionCallback,
    performanceSkipCallback,
    handlePerformanceText,
    rpeCallback,
    completionCallback,
    notesSkipCallback,
    notesTextHandler,
};
