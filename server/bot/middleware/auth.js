import config from '../../config/env.js';
import { db } from '../../infrastructure/supabase.js';
import { recordUserMessage } from '../utils/chat.js';

/**
 * Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export async function authMiddleware(ctx, next) {
    try {
        const telegramId = ctx.from?.id;

        if (!telegramId) {
            console.error('No telegram ID in context');
            return;
        }

        if (config.telegram.allowedUserIds?.length &&
            !config.telegram.allowedUserIds.includes(String(telegramId))) {
            console.warn(`Rejected unauthorized Telegram ID ${telegramId}`);
            await ctx.reply('–î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø ‚Äî —Å–≤—è–∂–∏—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        let profile = await db.getProfileByTelegramId(telegramId);

        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        if (!profile) {
            console.log(`Creating new profile for telegram_id: ${telegramId}`);

            profile = await db.createProfile(telegramId, {
                goals: {},
                equipment: [],
                preferences: {
                    language: ctx.from.language_code || 'ru',
                    username: ctx.from.username,
                    first_name: ctx.from.first_name,
                },
            });

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            await db.logEvent(
                profile.id,
                'user_registration',
                'info',
                {
                    telegram_username: ctx.from.username,
                    first_name: ctx.from.first_name,
                    language_code: ctx.from.language_code,
                }
            );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ctx.state.profile = profile;
        ctx.state.profileId = profile.id;

        // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.logOperation(
            profile.id,
            ctx.updateType || 'message',
            'success'
        );

        await next();
    } catch (error) {
        console.error('Auth middleware error:', error);

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        if (ctx.state.profileId) {
            await db.logEvent(
                ctx.state.profileId,
                'auth_error',
                'critical',
                { error: error.message }
            );
        }

        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */
export async function loggingMiddleware(ctx, next) {
    const start = Date.now();

    try {
        await next();
    } finally {
        const duration = Date.now() - start;

        console.log({
            type: ctx.updateType,
            userId: ctx.from?.id,
            username: ctx.from?.username,
            text: ctx.message?.text?.substring(0, 100),
            duration: `${duration}ms`,
        });

        // –õ–æ–≥–∏—Ä—É–µ–º –≤ observability_events –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        if (ctx.state.profileId) {
            await db.logEvent(
                ctx.state.profileId,
                'user_action',
                'info',
                {
                    action_type: ctx.updateType,
                    duration_ms: duration,
                    command: ctx.message?.text?.split(' ')[0],
                }
            );

            if (ctx.updateType === 'message' && ctx.message?.text) {
                await recordUserMessage(ctx.state.profileId, {
                    direction: 'in',
                    message_id: ctx.message.message_id,
                    chat_id: ctx.chat?.id,
                    text: ctx.message.text,
                    timestamp: new Date().toISOString(),
                });
            } else if (ctx.updateType === 'callback_query' && ctx.callbackQuery?.data) {
                await recordUserMessage(ctx.state.profileId, {
                    direction: 'in',
                    type: 'callback',
                    data: ctx.callbackQuery.data,
                    message_id: ctx.callbackQuery.message?.message_id,
                    chat_id: ctx.chat?.id,
                    timestamp: new Date().toISOString(),
                });
            }
        }
    }
}

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
export async function errorMiddleware(ctx, next) {
    try {
        await next();
    } catch (error) {
        console.error('Bot error:', error);

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É
        if (ctx.state.profileId) {
            await db.logEvent(
                ctx.state.profileId,
                'bot_error',
                'critical',
                {
                    error: error.message,
                    stack: error.stack,
                    update_type: ctx.updateType,
                }
            );
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const errorMessage =
            'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.';

        try {
            await ctx.reply(errorMessage);
        } catch (replyError) {
            console.error('Failed to send error message:', replyError);
        }
    }
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
 */
export async function dialogStateMiddleware(ctx, next) {
  if (!ctx.state.profileId) {
    return next();
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    const activeState = await db.getDialogState(ctx.state.profileId, 'active');
    
    if (activeState && activeState.expires_at) {
      const expiresAt = new Date(activeState.expires_at);
      const now = new Date();
      
      if (expiresAt < now) {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –æ—á–∏—â–∞–µ–º –µ–≥–æ
        await db.clearDialogState(ctx.state.profileId, 'active');
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ctx.state.dialogState = activeState.state_payload;
      }
    }
  } catch (error) {
    console.error('Dialog state middleware error:', error);
  }
  
  return next();
}

export default {
    authMiddleware,
    loggingMiddleware,
    errorMiddleware,
    dialogStateMiddleware,
};
