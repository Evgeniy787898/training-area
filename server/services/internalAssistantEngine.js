import { format, parseISO } from 'date-fns';
import ru from 'date-fns/locale/ru/index.js';
import { db } from '../infrastructure/supabase.js';
import { buildDefaultWeekPlan } from './staticPlan.js';
import { detectIntent } from './nlu.js';

const RAW_INTENT_MAP = {
    'plan.today': 'plan_today',
    'plan.week': 'plan_week',
    'plan.setup': 'plan_setup',
    'report.start': 'report_start',
    'stats.show': 'stats_show',
    'settings.open': 'settings_open',
    'schedule.reschedule': 'schedule_reschedule',
    'recovery.mode': 'recovery_mode',
    'remind.later': 'remind_later',
    'motivation': 'motivation',
    'help': 'help',
    'note.save': 'note_save',
    'triggers.help': 'triggers_help',
};

const TRAINER_INTENTS = new Set([
    'plan_today',
    'plan_week',
    'plan_setup',
    'report_start',
    'stats_show',
    'settings_open',
    'schedule_reschedule',
    'recovery_mode',
    'remind_later',
    'motivation',
    'help',
]);

const GREETING_REGEX = /(–ø—Ä–∏–≤–µ—Ç|–¥–æ–±—Ä–æ–µ|–∑–¥—Ä–∞–≤—Å—Ç–≤|hi|hello)/i;
const GRATITUDE_REGEX = /(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä)/i;
const FATIGUE_REGEX = /(—Å–ª–∞–±|—É—Å—Ç–∞–ª|–±–æ–ª–∏—Ç|–Ω–µ —Ç—è–Ω—É|—Ç—è–∂–µ–ª|–∂–µ—Å—Ç–∫–æ|–∂—ë—Å—Ç–∫–æ)/i;
const EASY_REGEX = /(–ª–µ–≥–∫–æ|–¥–∞–∂–µ –Ω–µ –≤—Å–ø–æ—Ç|—Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ|—Ö–æ—á—É —Å–ª–æ–∂–Ω–µ–µ)/i;
const NOTE_TAG_REGEX = /#([\p{L}\d_]+)/gu;
const NOTE_COMMAND_REGEXES = [
    /—Å–æ—Ö—Ä–∞–Ω(?:–∏|–∏—Ç—å)\s*(?:—ç—Ç—É\s+)?(?:–∑–∞–º–µ—Ç–∫—É|–º—ã—Å–ª—å|–∏–¥–µ—é)?[-:]?\s*([\s\S]+)/i,
    /–∑–∞–º–µ—Ç–∫[–∞–∏]?\s*[-:]\s*([\s\S]+)/i,
    /–∑–∞–ø–∏—à–∏\s*(?:—á—Ç–æ|—ç—Ç–æ|–≤\s*–∑–∞–º–µ—Ç–∫–∏)?[-:]?\s*([\s\S]+)/i,
];
const CHAT_STATE_KEY = 'ai_chat_history';
const NOTE_PREVIEW_LIMIT = 120;

function toInternalIntent(rawIntent) {
    if (!rawIntent) {
        return 'unknown';
    }
    return RAW_INTENT_MAP[rawIntent] || rawIntent.replace('.', '_') || 'unknown';
}

function randomChoice(items) {
    if (!Array.isArray(items) || items.length === 0) {
        return null;
    }
    const index = Math.floor(Math.random() * items.length);
    return items[index];
}

function shortenText(text, limit = 120) {
    if (!text) {
        return '';
    }
    const normalized = text.replace(/\s+/g, ' ').trim();
    if (normalized.length <= limit) {
        return normalized;
    }
    return `${normalized.slice(0, Math.max(0, limit - 1)).trim()}‚Ä¶`;
}

function extractNoteTags(content) {
    if (!content) {
        return [];
    }
    return Array.from(content.matchAll(NOTE_TAG_REGEX)).map(match => match[1].toLowerCase());
}

function parseNoteCommand(text) {
    if (!text) {
        return null;
    }

    const normalized = text.trim();

    for (const pattern of NOTE_COMMAND_REGEXES) {
        const match = normalized.match(pattern);
        if (match && match[1]) {
            const rawContent = match[1].trim();
            if (!rawContent) {
                return { content: '' };
            }

            const tags = extractNoteTags(rawContent);
            const content = rawContent;
            const preview = shortenText(content, NOTE_PREVIEW_LIMIT);
            const sentence = content.split(/[\r\n]+/u)[0]
                .split(/[.!?]/u)[0]
                .trim();

            return {
                content,
                tags,
                preview,
                title: sentence ? shortenText(sentence, 60) : '–ó–∞–º–µ—Ç–∫–∞',
            };
        }
    }

    return null;
}

function formatRelativeTimeLabel(dateInput) {
    if (!dateInput) {
        return null;
    }

    const date = dateInput instanceof Date ? dateInput : new Date(dateInput);
    if (Number.isNaN(date.getTime())) {
        return null;
    }

    const now = Date.now();
    const diffMs = Math.max(0, now - date.getTime());
    const diffMinutes = Math.floor(diffMs / 60000);

    if (diffMinutes < 1) {
        return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    }
    if (diffMinutes < 60) {
        return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    }

    const diffHours = Math.floor(diffMinutes / 60);
    if (diffHours < 24) {
        return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    }

    const diffDays = Math.floor(diffHours / 24);
    if (diffDays < 7) {
        return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    }

    return format(date, 'd MMMM', { locale: ru });
}

function renderTemplate(template, data = {}) {
    if (!template) {
        return '';
    }
    return template.replace(/\{\{\s*([a-zA-Z0-9_]+)\s*\}\}/g, (_, key) => {
        const value = data[key];
        return value !== undefined && value !== null ? String(value) : '';
    });
}

async function pickTemplate(category, tags = []) {
    const candidates = Array.isArray(tags) && tags.length ? tags : [null];

    for (const tag of candidates) {
        const templates = await db.getAiTemplates(category, { tag, limit: 30 });
        if (templates.length > 0) {
            return randomChoice(templates);
        }
    }

    const templates = await db.getAiTemplates(category, { limit: 30 });
    return randomChoice(templates);
}

function buildUpcomingSession(plan, referenceDate = new Date()) {
    if (!plan || !Array.isArray(plan.sessions)) {
        return null;
    }
    const today = referenceDate instanceof Date ? referenceDate : new Date(referenceDate);
    const sessions = plan.sessions
        .map(session => {
            const date = session.date ? parseISO(session.date) : null;
            return { ...session, date };
        })
        .filter(session => session.date)
        .sort((a, b) => a.date - b.date);

    const upcoming = sessions.find(session => session.date >= new Date(today.toDateString()));
    return upcoming || sessions[0] || null;
}

async function loadContext(profile) {
    if (!profile?.id) {
        return {
            completion: null,
            latestSession: null,
            plan: buildDefaultWeekPlan({}),
            adherence: null,
        };
    }

    const [completion, latestSession, adherenceSummary, fallbackPlan, recentNotes] = await Promise.all([
        db.getRecentCompletionStats(profile.id, { days: 14 }).catch((error) => {
            console.error('Failed to load completion stats:', error);
            return null;
        }),
        db.getLatestSessionSummary(profile.id).catch((error) => {
            console.error('Failed to load latest session:', error);
            return null;
        }),
        db.getAdherenceSummary(profile.id).catch((error) => {
            console.error('Failed to load adherence summary:', error);
            return null;
        }),
        db.getOrCreateFallbackWeekPlan(profile, profile.id, new Date()).catch((error) => {
            console.error('Failed to load fallback plan:', error);
            return buildDefaultWeekPlan({});
        }),
        db.getRecentAssistantNotes(profile.id, { limit: 3 }).catch((error) => {
            console.warn('Failed to load assistant notes:', error?.message || error);
            return [];
        }),
    ]);

    return {
        completion,
        latestSession,
        adherence: adherenceSummary,
        plan: fallbackPlan,
        recentNotes: Array.isArray(recentNotes) ? recentNotes : [],
    };
}

function appendMetadata(template, renderedText) {
    if (!template?.metadata) {
        return renderedText;
    }

    const extra = [];
    if (template.metadata.cta) {
        extra.push(`‚û°Ô∏è ${template.metadata.cta}`);
    }
    if (template.metadata.reminder) {
        extra.push(template.metadata.reminder);
    }

    if (extra.length === 0) {
        return renderedText;
    }

    return `${renderedText}\n\n${extra.join('\n')}`;
}

async function buildGreeting({ profile, context }) {
    const tags = [];
    const stats = context.completion || {};
    const completionRate = stats.total ? Math.round((stats.completed / stats.total) * 100) : null;

    if (profile?.flags?.recovery_mode) {
        tags.push('recovery');
    } else if (stats.lastStatus === 'done' || stats.lastStatus === 'completed') {
        tags.push('celebration');
    } else if (stats.streak >= 4) {
        tags.push('celebration');
    } else if (stats.lastStatus === 'skipped' || stats.lastStatus === 'missed') {
        tags.push('motivation');
    } else if (completionRate !== null && completionRate < 50) {
        tags.push('motivation');
    } else {
        tags.push('motivation');
    }

    const template = await pickTemplate('greeting', tags);
    const base = template
        ? appendMetadata(
            template,
            renderTemplate(template.body, {
                current_streak: stats.streak || 0,
                completion_rate: completionRate ?? 0,
            })
        )
        : '–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?';

    const dynamicLines = [];
    if (stats.streak >= 3) {
        dynamicLines.push(`üî• –°–µ—Ä–∏—è –¥–µ—Ä–∂–∏—Ç—Å—è —É–∂–µ ${stats.streak} –¥–Ω–µ–π ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Ä–∏—Ç–º.`);
    }
    if (completionRate !== null) {
        if (completionRate >= 90) {
            dynamicLines.push('üëç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ—á—Ç–∏ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤.');
        } else if (completionRate < 50) {
            dynamicLines.push('ü§ù –î–∞–≤–∞–π –≤–µ—Ä–Ω—ë–º—Å—è –≤ —Ä–∏—Ç–º ‚Äî –Ω–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.');
        }
    }
    if (!dynamicLines.length && context.latestSession?.status === 'done') {
        dynamicLines.push('‚úÖ –í—á–µ—Ä–∞—à–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–º–µ—Ç–∏–ª, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.');
    }

    return dynamicLines.length
        ? `${base}\n\n${dynamicLines.join('\n')}`
        : base;
}

async function buildMotivation({ context }) {
    const stats = context.completion || {};
    const tags = [];

    if (stats.streak >= 3) {
        tags.push('streak');
    }
    if ((stats.total && stats.completed / stats.total < 0.4) || stats.skipped >= 2) {
        tags.push('adherence_low');
    }
    if (!tags.length) {
        tags.push('comeback');
    }

    const template = await pickTemplate('motivation', tags);
    if (!template) {
        return '–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–µ–º–ø–µ ‚Äî –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤—Ç—Ä–∞.';
    }

    const data = {
        current_streak: stats.streak || 0,
    };

    const rendered = renderTemplate(template.body, data);
    const note = Array.isArray(context.recentNotes) ? context.recentNotes[0] : null;

    if (note?.content) {
        const relative = formatRelativeTimeLabel(note.created_at);
        const preview = shortenText(note.content, 70);
        const noteLine = `üóíÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ—Ç–∫–∞${relative ? ` (${relative})` : ''}: ¬´${preview}¬ª.`;
        return appendMetadata(template, `${rendered}\n\n${noteLine}`);
    }

    return appendMetadata(template, rendered);
}

async function buildPlanToday({ profile, context }) {
    const plan = context.plan || buildDefaultWeekPlan({
        frequency: profile?.preferences?.training_frequency || 4,
    });
    const upcoming = buildUpcomingSession(plan);

    const tags = [];
    if (upcoming) {
        tags.push('upcoming_session');
    } else {
        tags.push('rest_day');
    }

    const template = await pickTemplate('plan_hint', tags);
    if (!template) {
        if (upcoming) {
            const focus = upcoming.focus || upcoming.session_type;
            const dateLabel = upcoming.date ? format(upcoming.date, 'd MMMM', { locale: ru }) : '—Å–∫–æ—Ä–æ';
            return `–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${dateLabel} ‚Äî ${focus} (–¥–µ—Ä–∂–∏–º RPE –æ–∫–æ–ª–æ ${upcoming.rpe || 7}).`;
        }
        return '–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –î–æ–±–∞–≤—å –ª—ë–≥–∫—É—é –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É.';
    }

    const data = {};
    if (upcoming) {
        data.weekday = upcoming.date
            ? format(upcoming.date, 'EEEE', { locale: ru })
            : '';
        data.date_label = upcoming.date
            ? format(upcoming.date, 'd MMMM', { locale: ru })
            : '';
        data.focus = upcoming.focus || upcoming.session_type || '–†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è';
        data.target_rpe = upcoming.rpe || 7;
    }

    const rendered = renderTemplate(template.body, data);
    const note = Array.isArray(context.recentNotes) ? context.recentNotes[0] : null;
    if (note?.content) {
        const relative = formatRelativeTimeLabel(note.created_at);
        const preview = shortenText(note.content, 70);
        const noteLine = `üóíÔ∏è –ü–æ–º–Ω—é –∑–∞–º–µ—Ç–∫—É${relative ? ` (${relative})` : ''}: ¬´${preview}¬ª. –ò—Å–ø–æ–ª—å–∑—É–π –µ—ë, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.`;
        return appendMetadata(template, `${rendered}\n\n${noteLine}`);
    }
    return appendMetadata(template, rendered);
}

async function buildWeekPlan({ context }) {
    const plan = context.plan || buildDefaultWeekPlan({});
    const sessions = plan.sessions || [];

    const summaryLines = sessions.slice(0, 5).map(session => {
        const date = session.date ? parseISO(session.date) : null;
        const label = date ? format(date, 'd MMM (EEEE)', { locale: ru }) : session.date;
        const focus = session.focus || session.session_type || '–†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è';
        return `‚Ä¢ ${label}: ${focus}`;
    });

    if (sessions.length > 5) {
        summaryLines.push(`‚Ä¶ –∏ –µ—â—ë ${sessions.length - 5} —Å–µ—Å—Å–∏–π`);
    }

    const adherence = context.adherence?.adherence_percent;
    const adherenceLine = typeof adherence === 'number'
        ? `–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –∑–∞ –º–µ—Å—è—Ü: ${Math.round(adherence)}%.`
        : null;

    return [
        'üìÜ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã:',
        '',
        ...summaryLines,
        '',
        adherenceLine,
        '–ü–µ—Ä–µ–π–¥–∏ –≤ WebApp, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.',
    ].filter(Boolean).join('\n');
}

async function buildNoteSaveReply({ profile, message, context, slots = {} }) {
    if (!profile?.id) {
        return '–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏, –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç –∏ WebApp.';
    }

    const parsed = slots?.note?.content ? slots.note : parseNoteCommand(message);

    if (!parsed?.content || !parsed.content.trim()) {
        return '–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–º–µ—Ç–∫—É –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–°–æ—Ö—Ä–∞–Ω–∏: —Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω–∞—è –Ω–µ–¥–µ–ª—è —Å 5 –ø–æ 11 –º–∞—è¬ª –∏–ª–∏ ¬´–ó–∞–º–µ—Ç–∫–∞: –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç—è–∂–∫—É –∫–æ–ª–µ–Ω–µ–π¬ª.';
    }

    let note = null;
    try {
        note = await db.saveAssistantNote(profile.id, {
            title: parsed.title,
            content: parsed.content,
            tags: parsed.tags || [],
            metadata: {
                source: 'chat',
                source_message: message,
                detected_tags: parsed.tags || [],
            },
        });
    } catch (error) {
        console.error('Failed to save assistant note:', error);
        return '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.';
    }

    try {
        await db.mergeDialogState(profile.id, CHAT_STATE_KEY, payload => ({
            ...payload,
            notes_saved: (payload?.notes_saved || 0) + 1,
            last_saved_note_id: note.id,
            last_saved_note_at: note.created_at,
            last_note_preview: parsed.preview,
            session_status: 'active',
        }));
    } catch (error) {
        console.error('Failed to update dialog state after note save:', error);
    }

    try {
        await db.logEvent(profile.id, 'assistant_note_saved', 'info', {
            note_id: note.id,
            tags: parsed.tags || [],
            preview: parsed.preview,
        });
    } catch (error) {
        console.error('Failed to log note save event:', error);
    }

    const acknowledgementOptions = [
        `üóíÔ∏è –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª: ¬´${parsed.preview}¬ª.`,
        `üìå –ó–∞–ø–∏—Å–∞–ª –≤ –∂—É—Ä–Ω–∞–ª: ¬´${parsed.preview}¬ª.`,
        `‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ¬´${parsed.preview}¬ª.`,
    ];

    const tagsLine = parsed.tags?.length
        ? `–¢–µ–≥–∏: ${parsed.tags.map(tag => `#${tag}`).join(' ')}`
        : null;

    const totalNotes = Array.isArray(context?.recentNotes)
        ? context.recentNotes.length + 1
        : null;

    const progressLine = totalNotes
        ? `–¢–µ–ø–µ—Ä—å –≤ –∂—É—Ä–Ω–∞–ª–µ ${totalNotes} –∑–∞–º–µ—Ç${totalNotes === 1 ? '–∫–∞' : totalNotes < 5 ? '–∫–∏' : '–æ–∫'} ‚Äî –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∏–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.`
        : null;

    const followUps = [
        '–ß—Ç–æ–±—ã –ø–æ–∑–∂–µ –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏, –∑–∞–≥–ª—è–Ω–∏ –≤ WebApp –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å.',
        '–ú–æ–∂–µ—à—å –ø–æ–º–µ—á–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏ (#–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, #–∏–¥–µ—è) ‚Äî —Ç–∞–∫ –ª–µ–≥—á–µ –∏—Ö –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å.',
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –∑–∞–¥–∞—á—É ‚Äî –¥–æ–±–∞–≤—å ¬´–Ω–∞–ø–æ–º–Ω–∏¬ª —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.',
    ];

    return [
        randomChoice(acknowledgementOptions) || 'üóíÔ∏è –ó–∞–º–µ—Ç–∫—É —Å–æ—Ö—Ä–∞–Ω–∏–ª.',
        tagsLine,
        progressLine,
        randomChoice(followUps),
    ].filter(Boolean).join('\n\n');
}

function buildTriggersHelpReply() {
    const introVariants = [
        '–í–æ—Ç –∫–æ—Ä–æ—Ç–∫–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º:',
        '–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∏ –∫–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å:',
        '–î–µ—Ä–∂–∏ –ø–æ–¥–±–æ—Ä–∫—É –∫–æ–º–∞–Ω–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è —Ä–µ–∞–≥–∏—Ä—É—é –º–≥–Ω–æ–≤–µ–Ω–Ω–æ:',
    ];

    const triggerCatalog = [
        { label: '–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å', description: '—É–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', example: '–ß—Ç–æ –ø–æ –ø–ª–∞–Ω—É —Å–µ–≥–æ–¥–Ω—è?' },
        { label: '–ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é', description: '–ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', example: '–°–æ–±–µ—Ä–∏ –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∫–æ—Ä.' },
        { label: '–û—Ç—á—ë—Ç', description: '–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', example: '–ì–æ—Ç–æ–≤ –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –∑–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.' },
        { label: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è', description: '–ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', example: '–ù—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Å–æ—Ä–≤–∞–ª—Å—è —Å –≥—Ä–∞—Ñ–∏–∫–∞.' },
        { label: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', description: '–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª', example: '–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Ç—è–Ω—É—Ç—å—Å—è.' },
        { label: '–°–æ—Ö—Ä–∞–Ω–∏', description: '—Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –∂—É—Ä–Ω–∞–ª–µ', example: '–°–æ—Ö—Ä–∞–Ω–∏: —Ä–∞—Å—Ç—è–∂–∫–∞ –±–µ–¥—Ä–∞ –≤–µ—á–µ—Ä–æ–º –∏ –ª—ë–¥ –Ω–∞ –∫–æ–ª–µ–Ω–æ.' },
    ];

    const lines = triggerCatalog.map(item => `‚Ä¢ ${item.label} ‚Äî ${item.description}. –ü—Ä–∏–º–µ—Ä: ¬´${item.example}¬ª.`);

    const outroVariants = [
        '–ú–æ–∂–µ—à—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–°–æ—Ö—Ä–∞–Ω–∏ –∑–∞–º–µ—Ç–∫—É –∏ –Ω–∞–ø–æ–º–Ω–∏ –≤–µ—á–µ—Ä–æ–º¬ª.',
        '–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ –∑–∞–¥–∞—á—É, —è —É—Ç–æ—á–Ω—é –¥–µ—Ç–∞–ª–∏.',
    ];

    return [
        randomChoice(introVariants) || '–í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º:',
        '',
        ...lines,
        '',
        randomChoice(outroVariants) || '–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–¥–µ–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —Ä–∞–∑–±–µ—Ä—ë–º—Å—è.',
    ].join('\n');
}

async function buildFallback({ message }) {
    const clean = message ? shortenText(message, 140) : null;
    const variants = [
        (text) => text
            ? `–ü–æ–Ω—è–ª, –æ —á—ë–º —Ä–µ—á—å: ¬´${text}¬ª. –°–∫–∞–∂–∏, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–º–æ—â—å —Å –ø–ª–∞–Ω–æ–º, –æ—Ç—á—ë—Ç–æ–º, –∑–∞–º–µ—Ç–∫–æ–π –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º ‚Äî —Ç–∞–∫ —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ—á–Ω–µ–µ.`
            : '–ì–æ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: –ø–æ–¥—Å–∫–∞–∂–∏, –Ω—É–∂–µ–Ω –ø–ª–∞–Ω, –æ—Ç—á—ë—Ç, –∑–∞–º–µ—Ç–∫–∞ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ?'
        ,
        (text) => {
            const intro = text ? `–í–æ–ø—Ä–æ—Å ¬´${text}¬ª —à–∏—Ä–æ–∫–∏–π.` : '–•–æ—á—É —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–Ω—è–ª –∑–∞–¥–∞—á—É.';
            return `${intro} –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏.`;
        },
        (text) => {
            const intro = text ? `–î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –∑–∞–ø—Ä–æ—Å ¬´${text}¬ª.` : '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –º–Ω–µ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞.';
            return `${intro} –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª, ¬´–°–æ—Ö—Ä–∞–Ω–∏: —Ü–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª, ¬´–ù–∞–ø–æ–º–Ω–∏ –≤ 19:00 —Ä–∞—Å—Ç—è–∂–∫—É¬ª.`;
        },
    ];

    const hint = '–ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è, –Ω–∞–ø–∏—à–∏ ¬´—Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º¬ª ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –≤—Å–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã.';

    return [
        randomChoice(variants)?.(clean) || '–ü–æ–¥—Å–∫–∞–∂–∏, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–º–æ—â—å —Å –ø–ª–∞–Ω–æ–º, –æ—Ç—á—ë—Ç–æ–º, –∑–∞–º–µ—Ç–∫–æ–π –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º ‚Äî –∏ —è —Ä–∞–∑–ª–æ–∂—É –ø–æ —à–∞–≥–∞–º.',
        hint,
    ].filter(Boolean).join('\n\n');
}

function composeTrainerMessage({ intro, goal, warmup, main, cooldown, nextStep, extra }) {
    const lines = [];
    if (intro) {
        lines.push(intro);
    }
    if (goal) {
        lines.push(`**–¶–µ–ª—å:** ${goal}`);
    }
    if (warmup) {
        lines.push(`**–†–∞–∑–º–∏–Ω–∫–∞:** ${warmup}`);
    }
    if (main) {
        lines.push(`**–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:** ${main}`);
    }
    if (cooldown) {
        lines.push(`**–ó–∞–º–∏–Ω–∫–∞:** ${cooldown}`);
    }
    if (nextStep) {
        lines.push(`**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** ${nextStep}`);
    }
    if (extra) {
        lines.push(extra);
    }
    return lines.join('\n');
}

function formatExerciseLine(exercise) {
    if (!exercise) {
        return null;
    }
    const name = exercise.name || exercise.exercise_key || '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ';
    const sets = exercise.sets ?? exercise.target?.sets;
    const reps = exercise.reps ?? exercise.target?.reps;
    const volume = sets && reps ? `${sets}√ó${reps}` : null;
    const cue = exercise.notes || exercise.cue || null;
    return [name, volume, cue].filter(Boolean).join(' ‚Äî ');
}

function formatWarmup(session) {
    if (Array.isArray(session?.warmup) && session.warmup.length) {
        return session.warmup.join('; ');
    }
    return '5 –º–∏–Ω—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏: –ø–ª–µ—á–∏, —Ç–∞–∑, –ª—ë–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ.';
}

function formatCooldown(session) {
    if (Array.isArray(session?.cooldown) && session.cooldown.length) {
        return session.cooldown.join('; ');
    }
    return '–î—ã—Ö–∞–Ω–∏–µ 4-6-4 –∏ —Ä–∞—Å—Ç—è–∂–∫–∞ –≥—Ä—É–¥–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞, 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ.';
}

async function buildTrainerPlanToday({ profile, context }) {
    const plan = context.plan || buildDefaultWeekPlan({
        frequency: profile?.preferences?.training_frequency || 4,
    });
    const upcoming = buildUpcomingSession(plan);
    const stats = context.completion || {};

    if (!upcoming) {
        return composeTrainerMessage({
            intro: '–°–µ–≥–æ–¥–Ω—è –≤ —Ü–∏–∫–ª–µ –¥–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.',
            goal: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏.',
            warmup: '10 –º–∏–Ω—É—Ç –ª—ë–≥–∫–æ–π –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ –∫–∞—Ä–¥–∏–æ –¥–æ–º–∞.',
            main: '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, –º—è–≥–∫–æ–µ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –Ω–æ–≥ –∏ –ø–ª–µ—á.',
            cooldown: '–ö–æ–Ω—Ç—Ä–æ–ª—å –¥—ã—Ö–∞–Ω–∏—è –∏ –∑–∞–ø–∏—Å—å –æ—â—É—â–µ–Ω–∏–π –≤ –∑–∞–º–µ—Ç–∫–∏.',
            nextStep: '–û—Ç–º–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å –≤ WebApp, —á—Ç–æ–±—ã –ø–ª–∞–Ω —É—á—ë–ª –ø–∞—É–∑—É.',
        });
    }

    const dateLabel = upcoming.date
        ? format(upcoming.date, 'd MMMM (EEEE)', { locale: ru })
        : '—Å–µ–≥–æ–¥–Ω—è';
    const focus = upcoming.focus || upcoming.session_type || '–†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è';
    const goalLine = stats.streak >= 3
        ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–∏—é –∏ —É–¥–µ—Ä–∂–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ.'
        : stats.lastStatus === 'skipped'
            ? '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∏—Ç–º —á–µ—Ä–µ–∑ —É–ø—Ä–∞–≤–ª—è–µ–º—É—é –Ω–∞–≥—Ä—É–∑–∫—É.'
            : '–û—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—â—É—â–µ–Ω–∏—è.';

    const mainBlock = (upcoming.exercises || [])
        .slice(0, 3)
        .map(formatExerciseLine)
        .filter(Boolean)
        .join('; ')
        || '3 –∫—Ä—É–≥–∞: –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è, –æ—Ç–∂–∏–º–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞ ‚Äî –¥–µ—Ä–∂–∏–º —Ç–µ—Ö–Ω–∏–∫—É –∏ –¥—ã—Ö–∞–Ω–∏–µ.';

    return composeTrainerMessage({
        intro: `üìã –ü–ª–∞–Ω –Ω–∞ ${dateLabel}: —Ñ–æ–∫—É—Å ‚Äî ${focus}, –¥–µ—Ä–∂–∏–º RPE –æ–∫–æ–ª–æ ${upcoming.rpe || 7}.`,
        goal: goalLine,
        warmup: formatWarmup(upcoming),
        main: mainBlock,
        cooldown: formatCooldown(upcoming),
        nextStep: '–ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ RPE, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é.',
        extra: upcoming.notes || null,
    });
}

async function buildTrainerPlanWeek({ profile, context }) {
    const plan = context.plan || buildDefaultWeekPlan({
        frequency: profile?.preferences?.training_frequency || 4,
    });
    const sessions = plan.sessions || [];

    if (!sessions.length) {
        return '–ù–µ –Ω–∞—à—ë–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π. –°–∫–∞–∂–∏ ¬´–°–æ–±–µ—Ä–∏ –ø–ª–∞–Ω¬ª, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –±–∞–∑–æ–≤—ã–π –º–∏–∫—Ä–æ—Ü–∏–∫–ª.';
    }

    const lines = sessions.map(session => {
        const date = session.date ? parseISO(session.date) : null;
        const label = date ? format(date, 'd MMMM (EEEE)', { locale: ru }) : session.date;
        const focus = session.focus || session.session_type || '–†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è';
        return `‚Ä¢ ${label}: ${focus}, RPE ‚âà ${session.rpe || 7}`;
    });

    return [
        'üìÜ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤. –†–∞—Å–∫–ª–∞–¥—ã–≤–∞—é –ø–æ –¥–Ω—è–º:',
        ...lines,
        '',
        '–°–ª–µ–¥–∏ –∑–∞ –æ—â—É—â–µ–Ω–∏—è–º–∏: –ø—Ä–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Å–¥–≤–∏–Ω—É—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –æ–±–ª–µ–≥—á—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.',
        '–û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ WebApp ‚Äî –ø–æ –¥–∞–Ω–Ω—ã–º –æ–±–Ω–æ–≤–ª—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.',
    ].join('\n');
}

function buildReportKickoffReply() {
    return [
        'üìù –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –æ—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.',
        '**–¶–µ–ª—å:** –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—ë–º, RPE –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω.',
        '**–†–∞–∑–º–∏–Ω–∫–∞:** –†–∞—Å—Å–∫–∞–∂–∏, –Ω—É–∂–Ω–∞ –ª–∏ –±—ã–ª–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –±–ª–æ–∫–æ–º.',
        '**–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:** –ü–µ—Ä–µ—á–∏—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø–æ–¥—Ö–æ–¥–∞–º–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏, –¥–æ–±–∞–≤—å –æ—â—É—â–µ–Ω–∏—è.',
        '**–ó–∞–º–∏–Ω–∫–∞:** –°–æ–æ–±—â–∏ –ø—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ä–∞—Å—Ç—è–∂–∫–∞, —Å–æ–Ω, –ø–∏—Ç–∞–Ω–∏–µ.',
        '**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ü–æ—Å–ª–µ –æ—Ç—á—ë—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—é –ø–ª–∞–Ω –≤ WebApp.',
    ].join('\n');
}

function buildRescheduleReply({ slots }) {
    const shift = slots?.preferredShiftDays;
    const preferredDay = slots?.preferredDay;
    const lines = ['üîÑ –ü–µ—Ä–µ–Ω–µ—Å—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.'];

    if (shift) {
        lines.push(`–°–º–µ—â–∞–µ–º –Ω–∞ ${shift === 1 ? '–∑–∞–≤—Ç—Ä–∞' : `+${shift} –¥–Ω–µ–π`}.`);
    }
    if (preferredDay) {
        lines.push(`–£—á—Ç—É –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –¥–µ–Ω—å: ${preferredDay}.`);
    }

    lines.push('–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω ‚Äî –Ω–∞–ø–∏—à–∏, —É—Ç–æ—á–Ω—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º.');
    return lines.join(' ');
}

function buildReminderReply({ slots, needsClarification }) {
    if (needsClarification || !slots?.reminder) {
        return '–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–∑–æ–≤–∏ –≤—Ä–µ–º—è: ¬´—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç¬ª –∏–ª–∏ ¬´–≤ 19:30¬ª.';
    }

    const { unit, value, hours, minutes } = slots.reminder;
    let when = null;
    if (unit === 'hours' || unit === 'minutes') {
        const suffix = unit === 'hours' ? '—á–∞—Å' : '–º–∏–Ω—É—Ç';
        when = `—á–µ—Ä–µ–∑ ${value} ${suffix}`;
    } else if (unit === 'clock') {
        const hh = String(hours).padStart(2, '0');
        const mm = String(minutes).padStart(2, '0');
        when = `–≤ ${hh}:${mm}`;
    }
    return when
        ? `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${when}. –°–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤—Ä–µ–º—è.`
        : '–ì–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî —É—Ç–æ—á–Ω–∏ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è.';
}

function buildSettingsReply() {
    return [
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ WebApp.',
        '–ú–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤–∫–ª—é—á–∏—Ç—å –ø–∞—É–∑—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.',
        '–ö–æ–º–∞–Ω–¥–æ–π ¬´–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª –ø—Ä–∏—à–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.',
    ].join('\n');
}

async function buildStatsReply({ profile, context }) {
    const stats = context.completion || {};
    const adherence = context.adherence;
    const latest = context.latestSession;

    const lines = ['üìä –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É:'];

    if (typeof adherence?.adherence_percent === 'number') {
        lines.push(`‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –∑–∞ 4 –Ω–µ–¥–µ–ª–∏: ${Math.round(adherence.adherence_percent)}%.`);
    }
    if (typeof stats.streak === 'number' && stats.streak > 0) {
        lines.push(`‚Ä¢ –°–µ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${stats.streak}.`);
    }
    if (latest?.date) {
        const dateLabel = format(new Date(latest.date), 'd MMMM', { locale: ru });
        const statusMap = {
            done: '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
            completed: '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
            skipped: '–ø—Ä–æ–ø—É—â–µ–Ω–∞',
            missed: '–ø—Ä–æ–ø—É—â–µ–Ω–∞',
        };
        const status = statusMap[latest.status] || latest.status || '–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞';
        lines.push(`‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${dateLabel}: ${status}, RPE ${latest.rpe ?? '‚Äî'}.`);
    }
    if (profile?.goals?.description) {
        lines.push(`‚Ä¢ –¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å: ${profile.goals.description}.`);
    }

    lines.push('–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è–º ‚Äî —Å–∫–∞–∂–∏, –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ—Ç—á—ë—Ç.');
    return lines.join('\n');
}

function buildRecoveryReply({ notesFlag }) {
    const lines = [
        'ü©∫ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.',
        '**–¶–µ–ª—å:** –°–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–º–æ—á—å —Ç–µ–ª—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.',
        '**–†–∞–∑–º–∏–Ω–∫–∞:** –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ª—ë–≥–∫–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è —Å—É—Å—Ç–∞–≤–æ–≤.',
        '**–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:** –ü—Ä–æ–≥—É–ª–∫–∞ 20 –º–∏–Ω—É—Ç –∏–ª–∏ –º—è–≥–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å —Å —Ä–∞—Å—Ç—è–∂–∫–æ–π.',
        '**–ó–∞–º–∏–Ω–∫–∞:** –°–æ–Ω + –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.',
        '**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –°–æ–æ–±—â–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—á–µ–º—É —Ü–∏–∫–ª—É.',
    ];
    if (notesFlag === 'injury') {
        lines.push('‚ö†Ô∏è –ï—Å–ª–∏ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, —Å—Ç–æ–∏—Ç –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω.');
    }
    return lines.join('\n');
}

function buildHelpReply() {
    return [
        'ü§ù –í–æ—Ç —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ:',
        '‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–¥ —Ü–µ–ª–∏.',
        '‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å –æ—Ç—á—ë—Ç, –æ—Ü–µ–Ω–∏—Ç—å RPE –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.',
        '‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.',
        '‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.',
        '‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å WebApp, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
        '–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?',
    ].join('\n');
}

function buildPlanSetupReply() {
    return [
        'üîß –û–±–Ω–æ–≤–∏–º –ø–ª–∞–Ω –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏.',
        '–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ü–µ–ª–µ–≤–æ–π –∞–∫—Ü–µ–Ω—Ç.',
        '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–±–µ—Ä—É –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø–ª–∞–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –µ—ë –≤ WebApp.',
    ].join('\n');
}

function buildGenericTrainerFallback(profile) {
    const frequency = profile?.preferences?.training_frequency
        || profile?.training_frequency
        || profile?.profile?.preferences?.training_frequency
        || 4;
    const goal = profile?.goals?.description
        || profile?.preferences?.training_goal
        || profile?.profile?.goals?.description
        || '—É–∫—Ä–µ–ø–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è';

    return composeTrainerMessage({
        intro: '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å –∫—É—Ä—Å –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å.',
        goal: `–†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ü–µ–ª—å—é: ${goal}.`,
        warmup: '5 –º–∏–Ω—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–∏–Ω–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–ª–æ.',
        main: `–§–æ–∫—É—Å –Ω–∞ ${frequency} —Å–µ—Å—Å–∏–π –≤ –Ω–µ–¥–µ–ª—é ‚Äî –≥–æ—Ç–æ–≤ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.`,
        cooldown: '–û—Ç–º–µ—á–∞–π –æ—â—É—â–µ–Ω–∏—è –∏ RPE, —á—Ç–æ–±—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.',
        nextStep: '–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞—á—É: –ø–ª–∞–Ω, –æ—Ç—á—ë—Ç, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è.',
    });
}

async function generateConversationReply({ profile, message, intent, history: _history }) {
    const context = await loadContext(profile);
    const detectedIntent = intent || toInternalIntent(detectIntent(message).intent);

    switch (detectedIntent) {
    case 'greeting':
        return buildGreeting({ profile, context });
    case 'motivation':
        return buildMotivation({ context });
    case 'plan_today':
        return buildPlanToday({ profile, context });
    case 'plan_week':
        return buildWeekPlan({ context });
    case 'plan_customize':
        return '–ß—Ç–æ–±—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω, –Ω–∞–ø–∏—à–∏ —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –µ—ë –≤ WebApp.';
    case 'recovery_mode':
        return buildRecoveryReply({});
    case 'help':
        return buildHelpReply();
    case 'note_save':
        return buildNoteSaveReply({ profile, message, context });
    case 'triggers_help':
        return buildTriggersHelpReply();
    default:
        return buildFallback({ message });
    }
}

function normalizeHistory(history) {
    if (!Array.isArray(history)) {
        return [];
    }
    return history.slice(-10).map(item => (typeof item === 'string' ? item : JSON.stringify(item)));
}

export function interpretCommand({ profile, message, history = [] } = {}) {
    const text = (message || '').trim();
    const normalHistory = normalizeHistory(history);

    if (!text) {
        return {
            intent: 'unknown',
            rawIntent: null,
            confidence: 0,
            candidateIntents: [],
            entities: {},
            slots: {},
            needsClarification: true,
            followUp: '–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å, –æ—Ç—á—ë—Ç –∏–ª–∏ –ø–æ–º–æ—â—å —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.',
            history: normalHistory,
        };
    }

    const detection = detectIntent(text.toLowerCase());
    let intent = toInternalIntent(detection.intent);

    if (intent === 'unknown' && GREETING_REGEX.test(text)) {
        intent = 'greeting';
    } else if (intent === 'unknown' && GRATITUDE_REGEX.test(text)) {
        intent = 'gratitude';
    }

    const slots = {};
    if (detection.entities?.reminder) {
        slots.reminder = detection.entities.reminder;
    }
    if (detection.entities?.preferredShiftDays) {
        slots.preferredShiftDays = detection.entities.preferredShiftDays;
    }
    if (detection.entities?.preferredDay) {
        slots.preferredDay = detection.entities.preferredDay;
    }

    const noteCandidate = parseNoteCommand(text);
    if (noteCandidate) {
        slots.note = noteCandidate;
        if (intent === 'unknown') {
            intent = 'note_save';
        }
    }

    let needsClarification = false;
    let followUp = null;

    if (intent === 'remind_later' && !slots.reminder) {
        needsClarification = true;
        followUp = '–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç¬ª –∏–ª–∏ ¬´–≤ 20:00¬ª.';
    }

    if (intent === 'note_save' && (!slots.note || !slots.note.content || !slots.note.content.trim())) {
        needsClarification = true;
        followUp = '–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã ¬´—Å–æ—Ö—Ä–∞–Ω–∏¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–°–æ—Ö—Ä–∞–Ω–∏: –∏–¥–µ–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–¥–µ–ª–∏¬ª.';
    }

    if (intent === 'report_start' && normalHistory.slice(-1)[0]?.includes('report_')) {
        needsClarification = false;
    }

    return {
        intent,
        rawIntent: detection.intent,
        confidence: detection.confidence,
        candidateIntents: (detection.candidates || []).map(candidate => ({
            intent: toInternalIntent(candidate.intent),
            confidence: candidate.confidence,
        })),
        entities: detection.entities || {},
        slots,
        needsClarification,
        followUp,
        history: normalHistory,
        profileId: profile?.id || null,
    };
}

export async function generateTrainerReply({ profile, message, history = [] } = {}) {
    const interpretation = interpretCommand({ profile, message, history });
    const context = await loadContext(profile);

    switch (interpretation.intent) {
    case 'plan_today':
        return buildTrainerPlanToday({ profile, context });
    case 'plan_week':
        return buildTrainerPlanWeek({ profile, context });
    case 'report_start':
        return buildReportKickoffReply();
    case 'motivation':
        return buildMotivation({ context });
    case 'schedule_reschedule':
        return buildRescheduleReply({ slots: interpretation.slots });
    case 'remind_later':
        return buildReminderReply({ slots: interpretation.slots, needsClarification: interpretation.needsClarification });
    case 'settings_open':
        return buildSettingsReply();
    case 'stats_show':
        return buildStatsReply({ profile, context });
    case 'recovery_mode':
        return buildRecoveryReply({});
    case 'plan_setup':
        return buildPlanSetupReply();
    case 'help':
        return buildHelpReply();
    case 'note_save':
        return buildNoteSaveReply({ profile, message, context, slots: interpretation.slots });
    case 'triggers_help':
        return buildTriggersHelpReply();
    case 'gratitude':
        return '–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å —Å –ø–ª–∞–Ω–æ–º –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π ‚Äî —Å–∫–∞–∂–∏.';
    default:
        if (TRAINER_INTENTS.has(interpretation.intent)) {
            return buildGenericTrainerFallback(profile);
        }
        return null;
    }
}

export async function generateGeneralReply({ profile, message, history = [] } = {}) {
    const interpretation = interpretCommand({ profile, message, history });

    if (TRAINER_INTENTS.has(interpretation.intent) && interpretation.intent !== 'motivation') {
        return null;
    }

    return generateConversationReply({
        profile,
        message,
        intent: interpretation.intent,
        history,
    });
}

function computePlanSummary(plan) {
    const sessions = plan.sessions || [];
    return sessions.map(session => {
        const date = session.date ? parseISO(session.date) : null;
        const label = date ? format(date, 'd MMM (EEE)', { locale: ru }) : session.date;
        const focus = session.focus || session.session_type || '–†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è';
        return `‚Ä¢ ${label}: ${focus} (RPE ‚âà ${session.rpe || 7})`;
    }).join('\n');
}

export async function generateTrainingPlan({
    profile = {},
    referenceDate = new Date(),
    history = [],
    reason = 'manual',
} = {}) {
    const frequency = profile?.preferences?.training_frequency
        || profile?.training_frequency
        || 4;

    const plan = buildDefaultWeekPlan({
        startDate: referenceDate,
        frequency,
    });

    const summaryText = computePlanSummary(plan);
    const historySnippet = Array.isArray(history) && history.length
        ? history.slice(-3).map(session => {
            const date = session.date ? format(new Date(session.date), 'd MMM', { locale: ru }) : '‚Äî';
            const status = session.status || 'unknown';
            return `‚Ä¢ ${date}: ${status}`;
        }).join('\n')
        : null;

    const goal = profile?.goals?.description || '—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π';

    const rawText = [
        `üìÜ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é (—á–∞—Å—Ç–æ—Ç–∞ ${frequency}):`,
        summaryText,
        '',
        historySnippet ? `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n${historySnippet}` : null,
        `–§–æ–∫—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${goal}.`,
        '–û—Ç–º–µ—á–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ RPE ‚Äî –±—É–¥—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.',
    ].filter(Boolean).join('\n');

    return {
        rawText,
        structured: {
            plan,
            summary: {
                frequency,
                goal,
                reason,
                generated_at: new Date().toISOString(),
            },
        },
    };
}

function tallyExercises(exercises) {
    if (!Array.isArray(exercises) || !exercises.length) {
        return {
            completed: 0,
            partial: 0,
            skipped: 0,
            total: 0,
            completionRate: 0,
            overperformed: 0,
        };
    }

    let completed = 0;
    let partial = 0;
    let skipped = 0;
    let overperformed = 0;

    for (const exercise of exercises) {
        const state = exercise.state || (exercise.actual ? 'done' : null);
        switch (state) {
        case 'done':
            completed += 1;
            if (exercise.actual && exercise.sets && exercise.reps) {
                const targetSets = exercise.sets ?? exercise.target?.sets ?? 0;
                const targetReps = exercise.reps ?? exercise.target?.reps ?? 0;
                const actualSets = exercise.actual?.sets ?? 0;
                const actualReps = exercise.actual?.reps ?? 0;
                if (targetSets && targetReps && actualSets * actualReps > targetSets * targetReps) {
                    overperformed += 1;
                }
            }
            break;
        case 'in_progress':
            partial += 1;
            break;
        case 'skipped':
        default:
            skipped += 1;
            break;
        }
    }

    const total = exercises.length;
    const completionRate = total
        ? Math.round(((completed + partial * 0.6) / total) * 100)
        : 0;

    return {
        completed,
        partial,
        skipped,
        total,
        completionRate,
        overperformed,
    };
}

function classifyNotes(notes) {
    if (!notes) {
        return null;
    }
    if (FATIGUE_REGEX.test(notes)) {
        return 'fatigue';
    }
    if (EASY_REGEX.test(notes)) {
        return 'easy';
    }
    return null;
}

export async function analyzeTrainingReport({
    session = {},
    exercises = [],
    rpe,
    notes,
    history = [],
} = {}) {
    const stats = tallyExercises(exercises.length ? exercises : session.exercises);
    const rpeValue = Number.isFinite(rpe) ? rpe : session.rpe ?? null;
    const noteFlag = classifyNotes(notes);

    const lines = [];
    const suggestions = [];

    if (stats.total) {
        lines.push(`‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${stats.completed} –∏–∑ ${stats.total} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–µ—â—ë ${stats.partial} —á–∞—Å—Ç–∏—á–Ω–æ).`);
    }
    if (typeof stats.completionRate === 'number') {
        lines.push(`‚Ä¢ –ò—Ç–æ–≥ –ø–æ –æ–±—ä—ë–º—É: ${stats.completionRate}%.`);
    }
    if (typeof rpeValue === 'number') {
        lines.push(`‚Ä¢ –°—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: RPE ${rpeValue}/10.`);
        if (rpeValue >= 9) {
            suggestions.push('recovery');
            lines.push('‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π RPE ‚Äî –¥–æ–±–∞–≤—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–ª–µ–¥–∏ –∑–∞ —Å–Ω–æ–º.');
        } else if (rpeValue <= 5) {
            suggestions.push('advance');
            lines.push('–ú–æ–∂–Ω–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Å–ª–æ–∂–Ω—è—Ç—å: –Ω–∞–≥—Ä—É–∑–∫–∞ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ª–µ–≥–∫–æ.');
        }
    }

    if (stats.overperformed > 0) {
        suggestions.push('advance');
        lines.push(`‚Ä¢ ${stats.overperformed} —É–ø—Ä–∞–∂–Ω. –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å –∑–∞–ø–∞—Å–æ–º ‚Äî –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è.`);
    } else if (stats.completionRate < 60) {
        suggestions.push('regress');
        lines.push('‚Ä¢ –û–±—ä—ë–º –ø—Ä–æ—Å–µ–ª. –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±–ª–µ–≥—á—ë–Ω–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤.');
    } else if (!suggestions.includes('advance') && !suggestions.includes('regress')) {
        suggestions.push('maintain');
    }

    if (noteFlag === 'fatigue') {
        suggestions.push('recovery');
        lines.push('‚Ä¢ –û—Ç–º–µ—á–µ–Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏.');
    } else if (noteFlag === 'easy' && !suggestions.includes('advance')) {
        suggestions.push('advance');
        lines.push('‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—à–ª–∞ –ª–µ–≥–∫–æ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.');
    }

    const recentMisses = history
        .filter(item => ['skipped', 'missed'].includes(item.status))
        .slice(0, 3);
    if (recentMisses.length >= 2) {
        suggestions.push('recovery');
        lines.push('‚Ä¢ –í –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ ‚Äî –¥–µ—Ä–∂–∏–º —Ñ–æ–∫—É—Å –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞.');
    }

    const header = stats.completionRate >= 90
        ? '‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'
        : stats.completionRate >= 60
            ? 'üëç –ü—Ä–æ–≥—Ä–µ—Å—Å —Ñ–∏–∫—Å–∏—Ä—É–µ–º, –µ—Å—Ç—å –∫—É–¥–∞ —É—Å–∏–ª–∏—Ç—å—Å—è.'
            : 'üîÅ –†–∞–∑–±–µ—Ä—ë–º, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ.';

    const feedback = [
        header,
        ...lines,
        '',
        '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ–±–Ω–æ–≤–ª—é –ø–ª–∞–Ω –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ WebApp, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –æ—Ç—á—ë—Ç.',
    ].join('\n');

    return {
        feedback,
        completionRate: stats.completionRate,
        suggestions: Array.from(new Set(suggestions)),
    };
}

export async function buildMotivationMessage(profileInput) {
    const profile = profileInput?.profile || profileInput;
    const context = await loadContext(profile);
    return buildMotivation({ context });
}

export async function buildPlanHint(profile, { scope = 'day' } = {}) {
    const context = await loadContext(profile);
    if (scope === 'week') {
        return buildWeekPlan({ context });
    }
    return buildPlanToday({ profile, context });
}

export async function buildFeedbackMessage({ completionRate, rpe }) {
    const tags = [];

    const rate = Number.isFinite(completionRate) ? completionRate : null;
    if (rate !== null) {
        if (rate >= 95) {
            tags.push('completed_high');
        } else if (rate >= 60) {
            tags.push('completed_medium');
        } else {
            tags.push('missed');
        }
    }

    const template = await pickTemplate('feedback', tags);
    if (!template) {
        return '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –°–¥–µ–ª–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º.';
    }

    const data = {
        completion_rate: rate !== null ? Math.round(rate) : '‚Äî',
        rpe: rpe !== undefined && rpe !== null ? rpe : '‚Äî',
    };

    const rendered = renderTemplate(template.body, data);
    return appendMetadata(template, rendered);
}

export function getEngineCatalog({ successThreshold, slumpThreshold } = {}) {
    return [
        {
            id: 'internal',
            title: '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
            description: '–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã, –ø–ª–∞–Ω—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö AI-—Å–µ—Ä–≤–∏—Å–æ–≤.',
            capabilities: [
                '–¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ —Ç—Ä–µ–Ω–µ—Ä–∞',
                '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é',
                '–∞–Ω–∞–ª–∏–∑ –æ—Ç—á—ë—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                '–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏',
            ],
            thresholds: {
                success: successThreshold ?? 75,
                slump: slumpThreshold ?? 45,
            },
        },
    ];
}

export function resolveEngine({ profile } = {}) {
    if (!profile) {
        return 'internal';
    }
    const preferred = profile.preferences?.ai_provider;
    if (!preferred || preferred === 'internal') {
        return 'internal';
    }
    return 'internal';
}

export default {
    interpretCommand,
    generateTrainerReply,
    generateGeneralReply,
    generateTrainingPlan,
    analyzeTrainingReport,
    buildMotivationMessage,
    buildPlanHint,
    buildFeedbackMessage,
    getEngineCatalog,
    resolveEngine,
};
