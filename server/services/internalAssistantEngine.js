import { format } from 'date-fns';
import ru from 'date-fns/locale/ru/index.js';
import { detectIntent } from './nlu.js';
import { buildDefaultWeekPlan } from './staticPlan.js';
import localResponder from './localResponder.js';

const ENGINE_ID = 'internal';
const DEFAULT_SUCCESS_THRESHOLD = 75;
const DEFAULT_RESET_THRESHOLD = 45;

const SUCCESS_KEYWORDS = /(–≤—ã–ø–æ–ª–Ω|—Å–¥–µ–ª–∞–ª|–∑–∞–∫—Ä—ã–ª|–≥–æ—Ç–æ–≤–æ|—Å–ø—Ä–∞–≤–∏–ª|—É—Å–ø–µ–ª|finish|done)/i;
const MISS_KEYWORDS = /(–Ω–µ —Å–¥–µ–ª–∞–ª|–Ω–µ —É—Å–ø–µ–ª|–ø—Ä–æ–ø—É—Å—Ç–∏–ª|—Å–æ—Ä–≤–∞–ª|–ø—Ä–æ–≤–∞–ª|fail|–Ω–µ –ø–æ—à–ª–æ)/i;
const FATIGUE_KEYWORDS = /(—É—Å—Ç–∞–ª|—Ä–∞–∑–±–∏—Ç|—Ç—è–∂–µ–ª|—Ç—è–∂—ë–ª|–Ω–µ –≤—ã–≤–µ–∑|–Ω–µ—Ç —Å–∏–ª|–ø–µ—Ä–µ–≥–æ—Ä–µ–ª)/i;

const INTENT_MAP = {
    'plan.today': 'plan_today',
    'plan.week': 'plan_week',
    'plan.setup': 'plan_customize',
    'report.start': 'report_start',
    'stats.show': 'stats_show',
    'settings.open': 'settings_open',
    'schedule.reschedule': 'schedule_reschedule',
    'recovery.mode': 'recovery_mode',
    'remind.later': 'remind_later',
    motivation: 'motivation',
    help: 'help',
};

const CANDIDATE_SUGGESTIONS = [
    { match: /(–ø–ª–∞–Ω|—Ä–∞—Å–ø–∏—Å–∞–Ω)/i, intent: 'plan_week' },
    { match: /(–æ—Ç—á[–µ—ë]—Ç|—Å–¥–∞–ª)/i, intent: 'report_start' },
    { match: /(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω)/i, intent: 'remind_later' },
    { match: /(–º–æ—Ç–∏–≤–∞—Ü|–ø–æ–¥–¥–µ—Ä–∂)/i, intent: 'motivation' },
];

export function getEngineCatalog({
    successThreshold = DEFAULT_SUCCESS_THRESHOLD,
    slumpThreshold = DEFAULT_RESET_THRESHOLD,
} = {}) {
    return [
        {
            id: ENGINE_ID,
            label: '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä Tzona',
            description: '–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API.',
            requires_key: false,
            available: true,
            status: 'ready',
            status_message: `–ù–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞. –ü–æ—Ä–æ–≥ –ø–æ—Ö–≤–∞–ª—ã ‚Äî ${successThreshold}%, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∏–∂–µ ${slumpThreshold}%.`,
            default: true,
        },
    ];
}

export function resolveEngine({ profile } = {}) {
    const preferred = profile?.preferences?.ai_provider;
    if (preferred && preferred !== ENGINE_ID) {
        return ENGINE_ID;
    }
    return ENGINE_ID;
}

export function interpretCommand({ profile, message, history = [] }) {
    if (!message || typeof message !== 'string') {
        return buildUnknownDecision();
    }

    const detection = detectIntent(message);
    const intent = mapIntent(detection.intent);
    const slots = buildSlots(intent, detection.entities);

    if (intent === 'remind_later' && !slots.reminder) {
        return {
            intent,
            confidence: Math.max(detection.confidence || 0.55, 0.55),
            slots,
            needs_clarification: true,
            clarification_question: '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ú–æ–≥—É —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç, —á–µ—Ä–µ–∑ —á–∞—Å –∏–ª–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.',
            assistant_reply: null,
            candidate_intents: buildCandidateIntents(message, intent),
            secondary_intent: null,
        };
    }

    const assistantReply = buildStructuredReply(intent, {
        profile,
        history,
        message,
        slots,
        detection,
    });

    const confidence = determineConfidence(intent, detection.confidence, message);

    return {
        intent,
        confidence,
        slots,
        needs_clarification: false,
        clarification_question: null,
        assistant_reply: assistantReply,
        candidate_intents: buildCandidateIntents(message, intent),
        secondary_intent: null,
    };
}

export function generateTrainerReply({ profile, message, history = [] }) {
    const decision = interpretCommand({ profile, message, history });
    if (decision.needs_clarification && decision.clarification_question) {
        return decision.clarification_question;
    }
    if (decision.assistant_reply) {
        return decision.assistant_reply;
    }
    return localResponder.buildLocalReply({ profile, message, history });
}

export function generateGeneralReply({ profile, message, history = [] }) {
    const normalized = (message || '').trim();
    if (!normalized) {
        return localResponder.buildLocalReply({ profile, message: normalized, history });
    }

    const greeting = maybeBuildDynamicGreeting({ profile, message: normalized, history });
    if (greeting) {
        return greeting;
    }

    const intent = detectIntent(normalized);
    if (intent.intent === 'motivation') {
        return buildMotivationMessage({ profile, base: intent, message: normalized });
    }

    if (intent.intent === 'plan.today' || intent.intent === 'plan.week') {
        const reply = buildStructuredReply(mapIntent(intent.intent), { profile, history, message: normalized });
        return reply || localResponder.buildLocalReply({ profile, message: normalized, history });
    }

    if (FATIGUE_KEYWORDS.test(normalized)) {
        return buildFatigueReply(profile);
    }

    return localResponder.buildLocalReply({ profile, message: normalized, history });
}

export function generateTrainingPlan({ goals = {}, equipment = [], recentSessions = [], constraints = {}, profile = null } = {}) {
    const plan = buildDefaultWeekPlan({
        frequency: resolveFrequency(profile),
        goals,
        equipment,
        recentSessions,
    });

    const summary = buildPlanSummary({ goals, constraints, profile, recentSessions });

    const sections = plan.sessions?.slice(0, 4).map(formatSessionSummary).join('\n\n');

    const response = [
        summary,
        sections,
        '–°–ª–µ–¥–∏ –∑–∞ RPE: –µ—Å–ª–∏ –¥–µ—Ä–∂–∏—Ç—Å—è ‚â•8, –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ —É–º–µ–Ω—å—à–∏–º –æ–±—ä—ë–º –Ω–∞ 10%.',
        '–í—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –æ—Ç–º–µ—Ç–∫–∏ –ª—É—á—à–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ WebApp ‚Äî —Ç–∞–∫ –ø–ª–∞–Ω—ã –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
    ]
        .filter(Boolean)
        .join('\n\n');

    return {
        rawText: response,
        structured: {
            plan,
            summary,
        },
    };
}

export function analyzeTrainingReport({ session, exercises = [], rpe, notes, history = [], profile = null } = {}) {
    const completion = calculateCompletion(exercises);
    const tone = completion >= 1 ? '–ü—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞–±–∏—Ä–∞—Ç—å –æ–±–æ—Ä–æ—Ç—ã ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–¥—ë—Ç!' : completion >= 0.85
        ? '–ü–æ—á—Ç–∏ –ø–æ–ø–∞–ª –≤ –ø–ª–∞–Ω, –¥–∞–≤–∞–π –ø–æ–¥—á–∏—Å—Ç–∏–º –¥–µ—Ç–∞–ª–∏.'
        : '–í–∏–¥–Ω–æ, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–∞–ª–∞—Å—å —Ç—è–∂–µ–ª–æ ‚Äî —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É.';

    const feedback = formatCoachBlocks({
        summary: `${completion >= 1 ? '‚úÖ' : completion >= 0.85 ? 'üîÅ' : '‚ö†Ô∏è'} ${tone}`,
        goal: session?.description || '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–≤–∏–∂–µ–Ω–∏—è—Ö.',
        warmup: '–ü–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–¥—Ö–æ–¥–æ–º –¥–æ–±–∞–≤—å –¥—ã—Ö–∞–Ω–∏–µ 4-4-4 –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–æ—Ä–ø—É—Å–∞ —Ä–µ–∑–∏–Ω–∫–æ–π.',
        main: buildMainFeedback(exercises),
        cooldown: buildCooldownAdvice(rpe, notes),
        next: suggestNextStep({ completion, rpe, history, profile }),
    });

    const suggestions = buildSuggestionsFromCompletion({ completion, rpe, notes });

    return { feedback, suggestions };
}

export function buildMotivationMessage({ adherence, progressData, currentStreak, profile } = {}) {
    const adherencePercent = adherence ?? profile?.adherence?.adherence_percent ?? null;
    const streak = currentStreak ?? profile?.adherence?.streak ?? null;

    const intro = adherencePercent !== null
        ? `–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${adherencePercent}% ‚Äî —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.`
        : '–¢—ã –¥–≤–∏–≥–∞–µ—à—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚Äî —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∫–æ–∑—ã—Ä—å.';

    const streakLine = streak
        ? `–°–µ—Ä–∏—è —É–∂–µ ${streak} —Ç—Ä–µ–Ω–∏—Ä–æ–≤${decline(streak, ['–∫—É', '–∫–∏', '–æ–∫'])} –ø–æ–¥—Ä—è–¥ ‚Äî –Ω–µ —Å–±–∞–≤–ª—è–π —Ç–µ–º–ø!`
        : '–î–æ–±–∞–≤–∏–º –µ—â—ë –æ–¥–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –∫–æ–ø–∏–ª–∫—É –∏ —É—Å–∏–ª–∏–º –ø—Ä–∏–≤—ã—á–∫—É.';

    const progressLine = progressData
        ? `–ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –≤–∏–∂—É: ${progressData}.`
        : '–ö–∞–∂–¥–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –ø–ª–∞–Ω –ø–æ–¥ —Ç–≤–æ–∏ —Ü–µ–ª–∏.';

    return [
        `üî• ${intro}`,
        streakLine,
        progressLine,
        '–°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ ‚Äî –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ –∏ —á—ë—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –ø–ª–∞–Ω —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –º–∞–∫—Å–∏–º—É–º.',
    ]
        .filter(Boolean)
        .join(' ');
}

function buildUnknownDecision() {
    return {
        intent: 'unknown',
        confidence: 0,
        slots: {},
        needs_clarification: false,
        clarification_question: null,
        assistant_reply: null,
        candidate_intents: [],
        secondary_intent: null,
    };
}

function mapIntent(rawIntent) {
    if (!rawIntent) {
        return 'unknown';
    }
    const normalized = rawIntent.trim().toLowerCase();
    return INTENT_MAP[normalized] || 'fallback_conversation';
}

function buildSlots(intent, entities = {}) {
    if (!entities || typeof entities !== 'object') {
        return {};
    }

    if (intent === 'remind_later' && entities.reminder) {
        return { reminder: entities.reminder };
    }

    if (intent === 'schedule_reschedule') {
        const slots = {};
        if (Number.isFinite(entities.preferredShiftDays)) {
            slots.preferred_shift_days = entities.preferredShiftDays;
        }
        if (entities.preferredDay) {
            slots.preferred_day = entities.preferredDay;
        }
        return slots;
    }

    return {};
}

function buildCandidateIntents(message, primaryIntent) {
    const candidates = [];
    for (const suggestion of CANDIDATE_SUGGESTIONS) {
        if (suggestion.intent === primaryIntent) {
            continue;
        }
        if (suggestion.match.test(message)) {
            candidates.push({ intent: suggestion.intent, confidence: 0.45 });
        }
    }
    return candidates.slice(0, 3);
}

function determineConfidence(intent, baseConfidence = 0.5, message = '') {
    if (intent === 'unknown') {
        return Math.min(0.4, baseConfidence);
    }
    if (intent === 'fallback_conversation') {
        return 0.5;
    }

    if (SUCCESS_KEYWORDS.test(message)) {
        return Math.max(baseConfidence, 0.75);
    }
    if (MISS_KEYWORDS.test(message)) {
        return Math.max(baseConfidence, 0.6);
    }

    return Math.max(baseConfidence, 0.55);
}

function buildStructuredReply(intent, context = {}) {
    const { profile, history, message, slots } = context;
    const summaryContext = buildProfileContext(profile);

    switch (intent) {
    case 'plan_today':
        return formatCoachBlocks(buildPlanTodayBlocks({ profile, history, summaryContext }));
    case 'plan_week':
        return formatCoachBlocks(buildPlanWeekBlocks({ profile, summaryContext }));
    case 'plan_customize':
        return formatCoachBlocks(buildPlanCustomizeBlocks({ profile, summaryContext }));
    case 'report_start':
        return formatCoachBlocks(buildReportBlocks({ profile, message }));
    case 'stats_show':
        return formatCoachBlocks(buildStatsBlocks({ profile }));
    case 'settings_open':
        return formatCoachBlocks(buildSettingsBlocks({ profile }));
    case 'schedule_reschedule':
        return formatCoachBlocks(buildRescheduleBlocks({ profile, slots }));
    case 'recovery_mode':
        return formatCoachBlocks(buildRecoveryBlocks({ profile }));
    case 'remind_later':
        return formatCoachBlocks(buildReminderBlocks({ profile, slots }));
    case 'motivation':
        return formatCoachBlocks(buildMotivationBlocks({ profile }));
    case 'technique_tip':
        return formatCoachBlocks(buildTechniqueBlocks({ profile }));
    case 'analytics_graph':
        return formatCoachBlocks(buildAnalyticsBlocks({ profile }));
    case 'help':
        return formatCoachBlocks(buildHelpBlocks({ profile }));
    case 'open_webapp':
        return formatCoachBlocks(buildOpenWebAppBlocks({ profile }));
    case 'fallback_conversation':
        return localResponder.buildLocalReply({ profile, message, history });
    default:
        return null;
    }
}

function buildPlanTodayBlocks({ profile, history, summaryContext }) {
    const plan = buildDefaultWeekPlan({ frequency: resolveFrequency(profile) });
    const session = plan.sessions?.[0];
    const focus = session?.focus || '–∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤';
    const warmup = session?.warmup?.length
        ? session.warmup.join('; ')
        : '5 –º–∏–Ω—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏ + –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ—Ä–ø—É—Å–∞ —Ä–µ–∑–∏–Ω–∫–æ–π';
    const main = session?.exercises?.length
        ? session.exercises.slice(0, 4).map(ex => formatExerciseLine(ex)).join('; ')
        : '3 —Ä–∞—É–Ω–¥–∞: –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è, –æ—Ç–∂–∏–º–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞ (30 —Å–µ–∫ –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏)';
    const cooldown = session?.cooldown?.length
        ? session.cooldown.join('; ')
        : '–î—ã—Ö–∞–Ω–∏–µ 4-6-4, —Ä–∞—Å—Ç—è–∂–∫–∞ –≥—Ä—É–¥–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞, –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ—á —Ä–µ–∑–∏–Ω–∫–æ–π.';

    const lastAssistant = [...history].reverse().find(item => item.role === 'assistant');
    const summary = lastAssistant?.content?.includes('‚úÖ')
        ? '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –¥–µ—Ä–∂–∏–º —Ç–µ–º–ø!'
        : `–ì–æ—Ç–æ–≤ –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî —Ñ–æ–∫—É—Å –Ω–∞ ${focus.toLowerCase()}.`;

    return {
        summary: `${summary} ${summaryContext}`.trim(),
        goal: `–°–æ–±—Ä–∞—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —Ü–µ–ª–µ–≤–æ–π RPE 7.`,
        warmup,
        main,
        cooldown,
        next: '–û—Ç–º–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ WebApp ‚Äî —Ç–∞–∫ –ø–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç–≤–æ–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É.',
    };
}

function buildPlanWeekBlocks({ profile, summaryContext }) {
    const plan = buildDefaultWeekPlan({ frequency: resolveFrequency(profile) });
    const blocks = plan.sessions?.slice(0, 4).map(session => `${session.session_type}: ${session.focus}`).join('; ');
    const warmup = '–ö–∞–∂–¥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞—á–∏–Ω–∞–µ–º —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–∏–Ω–∫–∏ 5 –º–∏–Ω—É—Ç –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ—Ä–ø—É—Å–∞.';
    const cooldown = '–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –¥—ã—Ö–∞–Ω–∏–µ 4-7-8, —Ä–∞—Å—Ç—è–∂–∫–∞ –ø–ª–µ—á –∏ –ø–æ—è—Å–Ω–∏—Ü—ã 5 –º–∏–Ω—É—Ç.';

    return {
        summary: `–°–æ–±—Ä–∞–ª –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª ‚Äî ${blocks || '—á–µ—Ä–≥—É–µ–º —Å–∏–ª—É, –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'}. ${summaryContext}`.trim(),
        goal: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å–∏–ª—ã, –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ.',
        warmup,
        main: '–ë–ª–æ–∫–∏: 1) –í–µ—Ä—Ö —Ç–µ–ª–∞, 2) –ù–æ–≥–∏ –∏ –±–∞–ª–∞–Ω—Å, 3) –ú–µ—Ç–∫–æ–Ω –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, 4) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è.',
        cooldown,
        next: '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –¥–Ω–∏ –∏–ª–∏ –∞–∫—Ü–µ–Ω—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏, –∏ –º—ã –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë–º –ø–ª–∞–Ω.',
    };
}

function buildPlanCustomizeBlocks({ profile, summaryContext }) {
    const equipment = extractEquipment(profile);
    return {
        summary: `–ì–æ—Ç–æ–≤ —É—Ç–æ—á–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–æ–¥ –Ω–æ–≤—ã–µ –≤–≤–æ–¥–Ω—ã–µ. ${summaryContext}`.trim(),
        goal: '–°–æ–±—Ä–∞—Ç—å —Ü–µ–ª–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –º–∏–∫—Ä–æ—Ü–∏–∫–ª.',
        warmup: '–ù–∞–ø–æ–º–Ω–∏, –µ—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –±–æ–ª—å ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–∏–º —Ä–∞–∑–º–∏–Ω–∫—É –∏ –æ–±—ä—ë–º.',
        main: `–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–Ω–∞—Ä—è–¥–æ–≤: ${equipment}. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞.`,
        cooldown: '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏.',
        next: '–û–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å (—Ü–µ–ª—å, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –≤—Ä–µ–º—è) ‚Äî –∏ —Å–æ–±–µ—Ä—É –Ω–æ–≤—ã–π –ø–ª–∞–Ω.',
    };
}

function buildReportBlocks({ message }) {
    const positive = SUCCESS_KEYWORDS.test(message || '');
    const summary = positive
        ? '–û—Ç–ª–∏—á–Ω–æ, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫.'
        : '–ì–æ—Ç–æ–≤ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.';

    return {
        summary: `${positive ? '‚úÖ' : 'üìù'} ${summary}`,
        goal: '–£—Ç–æ—á–Ω–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –æ–±—ä—ë–º, RPE –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é.',
        warmup: '–ù–∞–ø–æ–º–Ω—é, —á—Ç–æ –æ—Ç–º–µ—á–∞—Ç—å —Ä–∞–∑–º–∏–Ω–∫—É –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –≥–ª–∞–≤–Ω–æ–µ, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å.',
        main: '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é: —Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤/–ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ –∫–∞–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è. –ú–æ–∂–Ω–æ —Ç–µ–∑–∏—Å–Ω–æ.',
        cooldown: '–ï—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –∏–ª–∏ –±–æ–ª—å ‚Äî —É–∫–∞–∂–∏, –∏ –¥–æ–±–∞–≤–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.',
        next: '–ü–æ—Å–ª–µ –æ—Ç—á—ë—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø–ª–∞–Ω –≤ WebApp.',
    };
}

function buildStatsBlocks({ profile }) {
    const adherence = getAdherence(profile);
    const adherenceText = adherence !== null
        ? `–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ ‚Äî ${adherence}%.`
        : '–û—Ç–º–µ—á–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏ –ø–æ–∫–∞–∂—É –¥–∏–Ω–∞–º–∏–∫—É –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏.';
    return {
        summary: '–ì–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–µ–∂–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ –æ–±—ä—ë–º—É, RPE –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏.',
        goal: '–ü–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç –Ω–∞–≥—Ä—É–∑–∫–∞ –∏ –≥–¥–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.',
        warmup: '–ü–æ—Å–º–æ—Ç—Ä–∏–º —Ç—Ä–µ–Ω–¥—ã –ø–æ –æ–±—ä—ë–º—É ‚Äî —Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ñ–∏–∫—Å–∏—Ä—É–µ—à—å —Å–µ–π—á–∞—Å.',
        main: '–†–∞–∑–±–µ—Ä—ë–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ RPE, —á–∞—Å—Ç–æ—Ç—É —Ç—è–∂—ë–ª—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –≤—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å –ø–ª–∞–Ω–∞.',
        cooldown: adherenceText,
        next: '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É ‚Äî –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–∏–æ–¥, –∏ —Å–æ–±–µ—Ä—É –æ—Ç—á—ë—Ç –≤ WebApp.',
    };
}

function buildSettingsBlocks({ profile }) {
    const timezone = profile?.timezone || profile?.preferences?.timezone || 'Europe/Moscow';
    return {
        summary: '–û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ä–µ–∂–∏–º.',
        goal: '–ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≤–∫–ª—é—á—ë–Ω –ª–∏ —Ä–µ–∂–∏–º –ø–∞—É–∑—ã.',
        warmup: `–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}.`,
        main: '–í WebApp –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —á–∞—Å—Ç–æ—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚Äî –≤—Å—ë —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –ø–ª–∞–Ω–æ–º.',
        cooldown: '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–∞—É–∑—É –Ω–∞ –æ—Ç–ø—É—Å–∫ ‚Äî –≤–∫–ª—é—á–∏ –µ—ë, –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è.',
        next: '–°–∫–∞–∂–∏ ¬´–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª, –∏ –ø–µ—Ä–µ–π–¥—ë—à—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.',
    };
}

function buildRescheduleBlocks({ profile, slots = {} }) {
    const shift = Number(slots.preferred_shift_days) || 0;
    const shiftText = shift > 0
        ? `–°–¥–≤–∏–≥–∞—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ ${shift} ${decline(shift, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])}.`
        : '–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é –ø–µ—Ä–µ–Ω–æ—Å –∏ –ø–æ–¥—Å—Ç—Ä–æ—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.';

    return {
        summary: `–ü—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å. ${shiftText}`,
        goal: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä–∞—Ñ–∏–∫–∞.',
        warmup: '–ü—Ä–æ–≤–µ—Ä—é –±–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏–º —Ç—è–∂—ë–ª—ã–π –±–ª–æ–∫ –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É.',
        main: '–ü–æ–¥–±–µ—Ä—É –Ω–æ–≤—ã–µ –¥–∞—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –º–µ–∂–¥—É —Ç—è–∂—ë–ª—ã–º–∏ –¥–Ω—è–º–∏ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 48 —á–∞—Å–æ–≤.',
        cooldown: '–ü–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—é –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ WebApp.',
        next: '–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é ‚Äî –Ω–∞–ø–∏—à–∏, –∏ —Å—Ä–∞–∑—É —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é.',
    };
}

function buildRecoveryBlocks({ profile }) {
    const goalLine = profile?.flags?.recovery_mode
        ? '–†–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å.'
        : '–í–∫–ª—é—á–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∏ —Å–Ω–∏–∑–∏–º –æ–±—ä—ë–º –Ω–∞ 25‚Äì30%.';
    return {
        summary: '–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –º—è–≥–∫–∏–π —Ä–µ–∂–∏–º –Ω–∞–≥—Ä—É–∑–∫–∏.',
        goal: goalLine,
        warmup: '–î–æ–±–∞–≤–∏–º –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –º—è–≥–∫—É—é –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —Ä–∞–∑–º–∏–Ω–∫–∏.',
        main: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –ª—ë–≥–∫–∏—Ö –≤–∞—Ä–∏–∞—Ü–∏—è—Ö, —Ä–∞–±–æ—Ç–µ –Ω–∞ –≥–∏–±–∫–æ—Å—Ç—å –∏ –¥—ã—Ö–∞–Ω–∏–∏ 4-6-4.',
        cooldown: '–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–Ω–∞ –∏ hydration ‚Äî –∫–ª—é—á –∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—é –≤ —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º.',
        next: '–î–∞–π –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.',
    };
}

function buildReminderBlocks({ slots = {} }) {
    const reminder = slots.reminder;
    let summary = '–ó–∞–ø–∏—à—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –ø—Ä–∏—à–ª—é —Å–∏–≥–Ω–∞–ª.';
    if (reminder?.unit === 'hours' && Number.isFinite(reminder.value)) {
        summary = `–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ ${reminder.value} ${decline(reminder.value, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'])}.`;
    } else if (reminder?.unit === 'minutes' && Number.isFinite(reminder.value)) {
        summary = `–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ ${reminder.value} ${decline(reminder.value, ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'])}.`;
    } else if (reminder?.unit === 'clock' && Number.isFinite(reminder.hours) && Number.isFinite(reminder.minutes)) {
        summary = `–ù–∞—Å—Ç—Ä–æ—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫ ${String(reminder.hours).padStart(2, '0')}:${String(reminder.minutes).padStart(2, '0')}.`;
    }

    return {
        summary,
        goal: '–ü–æ–º–æ—á—å –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–ª–∏ –æ—Ç—á—ë—Ç.',
        warmup: '–ü–∞—Ä–∞ –º–∏–Ω—É—Ç –¥—ã—Ö–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ—è—Ç —Ñ–æ–∫—É—Å.',
        main: '–ü–æ —Å–∏–≥–Ω–∞–ª—É –Ω–∞–ø–æ–º–Ω—é –æ—Ç–∫—Ä—ã—Ç—å WebApp –∏ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è.',
        cooldown: '–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –ø–æ–º–µ–Ω—è—é—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è.',
        next: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –∂–¥—É –æ—Ç—á—ë—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!',
    };
}

function buildMotivationBlocks({ profile }) {
    return {
        summary: buildMotivationMessage({ profile }),
        goal: '–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –¥–µ—Ä–∂–∞—Ç—å —Ä–∏—Ç–º.',
        warmup: '–ü–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –≤—Å–ø–æ–º–Ω–∏, –∑–∞ —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –ø—Ä–æ—à–ª–æ–π ‚Äî —Ç–∞–∫ —Ñ–æ–∫—É—Å –ª–µ–≥—á–µ –¥–µ—Ä–∂–∞—Ç—å.',
        main: '–°–¥–µ–ª–∞–µ–º —É–ø–æ—Ä –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏ –∏ –æ—Ç–º–µ—Ç–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ WebApp.',
        cooldown: '–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–æ–Ω 7‚Äì8 —á–∞—Å–æ–≤ –∏ –ª—ë–≥–∫—É—é —Ä–∞—Å—Ç—è–∂–∫—É ‚Äî —ç—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.',
        next: '–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É? –°–∫–∞–∂–∏ ¬´–°–æ–±–µ—Ä–∏ –ø–ª–∞–Ω¬ª –∏–ª–∏ –æ—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.',
    };
}

function buildTechniqueBlocks() {
    return {
        summary: '–†–∞–∑–±–µ—Ä—ë–º —Ç–µ—Ö–Ω–∏–∫—É –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–≤–∏–∂–µ–Ω–∏—è.',
        goal: '–£—Ç–æ—á–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ cues, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –±—ã–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.',
        warmup: '–ü–µ—Ä–µ–¥ –ø–æ–¥—Ö–æ–¥–æ–º –¥–µ—Ä–∂–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é —Å–ø–∏–Ω—É –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å.',
        main: '–°–ª–µ–¥–∏ –∑–∞ –¥—ã—Ö–∞–Ω–∏–µ–º: —É—Å–∏–ª–∏–µ –Ω–∞ –≤—ã–¥–æ—Ö–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –≤–¥–æ—Ö–µ.',
        cooldown: '–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–æ–º–Ω–∏ —Å–≤—è–∑–∫–∏: –ø–ª–µ—á–∏, –≥—Ä—É–¥–Ω–æ–π –æ—Ç–¥–µ–ª, —Ç–∞–∑.',
        next: '–ù—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–æ–≤–∏ –µ–≥–æ, –∏ –¥–∞–º —á–µ–∫-–ª–∏—Å—Ç.',
    };
}

function buildAnalyticsBlocks({ profile }) {
    const adherence = getAdherence(profile);
    const adherenceLine = adherence !== null
        ? `–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Äî ${adherence}%, –¥–µ—Ä–∂–∏–º —Ü–µ–ª—å –≤—ã—à–µ ${DEFAULT_SUCCESS_THRESHOLD}%.`
        : '–û—Ç–º–µ—á–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏ —Å–æ–±–µ—Ä—É –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏.';
    return {
        summary: '–ì–æ—Ç–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ü–∏—Ñ—Ä—ã –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É.',
        goal: '–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –ø–æ –æ–±—ä—ë–º—É –∏ –Ω–∞–≥—Ä—É–∑–∫–µ, —á—Ç–æ–±—ã —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω.',
        warmup: '–ü–æ–∫–∞–∂—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–æ–∫ –ø–æ RPE –∏ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.',
        main: '–°—Ä–∞–≤–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏: –≥–¥–µ —Ä–∞—Å—Ç—ë—Ç –æ–±—ä—ë–º, –∞ –≥–¥–µ –ø—Ä–æ—Å–µ–¥–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∞.',
        cooldown: adherenceLine,
        next: '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –æ—Ç–∫—Ä–æ–π WebApp ‚Äî —Ç–∞–º –±–æ–ª—å—à–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–µ—Ç–∞–ª–µ–π.',
    };
}

function buildHelpBlocks({ profile }) {
    const equipment = extractEquipment(profile);
    return {
        summary: '–Ø ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Tzona. –†–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ –º–æ–≥—É.',
        goal: '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π.',
        warmup: '–ú–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é, –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ü–µ–ª–∏.',
        main: `–†–∞–±–æ—Ç–∞—é —Å ${equipment}. –ü—Ä–∏–Ω–∏–º–∞—é –æ—Ç—á—ë—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é —Ç–µ—Ö–Ω–∏–∫—É.`,
        cooldown: '–ï—Å–ª–∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á—É –ø–ª–∞–Ω –≤ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.',
        next: '–ì–æ—Ç–æ–≤? –°–∫–∞–∂–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å: –ø–ª–∞–Ω, –æ—Ç—á—ë—Ç, –ø–µ—Ä–µ–Ω–æ—Å –∏–ª–∏ –ø–æ–º–æ—â—å –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ.',
    };
}

function buildOpenWebAppBlocks() {
    return {
        summary: '–û—Ç–∫—Ä–æ—é WebApp ‚Äî —Ç–∞–º –≤—Å–µ –ø–ª–∞–Ω—ã, –æ—Ç—á—ë—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.',
        goal: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º.',
        warmup: '–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ Telegram –æ–±–Ω–æ–≤–ª—ë–Ω ‚Äî WebApp –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.',
        main: '–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∏—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏–∑–º–µ–Ω–∏—à—å –≥—Ä–∞—Ñ–∏–∫ –∏ —É–≤–∏–¥–∏—à—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É.',
        cooldown: '–ù–µ –∑–∞–±—É–¥—å –∑–∞–∫—Ä—ã—Ç—å WebApp, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî —Ç–æ–≥–¥–∞ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∑–¥–µ—Å—å.',
        next: '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª, –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ç–∞–º.',
    };
}

function formatCoachBlocks(blocks) {
    if (!blocks) {
        return null;
    }

    if (typeof blocks === 'string') {
        return blocks;
    }

    const { summary, goal, warmup, main, cooldown, next } = blocks;
    return [
        summary,
        goal ? `**–¶–µ–ª—å:** ${goal}` : null,
        warmup ? `**–†–∞–∑–º–∏–Ω–∫–∞:** ${warmup}` : null,
        main ? `**–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:** ${main}` : null,
        cooldown ? `**–ó–∞–º–∏–Ω–∫–∞:** ${cooldown}` : null,
        next ? `**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** ${next}` : null,
    ]
        .filter(Boolean)
        .join('\n');
}

function buildProfileContext(profile) {
    if (!profile) {
        return '';
    }

    const goal = extractPrimaryGoal(profile);
    const frequency = resolveFrequency(profile);
    const adherence = getAdherence(profile);
    const recovery = profile?.flags?.recovery_mode ? '—Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω' : null;

    const parts = [
        goal ? `—Ü–µ–ª—å ‚Äî ${goal}` : null,
        frequency ? `—á–∞—Å—Ç–æ—Ç–∞ ${frequency} —Ç—Ä–µ–Ω/–Ω–µ–¥` : null,
        adherence !== null ? `—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ${adherence}%` : null,
        recovery,
    ].filter(Boolean);

    if (!parts.length) {
        return '';
    }

    return `(${parts.join('; ')})`;
}

function extractPrimaryGoal(profile) {
    return (
        profile?.goals?.description
        || profile?.preferences?.training_goal
        || profile?.profile?.goals?.description
        || null
    );
}

function extractEquipment(profile) {
    const equipment = profile?.equipment
        || profile?.profile?.equipment
        || profile?.preferences?.equipment
        || [];

    if (Array.isArray(equipment) && equipment.length > 0) {
        return equipment.join(', ');
    }
    return '—Ç–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞';
}

function resolveFrequency(profile) {
    const frequency = profile?.preferences?.training_frequency
        || profile?.profile?.preferences?.training_frequency
        || profile?.training_frequency
        || 4;
    return Number(frequency) || 4;
}

function formatExerciseLine(exercise) {
    if (!exercise) {
        return '';
    }

    const parts = [];
    if (exercise.name) {
        parts.push(exercise.name);
    }

    if (exercise.target?.sets && exercise.target?.reps) {
        parts.push(`${exercise.target.sets}√ó${exercise.target.reps}`);
    } else if (exercise.target?.duration_seconds) {
        parts.push(`${Math.round(exercise.target.duration_seconds / 60)} –º–∏–Ω`);
    }

    if (exercise.cues?.length) {
        parts.push(exercise.cues[0]);
    }

    return parts.join(' ‚Äî ');
}

function buildPlanSummary({ goals, constraints = {}, profile, recentSessions }) {
    const goalPrimary = goals.primary || extractPrimaryGoal(profile) || '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å';
    const equipment = extractEquipment(profile);
    const constraintParts = [];
    if (constraints.maxDuration) {
        constraintParts.push(`–¥–æ ${constraints.maxDuration} –º–∏–Ω—É—Ç`);
    }
    if (constraints.daysPerWeek) {
        constraintParts.push(`${constraints.daysPerWeek} —Ç—Ä–µ–Ω–∏—Ä–æ–≤${decline(constraints.daysPerWeek, ['–∫–∞', '–∫–∏', '–æ–∫'])} –≤ –Ω–µ–¥–µ–ª—é`);
    }
    if (constraints.injuries) {
        constraintParts.push(`—É—á–∏—Ç—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${constraints.injuries}`);
    }

    const historyNote = recentSessions?.length
        ? `–£—á–∏—Ç—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${recentSessions.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤${decline(recentSessions.length, ['–∫—É', '–∫–∏', '–æ–∫'])} –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.`
        : null;

    return [
        `–¶–µ–ª—å —Ü–∏–∫–ª–∞ ‚Äî ${goalPrimary}.`,
        `–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${equipment}.`,
        constraintParts.length ? `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${constraintParts.join(', ')}.` : null,
        historyNote,
    ]
        .filter(Boolean)
        .join(' ');
}

function formatSessionSummary(session) {
    if (!session) {
        return '';
    }

    const date = session.date
        ? format(new Date(session.date), 'd MMMM', { locale: ru })
        : '–í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏';
    const main = session.exercises?.slice(0, 3).map(ex => formatExerciseLine(ex)).join('; ');
    return [
        `**${date} ‚Äî ${session.session_type}:** ${session.focus || '—Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ.'}`,
        main,
        `–¶–µ–ª–µ–≤–æ–π RPE: ${session.rpe || 7}.`,
    ]
        .filter(Boolean)
        .join('\n');
}

function calculateCompletion(exercises = []) {
    if (!Array.isArray(exercises) || exercises.length === 0) {
        return 1;
    }

    let totalTarget = 0;
    let totalActual = 0;

    for (const exercise of exercises) {
        const targetSets = exercise.targetSets || exercise.target?.sets || 0;
        const targetReps = exercise.targetReps || exercise.target?.reps || 0;
        const actualSets = exercise.sets || 0;
        const actualReps = exercise.reps || 0;

        if (targetSets && targetReps) {
            totalTarget += targetSets * targetReps;
        }
        if (actualSets && actualReps) {
            totalActual += actualSets * actualReps;
        }
    }

    if (totalTarget === 0) {
        return 1;
    }
    return Math.min(1.5, totalActual / totalTarget);
}

function buildMainFeedback(exercises = []) {
    if (!Array.isArray(exercises) || !exercises.length) {
        return '–û—Ç–º–µ—Ç—å –∫–ª—é—á–µ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –æ—â—É—â–µ–Ω–∏—è ‚Äî —Ç–∞–∫ —è —Ç–æ—á–Ω–µ–µ –ø–æ–¥—Å—Ç—Ä–æ—é —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫.';
    }

    const lines = exercises.slice(0, 3).map((exercise) => {
        const name = exercise.name || exercise.exercise_key || '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ';
        const target = exercise.targetSets && exercise.targetReps
            ? `${exercise.targetSets}√ó${exercise.targetReps}`
            : exercise.target?.sets && exercise.target?.reps
                ? `${exercise.target.sets}√ó${exercise.target.reps}`
                : null;
        const actual = exercise.sets && exercise.reps
            ? `${exercise.sets}√ó${exercise.reps}`
            : null;
        const status = actual && target
            ? actual === target
                ? '–≤ –ø–ª–∞–Ω'
                : Number(exercise.sets) * Number(exercise.reps) > Number(exercise.targetSets || exercise.target?.sets || 0) * Number(exercise.targetReps || exercise.target?.reps || 0)
                    ? '–≤—ã—à–µ –ø–ª–∞–Ω–∞'
                    : '—á—É—Ç—å –Ω–∏–∂–µ –ø–ª–∞–Ω–∞'
            : null;
        const pieces = [name];
        if (actual) {
            pieces.push(actual);
        }
        if (target) {
            pieces.push(`–ø–ª–∞–Ω ${target}`);
        }
        if (status) {
            pieces.push(status);
        }
        return pieces.join(' ‚Äî ');
    });

    return lines.join('; ');
}

function buildCooldownAdvice(rpe, notes) {
    if (Number(rpe) >= 9) {
        return '–°–¥–µ–ª–∞–π —Ä–∞–∑–≥—Ä—É–∑–∫—É: –ª—ë–≥–∫–∞—è —Ö–æ–¥—å–±–∞ 5 –º–∏–Ω—É—Ç, –¥—ã—Ö–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–æ–π, —Å–æ–Ω –Ω–µ –º–µ–Ω–µ–µ 8 —á–∞—Å–æ–≤.';
    }
    if (notes && FATIGUE_KEYWORDS.test(notes)) {
        return '–§–æ–∫—É—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: —Ä–∞—Å—Ç—è–∂–∫–∞ —Å–ø–∏–Ω—ã, –±–∞–Ω—è –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à, –±–æ–ª—å—à–µ –≤–æ–¥—ã.';
    }
    return '–ó–∞–º–∏–Ω–∫–∞: –¥—ã—Ö–∞–Ω–∏–µ 4-6-4, —Ä–∞—Å—Ç—è–∂–∫–∞ –ø–ª–µ—á –∏ –±—ë–¥–µ—Ä 5 –º–∏–Ω—É—Ç, –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—É–ª—å—Å–∞ –¥–æ 110 —É–¥/–º–∏–Ω.';
}

function suggestNextStep({ completion, rpe, history, profile }) {
    if (completion >= 1.05 && Number(rpe) <= 7) {
        return '–í —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä—ë–º –Ω–∞ 10% –∏–ª–∏ —É—Å–ª–æ–∂–Ω–∏—Ç—å –≤–∞—Ä–∏–∞—Ü–∏—é.';
    }
    if (completion < 0.9 || Number(rpe) >= 9) {
        return '–î–∞–≤–∞–π –ø–æ–≤—Ç–æ—Ä–∏–º —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–µ –∏ —Å–Ω–∏–∑–∏–º –æ–±—ä—ë–º –Ω–∞ 15%. –û—Ç–º–µ—Ç—å, –∫–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –∑–∞–≤—Ç—Ä–∞.';
    }
    const lastAssistant = [...history].reverse().find(item => item.role === 'assistant');
    if (lastAssistant?.content?.includes('üîÅ')) {
        return '–ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é: –ø–æ–≤—Ç–æ—Ä–∏ –ø–ª–∞–Ω –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–µ–Ω–∏–π.';
    }
    return '–°–ª–µ–¥—É–π –ø–ª–∞–Ω—É –∏–∑ WebApp –∏ —Ñ–∏–∫—Å–∏—Ä—É–π –∑–∞–º–µ—Ç–∫–∏ ‚Äî –±—É–¥—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ—â—É—â–µ–Ω–∏—è–º.';
}

function buildSuggestionsFromCompletion({ completion, rpe, notes }) {
    const suggestions = [];
    if (completion >= 1.05 && Number(rpe) <= 7) {
        suggestions.push({ type: 'advance', confidence: 0.9 });
    } else if (completion < 0.9 || Number(rpe) >= 9) {
        suggestions.push({ type: 'regress', confidence: 0.8 });
    } else {
        suggestions.push({ type: 'hold', confidence: 0.75 });
    }

    if (notes && FATIGUE_KEYWORDS.test(notes)) {
        suggestions.push({ type: 'recovery', confidence: 0.8 });
    }

    return suggestions;
}

function maybeBuildDynamicGreeting({ profile, message, history }) {
    const isGreeting = /\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä—ã–π|–¥–æ–±—Ä–æ–µ|—Ö–∞–π|hello|hi)\b/i.test(message);
    if (!isGreeting) {
        return null;
    }

    const status = detectGreetingStatus({ profile, message, history });
    const templates = {
        success: [
            '–ü—Ä–∏–≤–µ—Ç! –í–∏–¥–Ω–æ, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞—Ö–æ–¥—è—Ç ‚Äî –¥–µ—Ä–∂–∏—à—å –æ—Ç–ª–∏—á–Ω—ã–π —Ç–µ–º–ø. –ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç–∞–∫ –∂–µ —É–≤–µ—Ä–µ–Ω–Ω–æ?',
            '–ó–¥–æ—Ä–æ–≤–æ –≤–∏–¥–µ—Ç—å! ‚úÖ –ü–ª–∞–Ω –∑–∞–∫—Ä—ã—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–∫—Ä–µ–ø–∏—Ç—å —É—Å–ø–µ—Ö —Ç–µ—Ö–Ω–∏–∫–æ–π –∏–ª–∏ –ª—ë–≥–∫–∏–º –º–µ—Ç–∫–æ–Ω–æ–º.',
            '–≠–π! –°—Ç–æ–ª—å–∫–æ –≥–∞–ª–æ—á–µ–∫ –≤ –∂—É—Ä–Ω–∞–ª–µ ‚Äî –º–æ–∂–Ω–æ –≥–æ—Ä–¥–∏—Ç—å—Å—è. –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤?',
        ],
        slump: [
            '–ü—Ä–∏–≤–µ—Ç! –ë—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç–µ–º–ø —Å–±–∏–≤–∞–µ—Ç—Å—è ‚Äî –¥–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –≤–µ—Ä–Ω—ë–º —Ä–∏—Ç–º.',
            '–†–∞–¥ —Å–≤—è–∑–∏. –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—à–ª—É—é —Å–µ—Å—Å–∏—é –Ω–µ –∑–∞–∫—Ä—ã–ª, —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø–æ–≤–æ–¥ –Ω–∞—á–∞—Ç—å —Å –ª—ë–≥–∫–æ–π —Ä–∞–∑–º–∏–Ω–∫–∏ —Å–µ–≥–æ–¥–Ω—è.',
            '–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–ø—É—Å–∫–∏ ‚Äî —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞. –ü–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –º—è–≥–∫–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç.',
        ],
        fatigue: [
            '–ü—Ä–∏–≤–µ—Ç! –°–Ω–∞—á–∞–ª–∞ –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏, –∞ –ø–æ—Ç–æ–º —É–∂–µ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.',
            '–†–∞–¥ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å. –†–∞–∑–±–∏—Ç–æ—Å—Ç—å ‚Äî —Å–∏–≥–Ω–∞–ª –∫ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É. –ü–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.',
            '–ü—Ä–∏–≤–µ—Ç! –î–∞—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: —Å–Ω–∏–∂–∞—è –Ω–∞–≥—Ä—É–∑–∫—É –≤–æ–≤—Ä–µ–º—è, –º—ã —É—Å–∫–æ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å. –ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º—è–≥–∫–∏–π —Ä–µ–∂–∏–º?',
        ],
        neutral: [
            '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è? –ì–æ—Ç–æ–≤ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ –ø–ª–∞–Ω—É –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é.',
            '–†–∞–¥ –≤–∏–¥–µ—Ç—å! –ù–∞–ø–æ–º–Ω—é, —á—Ç–æ –ø–ª–∞–Ω –∂–¥—ë—Ç —Ç–µ–±—è ‚Äî —Å–∫–∞–∂–∏, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∞–ø–¥–µ–π—Ç.',
            '–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?',
        ],
    };

    const pool = templates[status] || templates.neutral;
    return pool[Math.floor(Math.random() * pool.length)];
}

function detectGreetingStatus({ profile, message, history }) {
    if (FATIGUE_KEYWORDS.test(message)) {
        return 'fatigue';
    }
    if (MISS_KEYWORDS.test(message)) {
        return 'slump';
    }
    if (SUCCESS_KEYWORDS.test(message)) {
        return 'success';
    }

    const adherence = getAdherence(profile);
    if (adherence !== null) {
        if (adherence >= DEFAULT_SUCCESS_THRESHOLD) {
            return 'success';
        }
        if (adherence <= DEFAULT_RESET_THRESHOLD) {
            return 'slump';
        }
    }

    const lastAssistant = [...(history || [])].reverse().find(item => item.role === 'assistant');
    if (lastAssistant?.content?.includes('‚ö†Ô∏è')) {
        return 'slump';
    }

    return 'neutral';
}

function buildFatigueReply(profile) {
    const adherence = getAdherence(profile);
    const adherenceLine = adherence !== null
        ? `–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ ${adherence}%. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –≤—ã–≥–æ—Ä–∞—Ç—å.`
        : '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–∞, –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.';

    return [
        '–ü–æ–Ω—è–ª, —á—Ç–æ —É—Å—Ç–∞–ª–æ—Å—Ç—å –Ω–∞–∫–æ–ø–∏–ª–∞—Å—å. –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ 2‚Äì3 –¥–Ω—è.',
        '–°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–æ–Ω 8 —á–∞—Å–æ–≤, –ª—ë–≥–∫—É—é –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—é –∏ –¥—ã—Ö–∞–Ω–∏–µ 4-6-4 ‚Äî —ç—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.',
        adherenceLine,
        '–ö–æ–≥–¥–∞ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Ä–µ—Å—É—Ä—Å—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å, –Ω–∞–ø–∏—à–∏ ‚Äî –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.',
    ].join(' ');
}

function buildMotivationMessage({ profile, base, message }) {
    const adherence = getAdherence(profile);
    const streak = profile?.adherence?.streak ?? null;

    const opener = adherence !== null && adherence >= DEFAULT_SUCCESS_THRESHOLD
        ? 'üî• –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è —Å–º–µ–ª–µ–µ.'
        : 'üí™ –î–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–º–ø –ø–ª–∞–≤–Ω—ã–π, –∫–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏.';

    const streakLine = streak
        ? `–°–µ—Ä–∏—è ${streak} —Ç—Ä–µ–Ω–∏—Ä–æ–≤${decline(streak, ['–∫–∏', '–∫–∏', '–æ–∫'])} –ø–æ–¥—Ä—è–¥ ‚Äî —ç—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ.`
        : '–î–æ–±–∞–≤–∏–º –µ—â—ë –æ–¥–Ω—É –æ—Ç–º–µ—Ç–∫—É, –∏ –ø—Ä–∏–≤—ã—á–∫–∞ –∑–∞–∫—Ä–µ–ø–∏—Ç—Å—è.';

    const contextLine = base?.confidence > 0.6 && SUCCESS_KEYWORDS.test(message)
        ? '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º —Ä–∞–∑–æ–≥–Ω–∞–Ω–Ω—ã–π —Ç–µ–º–ø.'
        : '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∑–∞—à–ª–æ ‚Äî –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω, –≥–ª–∞–≤–Ω–æ–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –¥–≤–∏–∂–µ–Ω–∏–∏.';

    return [
        opener,
        streakLine,
        contextLine,
        '–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, —Å–∫–∞–∂–∏ ¬´–°–æ–±–µ—Ä–∏ –ø–ª–∞–Ω¬ª ‚Äî –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é.',
    ].join(' ');
}

function getAdherence(profile) {
    const value = profile?.adherence?.adherence_percent
        ?? profile?.metrics?.adherence_percent
        ?? null;
    if (value === null) {
        return null;
    }
    const numeric = Number(value);
    return Number.isFinite(numeric) ? Math.round(numeric) : null;
}

function decline(value, forms) {
    const number = Math.abs(Number(value));
    if (!Number.isFinite(number)) {
        return forms[2];
    }
    const cases = [2, 0, 1, 1, 1, 2];
    const mod100 = number % 100;
    if (mod100 > 10 && mod100 < 20) {
        return forms[2];
    }
    const mod10 = number % 10;
    return forms[cases[Math.min(mod10, 5)]];
}

export default {
    interpretCommand,
    generateTrainerReply,
    generateGeneralReply,
    generateTrainingPlan,
    analyzeTrainingReport,
    buildMotivationMessage,
    getEngineCatalog,
    resolveEngine,
};
