import openai from './openaiClient.js';
import config from '../config/env.js';

const KNOWN_INTENTS = new Set([
    'plan_today',
    'plan_week',
    'plan_customize',
    'report_start',
    'stats_show',
    'settings_open',
    'schedule_reschedule',
    'remind_later',
    'recovery_mode',
    'motivation',
    'technique_tip',
    'analytics_graph',
    'explain_recommendation',
    'help',
    'open_webapp',
    'fallback_conversation',
    'unknown',
]);

const SYSTEM_PROMPT = `–¢—ã ‚Äî –ò–ò-—Ç—Ä–µ–Ω–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–∏–Ω–≥–∞ –∏ –∫–∞–ª–∏—Å—Ç–µ–Ω–∏–∫–∏.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Å –∫–∞—Ä—Ç–æ–π –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ¬´–ü—Ä–∞–≤–∏–ª–∞ –ò–ò –∏ –¥–∏–∞–ª–æ–≥–∞¬ª.

–í—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω—Ç–µ–Ω—Ç–æ–≤: health ‚Üí reschedule ‚Üí report ‚Üí plan ‚Üí variation ‚Üí analytics ‚Üí technique ‚Üí remind_later ‚Üí notification_time ‚Üí help ‚Üí explain.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
{
  "intent": string (–∏–∑ —Å–ø–∏—Å–∫–∞ intents –Ω–∏–∂–µ),
  "confidence": number 0..1,
  "slots": object,
  "needs_clarification": boolean,
  "clarification_question": string | null,
  "assistant_reply": string | null,
  "candidate_intents": [{ "intent": string, "confidence": number }],
  "secondary_intent": string | null
}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å < 0.4 –∏ –Ω–µ—Ç —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –≤–µ—Ä–Ω–∏ intent "unknown" —Å candidate_intents (–º–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).
- assistant_reply –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: —Ä–µ–∑—é–º–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π ‚Üí –±–ª–æ–∫–∏ **–¶–µ–ª—å**, **–†–∞–∑–º–∏–Ω–∫–∞**, **–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å**, **–ó–∞–º–∏–Ω–∫–∞**, **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥**. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ (‚úÖ, üîÅ, ‚ö†Ô∏è, üî•, üí§) –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –≤—Ç–æ—Ä–∏—á–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç (secondary_intent), –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –µ—â—ë –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π.
- –î–ª—è remind_later —É–∫–∞–∑—ã–≤–∞–π slots.reminder { unit: "hours"|"minutes"|"clock", value?: number, hours?: number, minutes?: number }.
- –î–ª—è schedule_reschedule —É–∫–∞–∑—ã–≤–∞–π slots.target_date, slots.reason (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ slots.preferred_shift_days.
- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —á—ë—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞) –∏ –æ—Å—Ç–∞–≤—å intent = intent, –Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏ needs_clarification = true.
- –ü—Ä–∏ fallback_conversation —Å—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π assistant_reply –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ—Ñ–∏–ª—å.
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.
- Intent open_webapp –∏—Å–ø–æ–ª—å–∑—É–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–∞–Ω–µ–ª—å, WebApp –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –î–ª—è –Ω–µ–≥–æ assistant_reply –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å.

–î–æ—Å—Ç—É–ø–Ω—ã–µ intents: plan_today, plan_week, plan_customize, report_start, stats_show, settings_open, schedule_reschedule, remind_later, recovery_mode, motivation, technique_tip, analytics_graph, explain_recommendation, help, open_webapp, fallback_conversation, unknown.`;

function buildProfileContext(profile) {
    if (!profile) {
        return null;
    }

    const frequency = profile.preferences?.training_frequency
        ? `${profile.preferences.training_frequency} —Ä–∞–∑(–∞) –≤ –Ω–µ–¥–µ–ª—é`
        : '—á–∞—Å—Ç–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞';

    const goal = profile.goals?.description || '—Ü–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    const equipment = Array.isArray(profile.equipment) && profile.equipment.length
        ? profile.equipment.join(', ')
        : '—Ç–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞';

    return {
        id: profile.id,
        goal,
        equipment,
        frequency,
        onboarding_status: profile.preferences?.onboarding_status || 'unknown',
        recovery_mode: profile.flags?.recovery_mode || false,
    };
}

function normalizeCandidates(items) {
    if (!Array.isArray(items)) {
        return [];
    }

    return items
        .map(item => ({
            intent: typeof item.intent === 'string' ? item.intent : 'unknown',
            confidence: typeof item.confidence === 'number' ? item.confidence : 0,
        }))
        .filter(item => Number.isFinite(item.confidence));
}

function sanitizeIntent(intent) {
    if (!intent || typeof intent !== 'string') {
        return 'unknown';
    }

    const trimmed = intent.trim();
    return KNOWN_INTENTS.has(trimmed) ? trimmed : 'unknown';
}

class AiCommandRouter {
    async interpret({ profile, message, history = [] }) {
        if (!message || typeof message !== 'string') {
            return {
                intent: 'unknown',
                confidence: 0,
                slots: {},
                candidate_intents: [],
            };
        }

        const payload = {
            message,
            profile: buildProfileContext(profile),
            history: history.slice(-5),
            timestamp: new Date().toISOString(),
        };

        let attempt = 0;
        let lastResult = null;

        while (attempt < 3) {
            attempt += 1;

            try {
                const completion = await openai.chat.completions.create({
                    model: config.openai.model,
                    temperature: attempt === 1 ? 0 : 0.2,
                    response_format: { type: 'json_object' },
                    messages: [
                        { role: 'system', content: SYSTEM_PROMPT },
                        { role: 'user', content: JSON.stringify(payload) },
                    ],
                });

                const content = completion.choices?.[0]?.message?.content;
                if (!content) {
                    continue;
                }

                const parsed = JSON.parse(content);
                const normalized = {
                    intent: sanitizeIntent(parsed.intent),
                    confidence: typeof parsed.confidence === 'number' ? parsed.confidence : 0,
                    slots: typeof parsed.slots === 'object' && parsed.slots ? parsed.slots : {},
                    needs_clarification: Boolean(parsed.needs_clarification),
                    clarification_question: parsed.clarification_question || null,
                    assistant_reply: typeof parsed.assistant_reply === 'string' ? parsed.assistant_reply.trim() : null,
                    candidate_intents: normalizeCandidates(parsed.candidate_intents),
                    secondary_intent: parsed.secondary_intent ? sanitizeIntent(parsed.secondary_intent) : null,
                };

                lastResult = normalized;

                if (normalized.needs_clarification || normalized.confidence >= 0.4 || normalized.intent === 'fallback_conversation') {
                    break;
                }
            } catch (error) {
                console.error('AI command routing failed on attempt', attempt, error);
            }
        }

        if (!lastResult) {
            return {
                intent: 'unknown',
                confidence: 0,
                slots: {},
                candidate_intents: [],
            };
        }

        if (lastResult.confidence < 0.4 && !lastResult.needs_clarification && lastResult.intent !== 'fallback_conversation') {
            return {
                ...lastResult,
                intent: 'unknown',
                clarification_question: null,
                needs_clarification: false,
                assistant_reply: null,
            };
        }

        return lastResult;
    }
}

const aiCommandRouter = new AiCommandRouter();

export default aiCommandRouter;
