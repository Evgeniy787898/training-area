import { format } from 'date-fns';
import ru from 'date-fns/locale/ru/index.js';
import config from '../config/env.js';
import { createChatCompletion } from './llmGateway.js';
import { buildDefaultWeekPlan } from './staticPlan.js';
import { detectIntent } from './nlu.js';
import localResponder from './localResponder.js';

const TRAINER_PROMPT = `–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ç—Ä–µ–Ω–∏–Ω–≥—É –∏ –∫–∞–ª–∏—Å—Ç–µ–Ω–∏–∫–µ.
–†–∞–±–æ—Ç–∞–π –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ ¬´–ü—Ä–∞–≤–∏–ª –ò–ò –∏ –¥–∏–∞–ª–æ–≥–∞¬ª: –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π intents, —Å–æ–±–ª—é–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏,
–∏—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏ –¥–µ—Ä–∂–∏ —Ç–æ–Ω –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –û–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ-—Ä–µ–∑—é–º–µ.
2. –ë–ª–æ–∫–∏ **–¶–µ–ª—å**, **–†–∞–∑–º–∏–Ω–∫–∞**, **–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å**, **–ó–∞–º–∏–Ω–∫–∞**, **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥** ‚Äî –¥–æ 5 —Å—Ç—Ä–æ–∫ –∫–∞–∂–¥—ã–π.
3. –≠–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ (‚úÖ, üîÅ, ‚ö†Ô∏è, üî•, üí§).
4. –í –∫–æ–Ω—Ü–µ ‚Äî –æ–¥–∏–Ω —á—ë—Ç–∫–∏–π call-to-action.
5. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–Ω–µ —Å–ø–æ—Ä—Ç–∞, –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.
6. –õ—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–ª–∞–Ω, –æ—Ç—á—ë—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏), –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ WebApp –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–π –ø–æ–ø—Ä–æ—Å–∏—Ç—å ¬´–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª.`;

const GENERAL_PROMPT = `–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã Tzona. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –ª—é–±—ã–º —Ç–µ–º–∞–º: –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ –±—ã—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ–¥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫ –∂–µ –≥–ª—É–±–æ–∫–æ, –∫–∞–∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π ChatGPT: –ø–æ—è—Å–Ω—è–π —Ö–æ–¥ –º—ã—Å–ª–µ–π, –¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —É—Ç–æ—á–Ω—è–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å–≤–µ–∂–∏–π –ø–ª–∞–Ω. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω–æ–º, –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å–≤—è–∑—å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ä—É—Å—Å–∫–∏–π).`;

const TRAINER_PREFIXES = ['—Ç—Ä–µ–Ω–µ—Ä', 'trainer', 'coach', '–±–æ—Å—Å', 'boss'];
const TRAINER_INTENTS = new Set([
    'plan.today',
    'plan.week',
    'plan.setup',
    'report.start',
    'stats.show',
    'settings.open',
    'schedule.reschedule',
    'recovery.mode',
    'remind.later',
    'motivation',
]);

const MAX_HISTORY_MESSAGES = 10;

class ConversationService {
    async generateReply({ profile, message, history = [], mode = 'chat' }) {
        if (!message) {
            return null;
        }

        const trainerTone = this.shouldUseTrainerMode({ message, mode });
        const summary = this.buildProfileSummary(profile, { trainerTone });
        const messages = buildPromptMessages({
            trainerTone,
            summary,
            history,
            message,
        });

        try {
            const completion = await createChatCompletion({
                messages,
                temperature: trainerTone ? 0.7 : 0.6,
                max_tokens: trainerTone ? 600 : 900,
            }, {
                profile,
                allowLocal: false,
            });

            const raw = completion?.choices?.[0]?.message?.content?.trim();
            if (!raw) {
                return this.buildUnavailableReply(null, { profile, message, mode, trainerTone, history });
            }

            return trainerTone ? formatStructuredReply(raw) : raw;
        } catch (error) {
            console.error('Conversation reply failed:', error);
            return this.buildUnavailableReply(error, { profile, message, mode, trainerTone, history });
        }
    }

    shouldUseTrainerMode({ message, mode }) {
        if (mode === 'command') {
            return true;
        }

        const normalized = (message || '').trim().toLowerCase();
        if (!normalized) {
            return false;
        }

        if (TRAINER_PREFIXES.some(prefix => normalized.startsWith(prefix))) {
            return true;
        }

        const detected = detectIntent(normalized);
        return TRAINER_INTENTS.has(detected.intent);
    }

    buildProfileSummary(profile, { trainerTone } = {}) {
        if (!profile) {
            return '';
        }

        const frequencyValue =
            profile.preferences?.training_frequency ??
            profile.profile?.preferences?.training_frequency ??
            profile.training_frequency ??
            null;
        const frequency = frequencyValue ? `${frequencyValue} —Ç—Ä–µ–Ω/–Ω–µ–¥` : '—á–∞—Å—Ç–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

        const goal =
            profile.goals?.description ||
            profile.preferences?.training_goal ||
            profile.profile?.goals?.description ||
            '—Ü–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

        const equipmentList = Array.isArray(profile.equipment) && profile.equipment.length
            ? profile.equipment.join(', ')
            : '—Ç–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞';

        const adherence =
            profile.adherence?.adherence_percent ??
            profile.metrics?.adherence_percent ??
            null;

        const recoveryMode = profile.flags?.recovery_mode ? '—Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : null;
        const timezone = profile.timezone || profile.preferences?.timezone || null;

        const segments = [
            `—Ü–µ–ª—å ‚Äî ${goal}`,
            `–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ‚Äî ${equipmentList}`,
            `—á–∞—Å—Ç–æ—Ç–∞ ‚Äî ${frequency}`,
            recoveryMode,
            adherence !== null ? `—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ${adherence}%` : null,
            timezone ? `—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å ${timezone}` : null,
        ].filter(Boolean);

        const prefix = trainerTone ? '–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:' : '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';
        return `${prefix} ${segments.join('; ')}.`;
    }

    buildUnavailableReply(error, context = {}) {
        const fallback = this.buildFallbackReply(context);
        if (fallback) {
            return fallback;
        }

        if (config.app?.nodeEnv === 'development') {
            const reason = error?.message ? ` –ü—Ä–∏—á–∏–Ω–∞: ${error.message}` : '';
            return `‚ö†Ô∏è AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á –∏ –ª–∏–º–∏—Ç—ã OpenAI.${reason}`;
        }

        return '‚ö†Ô∏è AI-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π WebApp –∫–æ–º–∞–Ω–¥–æ–π /webapp.';
    }

    buildFallbackReply({ profile, message, mode, trainerTone, history } = {}) {
        if (!message) {
            return trainerTone ? this.buildGenericFallback(profile) : this.buildGeneralFallback(null, profile);
        }

        const { intent } = detectIntent(message);
        const treatAsTrainer = trainerTone || TRAINER_INTENTS.has(intent);

        if (!treatAsTrainer && mode !== 'command') {
            return localResponder.buildLocalReply({ message, profile, history })
                || this.buildGeneralFallback(message, profile);
        }

        switch (intent) {
            case 'plan.today':
            case 'plan.week':
                return this.buildPlanFallback(profile);
            case 'report.start':
                return this.buildReportFallback();
            case 'motivation':
                return this.buildMotivationFallback(profile);
            case 'help':
                return this.buildHelpFallback();
            case 'settings.open':
                return this.buildSettingsFallback();
            default:
                return this.buildGenericFallback(profile);
        }
    }

    buildPlanFallback(profile) {
        const frequency = profile?.preferences?.training_frequency || 4;
        const plan = buildDefaultWeekPlan({ frequency });
        const nextSession = plan.sessions?.[0];
        const dateLabel = nextSession?.date
            ? format(new Date(nextSession.date), 'd MMMM', { locale: ru })
            : null;
        const sessionName = nextSession?.focus || nextSession?.session_type || '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞';

        const summary = nextSession
            ? `–ü–ª–∞–Ω –≥–æ—Ç–æ–≤ ‚Äî ${dateLabel ? `—Å–µ—Å—Å–∏—è –Ω–∞ ${dateLabel}` : '—Å–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'} ¬´${sessionName}¬ª.`
            : '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤, –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.';

        const warmup = nextSession?.warmup?.length
            ? nextSession.warmup.join('; ')
            : '5 –º–∏–Ω—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–∏–Ω–∫–∏: –∫—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –ª–µ–≥–∫–∏–µ –ø—Ä—ã–∂–∫–∏, –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ—á –∏ —Ç–∞–∑–∞.';

        const main = nextSession?.exercises?.length
            ? nextSession.exercises
                .slice(0, 3)
                .map(ex => `${ex.name || ex.exercise_key}: ${ex.sets || '3'}√ó${ex.reps || '10'} (${ex.notes || '–∫–æ–Ω—Ç—Ä–æ–ª—å –¥—ã—Ö–∞–Ω–∏—è'})`)
                .join('\n')
            : '3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π/–æ—Ç–∂–∏–º–∞–Ω–∏–π/–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –ø–æ 8‚Äì10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å —Ç–µ—Ö–Ω–∏–∫–æ–π ¬´–∫–∞—á–µ—Å—Ç–≤–æ > –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ¬ª.';

        const cooldown = nextSession?.cooldown?.length
            ? nextSession.cooldown.join('; ')
            : '5 –º–∏–Ω—É—Ç —Ä–∞—Å—Ç—è–∂–∫–∏ –≥—Ä—É–¥–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞, –ø—Ä–∏–≤–æ–¥—è—â–∏—Ö –º—ã—à—Ü –∏ –∑–∞–¥–Ω–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –±–µ–¥—Ä–∞.';

        return formatSections({
            summary,
            goal: '–ó–∞–∫—Ä–µ–ø–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∏—Ç–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª–µ.',
            warmup,
            main,
            cooldown,
            nextStep: '–û—Ç–∫—Ä–æ–π WebApp –∏ –æ—Ç–º–µ—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é.',
        });
    }

    buildReportFallback() {
        return formatSections({
            summary: '–ó–∞–ø–∏—à–µ–º –æ—Ç—á—ë—Ç –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.',
            goal: '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä—ë–º –∏ –æ—â—É—â–µ–Ω–∏—è –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
            warmup: '–û—Å–≤–µ–∂–∏ –≤ –ø–∞–º—è—Ç–∏, –∫–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –æ–±—ä—ë–º –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.',
            main: '–ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç: –¥–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –æ–±—ä—ë–º (–ø–æ–¥—Ö–æ–¥—ã √ó –ø–æ–≤—Ç–æ—Ä—ã / –≤—Ä–µ–º—è), –∏—Ç–æ–≥–æ–≤–æ–µ RPE.',
            cooldown: '–î–æ–±–∞–≤—å –∑–∞–º–µ—Ç–∫–∏: —á—Ç–æ –¥–∞–ª–æ—Å—å –ª–µ–≥—á–µ, –≥–¥–µ –Ω—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞.',
            nextStep: '–ü–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è –æ–±–Ω–æ–≤–ª—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–¥—Å–∫–∞–∂—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.',
        });
    }

    buildMotivationFallback(profile) {
        const adherence = profile?.metrics?.adherence_percent ?? profile?.adherence?.adherence_percent ?? null;
        const adherenceText = typeof adherence === 'number'
            ? `–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ${adherence}% ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç.`
            : '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –≤–∞–∂–Ω–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ ‚Äî –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.';

        return formatSections({
            summary: '–¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –±–æ–ª—å—à—É—é —Ä–∞–±–æ—Ç—É ‚Äî –∑–∞–∫—Ä–µ–ø–∏–º —Ä–∏—Ç–º –∏ —Å–¥–µ–ª–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π —à–∞–≥.',
            goal: adherenceText,
            warmup: '–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –æ—Ç–º–µ—Ç—å, –∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –∏ –∫–∞–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –æ—Ç–¥–∞—à—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.',
            main: '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∫–ª—é—á–µ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–µ–¥–µ–ª–∏ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –Ω–µ–π: —Ç–µ—Ö–Ω–∏—á–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —É–º–µ—Ä–µ–Ω–Ω–æ–µ RPE, —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Ç–µ–º–ø.',
            cooldown: '–§–∏–Ω–∏—à–∏—Ä—É–π —Ä–∞—Å—Ç—è–∂–∫–æ–π –∏ –¥—ã—Ö–∞–Ω–∏–µ–º 3‚Äì4 –º–∏–Ω—É—Ç—ã ‚Äî —Ç–µ–ª–æ –±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.',
            nextStep: '–û—Ç–º–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ WebApp ‚Äî —Ç–∞–∫ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–¥—Å—Ç—Ä–æ—è—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –ø–æ–¥ —Ç–≤–æ–π —Ä–∏—Ç–º.',
        });
    }

    buildHelpFallback() {
        return formatSections({
            summary: '–Ø –ø–æ–º–æ–≥—É —Å –ø–ª–∞–Ω–æ–º, –æ—Ç—á—ë—Ç–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.',
            goal: '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω, –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏.',
            warmup: '–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–æ–∫–∞–∂–∏ –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª, ¬´–Ø –∑–∞–∫–æ–Ω—á–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª, ¬´–ò–∑–º–µ–Ω–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è¬ª.',
            main: '–î–ª—è –æ—Ç—á—ë—Ç–∞ –ø—Ä–∏—à–ª–∏ –¥–∞—Ç—É –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –¥–ª—è –ø–ª–∞–Ω–∞ ‚Äî —Å–∫–∞–∂–∏ ¬´—á—Ç–æ —Å–µ–≥–æ–¥–Ω—è¬ª –∏–ª–∏ ¬´–¥–∞–π –Ω–µ–¥–µ–ª—é¬ª.',
            cooldown: '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥–ª—è–Ω–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ê–Ω–∞–ª–∏—Ç–∏–∫–∞¬ª –≤ WebApp.',
            nextStep: '–ù–∞–ø–∏—à–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å, –∏–ª–∏ –æ—Ç–∫—Ä–æ–π WebApp –∫–æ–º–∞–Ω–¥–æ–π /webapp.',
        });
    }

    buildSettingsFallback() {
        return formatSections({
            summary: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —Ü–µ–ª–µ–π –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞ –º–∏–Ω—É—Ç—É.',
            goal: '–û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å: –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á–∞—Å—Ç–æ—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.',
            warmup: '–ü–æ–¥—É–º–∞–π, –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–∞—é—Ç—Å—è –ª–µ–≥—á–µ ‚Äî —É—Ç—Ä–æ, –¥–µ–Ω—å –∏–ª–∏ –≤–µ—á–µ—Ä.',
            main: '–ù–∞–ø–∏—à–∏ ¬´–ü–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 9:00¬ª –∏–ª–∏ ¬´–•–æ—á—É 4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é¬ª ‚Äî —è –æ–±–Ω–æ–≤–ª—é –ø—Ä–æ—Ñ–∏–ª—å.',
            cooldown: '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É, —Å–∫–∞–∂–∏ ¬´–ü–æ—Å—Ç–∞–≤—å —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è¬ª ‚Äî —É–±–µ—Ä—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π.',
            nextStep: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ WebApp, —á—Ç–æ–±—ã –≤—Å—ë —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å.',
        });
    }

    buildGeneralFallback(message, profile) {
        const frequency = resolveFrequency(profile);
        const header = message
            ? `–ó–∞–ø—Ä–æ—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: ¬´${truncateText(message, 180)}¬ª.`
            : '–Ø –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.';

        return [
            header,
            frequency ? `–î–µ—Ä–∂–∏–º –∫—É—Ä—Å –Ω–∞ ${frequency}.` : null,
            '–°–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –≤–∞–∂–Ω—ã, –∏ –ø—Ä–µ–¥–ª–æ–∂—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é.',
        ]
            .filter(Boolean)
            .join('\n');
    }

    buildGenericFallback(profile) {
        const frequency = profile?.preferences?.training_frequency
            ? `${profile.preferences.training_frequency} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é`
            : '3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é';

        return formatSections({
            summary: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è –∏ –¥–µ—Ä–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ä–∏—Ç–º–µ.',
            goal: `–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å ${frequency} —Å —É–ø–æ—Ä–æ–º –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.`,
            warmup: '–ù–∞—á–Ω–∏ —Å –ª—ë–≥–∫–æ–π –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∏ –¥—ã—Ö–∞–Ω–∏—è: 5 –º–∏–Ω—É—Ç –ø–ª–∞–≤–Ω—ã—Ö –∫—Ä—É–≥–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π.',
            main: '–í—ã–±–µ—Ä–∏ –∏–∑ –ø–ª–∞–Ω–∞ –±–∞–∑–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –¥–µ—Ä–∂–∏ RPE 7‚Äì8 –∏ —á–∏—Å—Ç—É—é —Ç–µ—Ö–Ω–∏–∫—É ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞.',
            cooldown: '–ó–∞–∫—Ä–µ–ø–∏ —Ä–∞—Å—Ç—è–∂–∫–æ–π –∏ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π –æ—â—É—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∑–∞–º–µ—Ç–∫–µ.',
            nextStep: '–û—Ç–∫—Ä–æ–π WebApp, –æ—Ç–º–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å–µ—Å—Å–∏—é.',
        });
    }
}

const conversationService = new ConversationService();

export default conversationService;

function buildPromptMessages({ trainerTone, summary, history, message }) {
    const messages = [
        { role: 'system', content: trainerTone ? TRAINER_PROMPT : GENERAL_PROMPT },
    ];

    if (summary) {
        messages.push({ role: 'system', content: summary });
    }

    const historyMessages = mapHistoryForModel(history, trainerTone ? MAX_HISTORY_MESSAGES : MAX_HISTORY_MESSAGES + 4);
    if (historyMessages.length) {
        messages.push(...historyMessages);
    }

    messages.push({ role: 'user', content: message });
    return messages;
}

function mapHistoryForModel(history, limit = MAX_HISTORY_MESSAGES) {
    if (!Array.isArray(history) || history.length === 0) {
        return [];
    }

    const trimmed = history.slice(-Math.max(limit, 0));
    return trimmed
        .map(item => {
            if (!item || typeof item.content !== 'string') {
                return null;
            }
            const content = item.content.trim();
            if (!content) {
                return null;
            }
            const role = item.role === 'assistant' ? 'assistant' : 'user';
            return { role, content };
        })
        .filter(Boolean);
}

function formatStructuredReply(text) {
    if (!text) {
        return text;
    }

    return text
        .replace(/\*\*(.+?)\*\*/g, (_, heading) => `${heading.toUpperCase()}:`)
        .replace(/\n{3,}/g, '\n\n')
        .trim();
}

function formatSections({ summary, goal, warmup, main, cooldown, nextStep }) {
    return [
        summary,
        '',
        `–¶–ï–õ–¨: ${goal}`,
        '',
        `–†–ê–ó–ú–ò–ù–ö–ê: ${warmup}`,
        '',
        `–û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨: ${main}`,
        '',
        `–ó–ê–ú–ò–ù–ö–ê: ${cooldown}`,
        '',
        `–°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: ${nextStep}`,
    ].join('\n').replace(/\n{3,}/g, '\n\n').trim();
}

function truncateText(text, maxLength = 140) {
    if (!text) {
        return '';
    }

    if (text.length <= maxLength) {
        return text;
    }

    return `${text.slice(0, Math.max(0, maxLength - 1)).trim()}‚Ä¶`;
}

function resolveFrequency(profile) {
    const value =
        profile?.preferences?.training_frequency ??
        profile?.training_frequency ??
        profile?.profile?.preferences?.training_frequency ??
        null;

    if (!value) {
        return null;
    }

    return `${value} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é`;
}
