import { format } from 'date-fns';
import ru from 'date-fns/locale/ru/index.js';
import { buildDefaultWeekPlan } from './staticPlan.js';
import { detectIntent } from './nlu.js';
import localResponder from './localResponder.js';
import internalAssistantEngine from './internalAssistantEngine.js';

const TRAINER_PREFIXES = ['—Ç—Ä–µ–Ω–µ—Ä', 'trainer', 'coach', '–±–æ—Å—Å', 'boss'];
const TRAINER_INTENTS = new Set([
    'plan.today',
    'plan.week',
    'plan.setup',
    'report.start',
    'stats.show',
    'settings.open',
    'schedule.reschedule',
    'recovery.mode',
    'remind.later',
    'motivation',
]);

class ConversationService {
    async generateReply({ profile, message, history = [], mode = 'chat' }) {
        if (!message) {
            return null;
        }

        const trainerTone = this.shouldUseTrainerMode({ message, mode });

        if (trainerTone) {
            const reply = await internalAssistantEngine.generateTrainerReply({ profile, message, history });
            return reply || this.buildGenericFallback(profile);
        }

        const general = await internalAssistantEngine.generateGeneralReply({ profile, message, history });
        if (general) {
            return general;
        }

        return this.buildFallbackReply({ profile, message, history, mode, trainerTone });
    }

    shouldUseTrainerMode({ message, mode }) {
        if (mode === 'command') {
            return true;
        }

        const normalized = (message || '').trim().toLowerCase();
        if (!normalized) {
            return false;
        }

        if (TRAINER_PREFIXES.some(prefix => normalized.startsWith(prefix))) {
            return true;
        }

        const detected = detectIntent(normalized);
        return TRAINER_INTENTS.has(detected.intent);
    }

    async buildFallbackReply({ profile, message, mode, trainerTone, history } = {}) {
        if (!message) {
            return trainerTone
                ? this.buildGenericFallback(profile)
                : this.buildGeneralFallback(null, profile);
        }

        const { intent } = detectIntent(message);
        const treatAsTrainer = trainerTone || TRAINER_INTENTS.has(intent);

        if (!treatAsTrainer && mode !== 'command') {
            return localResponder.buildLocalReply({ message, profile, history })
                || this.buildGeneralFallback(message, profile);
        }

        switch (intent) {
        case 'plan.today':
        case 'plan.week':
            return this.buildPlanFallback(profile);
        case 'report.start':
            return this.buildReportFallback();
        case 'motivation':
            return internalAssistantEngine.buildMotivationMessage(profile);
        case 'help':
            return this.buildHelpFallback();
        case 'settings.open':
            return this.buildSettingsFallback();
        default:
            return this.buildGenericFallback(profile);
        }
    }

    buildPlanFallback(profile) {
        const frequency = profile?.preferences?.training_frequency || 4;
        const plan = buildDefaultWeekPlan({ frequency });
        const nextSession = plan.sessions?.[0];
        const dateLabel = nextSession?.date
            ? format(new Date(nextSession.date), 'd MMMM', { locale: ru })
            : null;
        const sessionName = nextSession?.focus || nextSession?.session_type || '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞';

        const summary = nextSession
            ? `–ü–ª–∞–Ω –≥–æ—Ç–æ–≤ ‚Äî ${dateLabel ? `—Å–µ—Å—Å–∏—è –Ω–∞ ${dateLabel}` : '—Å–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'} ¬´${sessionName}¬ª.`
            : '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤, –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.';

        const warmup = nextSession?.warmup?.length
            ? nextSession.warmup.join('; ')
            : '5 –º–∏–Ω—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–∏–Ω–∫–∏: –∫—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –ª—ë–≥–∫–∏–µ –ø—Ä—ã–∂–∫–∏, –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ—á –∏ —Ç–∞–∑–∞.';

        const main = nextSession?.exercises?.length
            ? nextSession.exercises
                .slice(0, 3)
                .map(exercise => {
                    const sets = exercise.sets || exercise.target?.sets;
                    const reps = exercise.reps || exercise.target?.reps;
                    const volume = sets && reps ? `${sets}√ó${reps}` : null;
                    return [exercise.name || exercise.exercise_key, volume, exercise.notes]
                        .filter(Boolean)
                        .join(' ‚Äî ');
                })
                .join('; ')
            : '3 –∫—Ä—É–≥–∞: –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è, –æ—Ç–∂–∏–º–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞ ‚Äî —Ñ–æ–∫—É—Å –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ –∏ –¥—ã—Ö–∞–Ω–∏–∏.';

        const cooldown = nextSession?.cooldown?.length
            ? nextSession.cooldown.join('; ')
            : '–î—ã—Ö–∞–Ω–∏–µ 4-6-4, —Ä–∞—Å—Ç—è–∂–∫–∞ –≥—Ä—É–¥–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞ –∏ –ª—ë–≥–∫–∏–π —Ä–æ–ª–ª —Å–ø–∏–Ω—ã.';

        return [
            `${summary} –ö–æ–Ω—Ç—Ä–æ–ª—å RPE: –¥–µ—Ä–∂–∏ –æ–∫–æ–ª–æ 7.`,
            `**–¶–µ–ª—å:** –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º–ø –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.`,
            `**–†–∞–∑–º–∏–Ω–∫–∞:** ${warmup}`,
            `**–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:** ${main}`,
            `**–ó–∞–º–∏–Ω–∫–∞:** ${cooldown}`,
            '**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –û—Ç–º–µ—Ç—å —Å–µ—Å—Å–∏—é –≤ WebApp, —á—Ç–æ–±—ã –ø–ª–∞–Ω –æ–±–Ω–æ–≤–∏–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
        ].join('\n');
    }

    buildReportFallback() {
        return [
            'üìù –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –æ—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é.',
            '**–¶–µ–ª—å:** –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—ë–º, RPE –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω.',
            '**–†–∞–∑–º–∏–Ω–∫–∞:** –ù–∞–ø–æ–º–Ω–∏, –Ω—É–∂–Ω–∞ –ª–∏ –±—ã–ª–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç—å—é.',
            '**–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:** –ü–µ—Ä–µ—á–∏—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø–æ–¥—Ö–æ–¥–∞–º–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏, –¥–æ–±–∞–≤—å –æ—â—É—â–µ–Ω–∏—è.',
            '**–ó–∞–º–∏–Ω–∫–∞:** –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è ‚Äî –±—ã–ª–∏ –ª–∏ —Ä–∞—Å—Ç—è–∂–∫–∞, –¥—ã—Ö–∞–Ω–∏–µ, —Å–æ–Ω.',
            '**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ü–æ—Å–ª–µ –æ—Ç—á—ë—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—é –ø–ª–∞–Ω –≤ WebApp.',
        ].join('\n');
    }

    buildGenericFallback(profile) {
        const frequency = profile?.preferences?.training_frequency
            || profile?.training_frequency
            || profile?.profile?.preferences?.training_frequency
            || 4;
        const goal = profile?.goals?.description
            || profile?.preferences?.training_goal
            || profile?.profile?.goals?.description
            || '—É–∫—Ä–µ–ø–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è';

        return [
            '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å –∫—É—Ä—Å –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å.',
            `–°–µ–π—á–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ü–µ–ª—å: ${goal}.`,
            `–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚Äî ${frequency} —Ä–∞–∑(–∞) –≤ –Ω–µ–¥–µ–ª—é, –º–æ–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.`,
            '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–ª–∞–Ω–æ–º, –æ—Ç—á—ë—Ç–æ–º –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å.',
        ].join(' ');
    }

    buildGeneralFallback(message, profile) {
        return localResponder.buildLocalReply({ message, profile })
            || '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–¥—Å–∫–∞–∂–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å.';
    }

    buildHelpFallback() {
        return [
            'ü§ù –í–æ—Ç —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ:',
            '‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–¥ —Ü–µ–ª–∏.',
            '‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å –æ—Ç—á—ë—Ç, –æ—Ü–µ–Ω–∏—Ç—å RPE –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.',
            '‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π.',
            '‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å WebApp –∫–æ–º–∞–Ω–¥–æ–π ¬´–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª.',
            '–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?',
        ].join('\n');
    }

    buildSettingsFallback() {
        return [
            '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ WebApp.',
            '–¢–∞–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤–∫–ª—é—á–∏—Ç—å –ø–∞—É–∑—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.',
            '–°–∫–∞–∂–∏ ¬´–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.',
        ].join('\n');
    }
}

const conversationService = new ConversationService();

export default conversationService;

function formatStructuredReply(text) {
    if (!text) {
        return null;
    }

    let formatted = text.replace(/\n{3,}/g, '\n\n').trim();

    if (!formatted.includes('**–¶–µ–ª—å:**')) {
        const lines = formatted.split('\n').filter(Boolean);
        const [summary, ...rest] = lines;
        const blocks = rest.length ? rest.join('\n') : null;
        return [summary, blocks].filter(Boolean).join('\n');
    }

    return formatted;
}

export { formatStructuredReply };
