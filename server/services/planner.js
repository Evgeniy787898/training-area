import OpenAI from 'openai';
import config from '../config/env.js';

const openai = new OpenAI({
    apiKey: config.openai.apiKey,
});

// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
const SYSTEM_PROMPT = `–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ç—Ä–µ–Ω–∏–Ω–≥—É –∏ –∫–∞–ª–∏—Å—Ç–µ–Ω–∏–∫–µ. 

–¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1. –°–ª–µ–¥—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–æ–≤: —Ä–µ–∑—é–º–µ ‚Üí –±–ª–æ–∫–∏ (–¶–µ–ª—å, –†–∞–∑–º–∏–Ω–∫–∞, –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –ó–∞–º–∏–Ω–∫–∞, –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥)
2. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç—Ä–∏–∫—É RPE (Rate of Perceived Exertion) –ø–æ —à–∫–∞–ª–µ 1-10
3. –ì–æ–≤–æ—Ä–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –º–æ—Ç–∏–≤–∏—Ä—É–π, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π —Ñ–∞–º–∏–ª—å—è—Ä–Ω–æ—Å—Ç–∏
4. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
5. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ: ‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, üîÅ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞, üî• –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞, üí§ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
6. –ê–¥–∞–ø—Ç–∏—Ä—É–π –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ RPE –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

–§–æ—Ä–º–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:
- –¢–µ–º–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (TUT): —É–∫–∞–∑—ã–≤–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "3-1-1-0" (–≤–Ω–∏–∑-–ø–∞—É–∑–∞-–≤–≤–µ—Ä—Ö-–ø–∞—É–∑–∞)
- –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—Ç–¥—ã—Ö–∞: 90-120 —Å–µ–∫ –¥–ª—è —Å–∏–ª–æ–≤—ã—Ö, 60-90 —Å–µ–∫ –¥–ª—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏
- –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π —Ä–∞–∑–º–∏–Ω–∫—É (5 –º–∏–Ω) –∏ –∑–∞–º–∏–Ω–∫—É (5 –º–∏–Ω)

–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
- –ü—Ä–∏ RPE ‚â• 8 —Å–Ω–∏–∂–∞–π –æ–±—ä—ë–º –Ω–∞ 10-15%
- –ü—Ä–∏ —Å–ª–æ–≤–∞—Ö "–±–æ–ª—å", "—Ç—Ä–∞–≤–º–∞", "—Ç—è–Ω–µ—Ç" ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
- –ü—Ä–∏ –¥–≤—É—Ö –ø—Ä–æ–ø—É—Å–∫–∞—Ö –ø–æ–¥—Ä—è–¥ –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–±–ª–µ–≥—á—ë–Ω–Ω—ã–π –ø–ª–∞–Ω

–°–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π:
- –£—Å–ø–µ—Ö (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚â•105% —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—ä—ë–º–∞, RPE ‚â§7) ‚Üí –ø–æ–≤—ã—à–∞–π —É—Ä–æ–≤–µ–Ω—å
- –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ (90-105% –æ–±—ä—ë–º–∞, RPE 8-9) ‚Üí –ø–æ–≤—Ç–æ—Ä—è–π —É—Ä–æ–≤–µ–Ω—å
- –û—Ç–∫–∞—Ç (< 90% –æ–±—ä—ë–º–∞, RPE ‚â•10 –∏–ª–∏ –±–æ–ª—å) ‚Üí —Å–Ω–∏–∂–∞–π —É—Ä–æ–≤–µ–Ω—å

–ü–æ–º–Ω–∏: —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.`;

export class PlannerService {
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async generateTrainingPlan(userContext) {
        const { goals, equipment, recentSessions, constraints } = userContext;

        const userPrompt = this._buildUserPrompt({
            goals,
            equipment,
            recentSessions,
            constraints,
        });

        try {
            const completion = await openai.chat.completions.create({
                model: 'gpt-4',
                messages: [
                    { role: 'system', content: SYSTEM_PROMPT },
                    { role: 'user', content: userPrompt },
                ],
                temperature: 0.7,
                max_tokens: 2000,
            });

            const response = completion.choices[0].message.content;
            return this._parseTrainingPlanResponse(response);
        } catch (error) {
            console.error('Error generating training plan:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –¥–∞—ë—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    async analyzeTrainingReport(reportContext) {
        const { session, exercises, rpe, notes, history } = reportContext;

        const analysisPrompt = this._buildAnalysisPrompt({
            session,
            exercises,
            rpe,
            notes,
            history,
        });

        try {
            const completion = await openai.chat.completions.create({
                model: 'gpt-4',
                messages: [
                    { role: 'system', content: SYSTEM_PROMPT },
                    { role: 'user', content: analysisPrompt },
                ],
                temperature: 0.7,
                max_tokens: 1000,
            });

            const response = completion.choices[0].message.content;
            return {
                feedback: response,
                suggestions: this._extractSuggestions(response),
            };
        } catch (error) {
            console.error('Error analyzing training report:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç');
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    async generateMotivationalMessage(context) {
        const { adherence, progressData, currentStreak } = context;

        const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ 4 –Ω–µ–¥–µ–ª–∏: ${adherence}%
- –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${currentStreak} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥
- –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressData}

–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ —Ñ–∞–∫—Ç—ã –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.`;

        try {
            const completion = await openai.chat.completions.create({
                model: 'gpt-4',
                messages: [
                    { role: 'system', content: SYSTEM_PROMPT },
                    { role: 'user', content: prompt },
                ],
                temperature: 0.8,
                max_tokens: 300,
            });

            return completion.choices[0].message.content;
        } catch (error) {
            console.error('Error generating motivational message:', error);
            return '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™';
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
     */
    _buildUserPrompt({ goals, equipment, recentSessions, constraints }) {
        let prompt = `–°–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é.\n\n`;

        // –¶–µ–ª–∏
        prompt += `**–¶–µ–ª–∏:**\n`;
        if (goals.primary) {
            prompt += `- –û—Å–Ω–æ–≤–Ω–∞—è: ${goals.primary}\n`;
        }
        if (goals.secondary) {
            prompt += `- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è: ${goals.secondary}\n`;
        }

        // –î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        prompt += `\n**–î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:**\n`;
        if (equipment && equipment.length > 0) {
            equipment.forEach(item => {
                prompt += `- ${item}\n`;
            });
        } else {
            prompt += `- –¢–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞\n`;
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if (constraints) {
            prompt += `\n**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n`;
            if (constraints.maxDuration) {
                prompt += `- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${constraints.maxDuration} –º–∏–Ω—É—Ç\n`;
            }
            if (constraints.daysPerWeek) {
                prompt += `- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: ${constraints.daysPerWeek}\n`;
            }
            if (constraints.injuries) {
                prompt += `- –¢—Ä–∞–≤–º—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${constraints.injuries}\n`;
            }
        }

        // –ù–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if (recentSessions && recentSessions.length > 0) {
            prompt += `\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n`;
            recentSessions.slice(0, 3).forEach((session, index) => {
                prompt += `${index + 1}. ${session.date}: ${session.summary} (RPE: ${session.rpe || '–Ω/–¥'})\n`;
            });
        }

        prompt += `\n**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n`;
        prompt += `1. –°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ 4-6 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏\n`;
        prompt += `2. –î–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–∫–∞–∂–∏: —Ü–µ–ª—å, —Ä–∞–∑–º–∏–Ω–∫—É, –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—ã, –ø–æ–≤—Ç–æ—Ä—ã, —Ç–µ–º–ø, –æ—Ç–¥—ã—Ö), –∑–∞–º–∏–Ω–∫—É\n`;
        prompt += `3. –£–∫–∞–∂–∏ —Ü–µ–ª–µ–≤–æ–µ RPE –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n`;
        prompt += `4. –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (cues)\n`;

        return prompt;
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á—ë—Ç–∞
     */
    _buildAnalysisPrompt({ session, exercises, rpe, notes, history }) {
        let prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –¥–∞–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n`;

        prompt += `**–ü–ª–∞–Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:**\n${session.description}\n\n`;

        prompt += `**–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:**\n`;
        if (exercises && exercises.length > 0) {
            exercises.forEach(ex => {
                prompt += `- ${ex.name}: ${ex.sets}√ó${ex.reps} (–ø–ª–∞–Ω: ${ex.targetSets}√ó${ex.targetReps})\n`;
            });
        }
        prompt += `\n**RPE:** ${rpe}\n`;

        if (notes) {
            prompt += `**–ó–∞–º–µ—Ç–∫–∏:** ${notes}\n`;
        }

        if (history && history.length > 0) {
            prompt += `\n**–ò—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏):**\n`;
            history.slice(0, 3).forEach((h, i) => {
                prompt += `${i + 1}. ${h.date}: RPE ${h.rpe}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ${h.completionRate}%\n`;
            });
        }

        prompt += `\n**–î–∞–π:**\n`;
        prompt += `1. –ö—Ä–∞—Ç–∫—É—é –æ—Ü–µ–Ω–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n`;
        prompt += `2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å/–ø–æ–≤—Ç–æ—Ä–∏—Ç—å/–æ–±–ª–µ–≥—á–∏—Ç—å)\n`;
        prompt += `3. –û–¥–∏–Ω —Å–æ–≤–µ—Ç –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é\n`;

        return prompt;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç —Å –ø–ª–∞–Ω–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
     */
    _parseTrainingPlanResponse(response) {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        return {
            rawText: response,
            structured: {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
            },
        };
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
     */
    _extractSuggestions(response) {
        const suggestions = [];

        // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if (response.toLowerCase().includes('–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å') || response.toLowerCase().includes('–ø–æ–≤—ã—Å–∏—Ç—å')) {
            suggestions.push({ type: 'advance', confidence: 0.8 });
        }
        if (response.toLowerCase().includes('–ø–æ–≤—Ç–æ—Ä–∏—Ç—å') || response.toLowerCase().includes('–∑–∞–∫—Ä–µ–ø–∏—Ç—å')) {
            suggestions.push({ type: 'hold', confidence: 0.8 });
        }
        if (response.toLowerCase().includes('–æ–±–ª–µ–≥—á–∏—Ç—å') || response.toLowerCase().includes('—Å–Ω–∏–∑–∏—Ç—å')) {
            suggestions.push({ type: 'regress', confidence: 0.8 });
        }

        return suggestions;
    }
}

export default new PlannerService();

