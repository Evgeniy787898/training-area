import React, { useState, useEffect, useCallback } from 'react';
import Navigation from './components/Navigation';
import TodayView from './pages/TodayView';
import AnalyticsView from './pages/AnalyticsView';
import SettingsView from './pages/SettingsView';
import ExercisesView from './pages/ExercisesView';
import SkeletonCard from './components/SkeletonCard';
import ErrorState from './components/ErrorState';
import Toast from './components/Toast';
import { AppProvider } from './context/AppContext';
import { configureClient, apiClient } from './api/client';
import { DEMO_PROFILE_SUMMARY } from './services/demoData';
import StatusBadge from './components/StatusBadge';

const TELEGRAM_BOT_USERNAME = import.meta.env.VITE_BOT_USERNAME || null;
const STANDALONE_MODE = import.meta.env.VITE_STANDALONE_MODE === '1';
const STANDALONE_USER = {
    id: import.meta.env.VITE_STANDALONE_TELEGRAM_ID
        ? Number(import.meta.env.VITE_STANDALONE_TELEGRAM_ID)
        : null,
    first_name: import.meta.env.VITE_STANDALONE_FIRST_NAME || 'Guest',
    last_name: import.meta.env.VITE_STANDALONE_LAST_NAME || '',
    username: import.meta.env.VITE_STANDALONE_USERNAME || undefined,
};
const STANDALONE_INIT_DATA = import.meta.env.VITE_STANDALONE_INIT_DATA || '';

function App() {
    const [activeTab, setActiveTab] = useState('today');
    const [telegramUser, setTelegramUser] = useState(null);
    const [profileSummary, setProfileSummary] = useState(null);
    const [profileLoading, setProfileLoading] = useState(true);
    const [profileError, setProfileError] = useState(null);
    const [lastTraceId, setLastTraceId] = useState(null);
    const [toasts, setToasts] = useState([]);
    const [demoMode, setDemoMode] = useState(false);

    useEffect(() => {
        const tg = window.Telegram?.WebApp;

        if (!tg) {
            if (STANDALONE_MODE) {
                const fallbackUser = {
                    ...STANDALONE_USER,
                    id: Number.isFinite(STANDALONE_USER.id) ? STANDALONE_USER.id : null,
                };
                setTelegramUser(fallbackUser);
                configureClient({ telegramUser: fallbackUser, initData: STANDALONE_INIT_DATA });
                setProfileError(null);
            } else {
                setProfileError({
                    code: 'telegram_webapp_required',
                    message: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ WebApp –≤–Ω—É—Ç—Ä–∏ Telegram',
                });
                setProfileLoading(false);
            }
            return;
        }

        tg.ready();
        tg.expand();

        const user = tg.initDataUnsafe?.user || null;
        setTelegramUser(user);
        configureClient({ telegramUser: user, initData: tg.initData || '' });
    }, []);

    const pushToast = useCallback(({ title, message, type = 'info', traceId }) => {
        setToasts(prev => [
            ...prev,
            { id: `${Date.now()}-${Math.random()}`, title, message, type, traceId },
        ]);
    }, []);

    const closeToast = useCallback((id) => {
        setToasts(prev => prev.filter(toast => toast.id !== id));
    }, []);

    const loadProfile = useCallback(async () => {
        if (!telegramUser) {
            return;
        }

        setProfileLoading(true);
        try {
            const { data, traceId } = await apiClient.getProfileSummary();
            setProfileSummary(data);
            setProfileError(null);
            setLastTraceId(traceId);
            setDemoMode(false);
        } catch (error) {
            setLastTraceId(error.traceId || null);

            const authError = error.status === 401 || error.status === 403
                || error.code === 'auth_required'
                || error.code === 'invalid_signature';

            if (authError) {
                setProfileError(error);
                setProfileSummary(null);
                setDemoMode(false);
                pushToast({
                    title: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API',
                    message: STANDALONE_MODE
                        ? '–ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.'
                        : '–û—Ç–∫—Ä–æ–π WebApp –∏–∑ Telegram, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å—å.',
                    type: 'error',
                    traceId: error.traceId,
                });
            } else {
                setProfileError(error);
                setProfileSummary(DEMO_PROFILE_SUMMARY);
                setDemoMode(true);
                pushToast({
                    title: '–î–µ–º–æ —Ä–µ–∂–∏–º',
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
                    type: 'warning',
                    traceId: error.traceId,
                });
            }
        } finally {
            setProfileLoading(false);
        }
    }, [telegramUser, pushToast]);

    useEffect(() => {
        if (telegramUser) {
            loadProfile();
        }
    }, [telegramUser, loadProfile]);

    if (!profileLoading && profileError?.code === 'telegram_webapp_required') {
        return (
            <div className="standalone-app">
                <div className="standalone-card">
                    <h1>üèãÔ∏è Training Bot</h1>
                    <p>
                        Telegram WebApp —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞ Telegram. –û—Ç–∫—Ä–æ–π —á–∞—Ç —Å –±–æ—Ç–æ–º –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å¬ª.
                    </p>
                    <ol>
                        <li>–ù–∞–π–¥–∏ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É <code>/menu</code>.</li>
                        <li>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å¬ª –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –º–µ–Ω—é.</li>
                        <li>–í–Ω—É—Ç—Ä–∏ WebApp –¥–æ—Å—Ç—É–ø–Ω—ã –ø–ª–∞–Ω, –æ—Ç—á—ë—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å.</li>
                    </ol>
                    {TELEGRAM_BOT_USERNAME && (
                        <a
                            className="btn btn-primary"
                            href={`https://t.me/${TELEGRAM_BOT_USERNAME}?start=webapp`}
                            target="_blank"
                            rel="noopener noreferrer"
                        >
                            –û—Ç–∫—Ä—ã—Ç—å @{TELEGRAM_BOT_USERNAME}
                        </a>
                    )}
                    <p className="text-muted">
                        –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–∏ —á–∞—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É ¬´–û—Ç–∫—Ä—ã—Ç—å WebApp¬ª.
                    </p>
                </div>
            </div>
        );
    }

    const renderView = () => {
        switch (activeTab) {
            case 'today':
                return <TodayView />;
            case 'analytics':
                return <AnalyticsView />;
            case 'exercises':
                return <ExercisesView />;
            case 'settings':
                return <SettingsView />;
            default:
                return <TodayView />;
        }
    };

    const contextValue = {
        telegramUser,
        profileSummary,
        profileLoading,
        profileError,
        refreshProfile: loadProfile,
        showToast: pushToast,
        lastTraceId,
        setActiveTab,
        demoMode,
    };

    const adherenceValue = profileSummary?.adherence?.adherence_percent;
    const adherenceLabel = typeof adherenceValue === 'number' ? `${adherenceValue}%` : '‚Äî';
    const frequencyValue =
        profileSummary?.profile?.preferences?.training_frequency ??
        profileSummary?.profile?.training_frequency ??
        profileSummary?.preferences?.training_frequency ??
        null;
    const frequencyLabel = frequencyValue ? `${frequencyValue} —Ç—Ä–µ–Ω/–Ω–µ–¥` : '3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é';
    const goalText =
        profileSummary?.profile?.preferences?.training_goal ||
        profileSummary?.profile?.goals?.description ||
        profileSummary?.highlights?.focus ||
        '–ö–∞–ª–∏—Å—Ç–µ–Ω–∏–∫–∞';
    const upcomingSession = profileSummary?.upcoming_session;
    const upcomingDate = upcomingSession?.date ? new Date(upcomingSession.date) : null;
    const upcomingLabel = upcomingDate
        ? upcomingDate.toLocaleDateString('ru-RU', { weekday: 'long', day: 'numeric', month: 'long' })
        : '–ü–æ–¥—Å—Ç—Ä–æ—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ —Ç–µ–±—è';
    const upcomingTime = upcomingDate
        ? upcomingDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
        : '‚Äî ‚Äî';
    const nextFocus = upcomingSession?.focus || profileSummary?.highlights?.next_goal || '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏';
    const todayStatus = (() => {
        if (!upcomingDate) {
            return 'training';
        }
        const today = new Date();
        const sameDay = upcomingDate.toDateString() === today.toDateString();
        return sameDay ? 'training' : 'rest';
    })();

    return (
        <AppProvider value={contextValue}>
            <div className="app">
                <header className="app-header">
                    <div className="header-top">
                        <div className="brand">
                            <div className="brand-icon">TZ</div>
                            <div>
                                <h1>Tzona</h1>
                            </div>
                        </div>
                        <StatusBadge status={todayStatus} compact />
                    </div>

                    <div className="header-status">
                        {lastTraceId && (
                            <span className="trace-id" title="–ü–æ—Å–ª–µ–¥–Ω–∏–π trace id">trace: {lastTraceId}</span>
                        )}
                        {!demoMode && profileSummary?.adherence && (
                            <span className="adherence-badge">
                                üî• –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å {profileSummary.adherence.adherence_percent}%
                            </span>
                        )}
                        {demoMode && (
                            <span className="demo-badge">
                                {STANDALONE_MODE
                                    ? '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
                                    : '–†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç–µ WebApp –∏–∑ Telegram'}
                            </span>
                        )}
                    </div>

                    <div className="hero-grid">
                        <div className="hero-card">
                            <span className="hero-label">–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤ —Ñ–æ–∫—É—Å–µ</span>
                            <span className="hero-value">{goalText}</span>
                            <span className="hero-meta">–°–ª–µ–¥–∏–º –∑–∞ —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π</span>
                        </div>
                        <div className="hero-card">
                            <span className="hero-label">–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</span>
                            <span className="hero-value">{upcomingLabel}</span>
                            <span className="hero-meta">{upcomingTime} ¬∑ {nextFocus}</span>
                        </div>
                        <div className="hero-card">
                            <span className="hero-label">–†–∏—Ç–º –Ω–µ–¥–µ–ª–∏</span>
                            <span className="hero-value">{frequencyLabel}</span>
                            <span className="hero-meta">–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å {adherenceLabel}</span>
                        </div>
                    </div>
                </header>

                <main className="app-main">
                    {profileLoading && <SkeletonCard lines={4} />}
                    {!profileLoading && profileError && !demoMode && (
                        <ErrorState
                            title="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
                            message={profileError.message}
                            actionLabel="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                            onRetry={loadProfile}
                        />
                    )}
                    {!profileLoading && !profileError && renderView()}
                </main>

                <Navigation activeTab={activeTab} onTabChange={setActiveTab} />

                <div className="toast-container" role="region" aria-live="polite">
                    {toasts.map(toast => (
                        <Toast key={toast.id} toast={toast} onClose={closeToast} />
                    ))}
                </div>
            </div>
        </AppProvider>
    );
}

export default App;
