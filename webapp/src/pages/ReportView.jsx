import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { useAppContext } from '../context/AppContext';
import { apiClient } from '../api/client';
import SkeletonCard from '../components/SkeletonCard';
import ErrorState from '../components/ErrorState';
import { getStaticSessionForDate } from '../services/staticPlan';
import { DEMO_REPORT_HINT } from '../services/demoData';

const STANDALONE_MODE = import.meta.env.VITE_STANDALONE_MODE === '1';

const initialFormState = {
    status: 'done',
    rpe: '7',
    notes: '',
    exercises: {},
};

function buildFormFromSession(session) {
    if (!session) {
        return initialFormState;
    }

    const exercises = {};
    (session.exercises || []).forEach((exercise, index) => {
        const key = exercise.exercise_key || `exercise_${index}`;
        exercises[key] = {
            sets: exercise.actual?.sets ?? exercise.target?.sets ?? '',
            reps: exercise.actual?.reps ?? exercise.target?.reps ?? '',
            rpe: exercise.rpe ?? session.rpe ?? 7,
            notes: exercise.notes || '',
        };
    });

    return {
        status: session.status === 'skipped' ? 'skipped' : 'done',
        rpe: String(session.rpe || 7),
        notes: session.notes || '',
        exercises,
    };
}

const ReportView = () => {
    const { showToast, refreshProfile, demoMode } = useAppContext();
    const [state, setState] = useState({ loading: true, error: null, session: null, source: null, fallback: false });
    const [form, setForm] = useState(initialFormState);
    const [saving, setSaving] = useState(false);

    const loadSession = useCallback(async () => {
        setState(prev => ({ ...prev, loading: true, error: null, fallback: false }));
        try {
            const { data } = await apiClient.getTodaySession();
            setState({
                loading: false,
                error: null,
                session: data.session,
                source: data.source,
                fallback: data.source !== 'database',
            });
        } catch (error) {
            const fallbackSession = getStaticSessionForDate(new Date());
            if (fallbackSession) {
                setState({
                    loading: false,
                    error: null,
                    session: fallbackSession,
                    source: 'static_plan',
                    fallback: true,
                });
                showToast?.({
                    title: STANDALONE_MODE ? '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API' : '–î–µ–º–æ —Ä–µ–∂–∏–º',
                    message: STANDALONE_MODE
                        ? '–ü—Ä–æ–≤–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.'
                        : '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü–æ–∫–∞–∑–∞–Ω –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.',
                    type: 'warning',
                    traceId: error.traceId,
                });
            } else {
                setState({ loading: false, error, session: null, source: null, fallback: false });
            }
        }
    }, [showToast]);

    useEffect(() => {
        loadSession();
    }, [loadSession]);

    useEffect(() => {
        if (state.session) {
            setForm(buildFormFromSession(state.session));
        }
    }, [state.session]);

    const exercises = useMemo(() => {
        return (state.session?.exercises || []).map((exercise, index) => ({
            key: exercise.exercise_key || `exercise_${index}`,
            name: exercise.name || exercise.exercise_key || `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ${index + 1}`,
            target: exercise.target,
        }));
    }, [state.session]);

    const handleFormChange = (event) => {
        const { name, value } = event.target;
        setForm(prev => ({ ...prev, [name]: value }));
    };

    const handleExerciseChange = (exerciseKey, field, value) => {
        setForm(prev => ({
            ...prev,
            exercises: {
                ...prev.exercises,
                [exerciseKey]: {
                    ...prev.exercises[exerciseKey],
                    [field]: value,
                },
            },
        }));
    };

    const handleSubmit = async (event) => {
        event.preventDefault();

        if (!state.session?.id) {
            showToast?.({
                title: STANDALONE_MODE ? '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API' : '–î–µ–º–æ —Ä–µ–∂–∏–º',
                message: STANDALONE_MODE
                    ? '–°–µ–π—á–∞—Å –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ò—Å–ø—Ä–∞–≤—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É.'
                    : '–í —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Telegram –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.',
                type: 'warning',
            });
            return;
        }

        setSaving(true);
        try {
            const exercisesPayload = (state.session.exercises || []).map((exercise, index) => {
                const key = exercise.exercise_key || `exercise_${index}`;
                const formEntry = form.exercises[key] || {};
                const actualSets = formEntry.sets !== '' ? Number(formEntry.sets) : undefined;
                const actualReps = formEntry.reps !== '' ? Number(formEntry.reps) : undefined;
                const payload = {
                    exercise_key: exercise.exercise_key || exercise.name || key,
                    target: exercise.target || {},
                    state: form.status === 'skipped' ? 'skipped' : 'done',
                };

                if (actualSets !== undefined && !Number.isNaN(actualSets)) {
                    payload.actual = { ...(payload.actual || {}), sets: actualSets };
                }
                if (actualReps !== undefined && !Number.isNaN(actualReps)) {
                    payload.actual = { ...(payload.actual || {}), reps: actualReps };
                }
                if (formEntry.notes) {
                    payload.notes = formEntry.notes;
                }
                if (formEntry.rpe) {
                    const value = Number(formEntry.rpe);
                    if (!Number.isNaN(value)) {
                        payload.rpe = value;
                    }
                }

                return payload;
            });

            const payload = {
                status: form.status,
                completed_at: new Date().toISOString(),
                rpe: Number(form.rpe),
                notes: form.notes || undefined,
            };

            if (form.status === 'skipped' || exercisesPayload.some(item => item.actual || item.notes || item.rpe)) {
                payload.exercises = exercisesPayload;
            }

            const { data } = await apiClient.updateSession(state.session.id, payload);

            showToast?.({
                title: '–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω',
                message: data.next_steps || '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
                type: 'success',
            });

            await Promise.all([loadSession(), refreshProfile?.()]);
        } catch (error) {
            showToast?.({
                title: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç',
                message: error.message,
                type: 'error',
                traceId: error.traceId,
            });
        } finally {
            setSaving(false);
        }
    };

    if (state.loading) {
        return (
            <div className="view report-view">
                <h2>üìù –û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ</h2>
                <SkeletonCard lines={4} />
            </div>
        );
    }

    if (state.error && !state.session) {
        return (
            <div className="view report-view">
                <h2>üìù –û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ</h2>
                <ErrorState
                    title="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
                    message={state.error.message}
                    actionLabel="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑"
                    onRetry={loadSession}
                />
            </div>
        );
    }

    return (
        <div className="view report-view">
            <h2>üìù –û—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ</h2>

            {(state.fallback || demoMode) && (
                <div className="card demo-hint">
                    <h3>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–∞</h3>
                    <p className="text-muted">
                        –°–µ–π—á–∞—Å –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ—Ä–º–∞. –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebApp –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å.
                    </p>
                    <pre className="demo-snippet">{DEMO_REPORT_HINT.trim()}</pre>
                </div>
            )}

            {state.session ? (
                <form className="card report-form" onSubmit={handleSubmit}>
                    <div className="form-grid">
                        <div className="form-field">
                            <label htmlFor="status">–°—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</label>
                            <select id="status" name="status" value={form.status} onChange={handleFormChange}>
                                <option value="done">–í—ã–ø–æ–ª–Ω–µ–Ω–∞</option>
                                <option value="skipped">–ü—Ä–æ–ø—É—â–µ–Ω–∞</option>
                            </select>
                        </div>
                        <div className="form-field">
                            <label htmlFor="rpe">RPE</label>
                            <select id="rpe" name="rpe" value={form.rpe} onChange={handleFormChange}>
                                {Array.from({ length: 10 }, (_, index) => String(index + 1)).map(value => (
                                    <option key={value} value={value}>{value}</option>
                                ))}
                            </select>
                        </div>
                        <div className="form-field">
                            <label htmlFor="notes">–û–±—â–∏–µ –∑–∞–º–µ—Ç–∫–∏</label>
                            <textarea
                                id="notes"
                                name="notes"
                                value={form.notes}
                                onChange={handleFormChange}
                                placeholder="–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å"
                            />
                        </div>
                    </div>

                    <div className="exercise-report-grid">
                        {exercises.map((exercise, index) => {
                            const formEntry = form.exercises[exercise.key] || { sets: '', reps: '', notes: '', rpe: form.rpe };
                            return (
                                <div key={exercise.key} className="exercise-report-card">
                                    <div className="exercise-report-header">
                                        <span className="exercise-report-name">{index + 1}. {exercise.name}</span>
                                        {exercise.target?.sets && (
                                            <span className="exercise-report-target">
                                                –ü–ª–∞–Ω: {exercise.target.sets} √ó {exercise.target.reps || '‚Äî'}
                                            </span>
                                        )}
                                    </div>
                                    <div className="exercise-report-fields">
                                        <label>
                                            –ü–æ–¥—Ö–æ–¥—ã
                                            <input
                                                type="number"
                                                min="0"
                                                inputMode="numeric"
                                                value={formEntry.sets}
                                                onChange={(event) => handleExerciseChange(exercise.key, 'sets', event.target.value)}
                                            />
                                        </label>
                                        <label>
                                            –ü–æ–≤—Ç–æ—Ä—ã
                                            <input
                                                type="number"
                                                min="0"
                                                inputMode="numeric"
                                                value={formEntry.reps}
                                                onChange={(event) => handleExerciseChange(exercise.key, 'reps', event.target.value)}
                                            />
                                        </label>
                                        <label>
                                            RPE —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                                            <input
                                                type="number"
                                                min="1"
                                                max="10"
                                                inputMode="numeric"
                                                value={formEntry.rpe}
                                                onChange={(event) => handleExerciseChange(exercise.key, 'rpe', event.target.value)}
                                            />
                                        </label>
                                        <label>
                                            –ó–∞–º–µ—Ç–∫–∏
                                            <textarea
                                                value={formEntry.notes}
                                                onChange={(event) => handleExerciseChange(exercise.key, 'notes', event.target.value)}
                                                placeholder="–¢–µ—Ö–Ω–∏–∫–∞, –æ—â—É—â–µ–Ω–∏—è, –ø—Ä–æ–≥—Ä–µ—Å—Å"
                                            />
                                        </label>
                                    </div>
                                </div>
                            );
                        })}
                    </div>

                    <div className="report-footer">
                        <span className="source-label">–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {state.fallback ? '–ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞–Ω' : state.source || 'Supabase'}</span>
                        <button className="btn btn-primary" type="submit" disabled={saving}>
                            {saving ? '–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç'}
                        </button>
                    </div>
                </form>
            ) : (
                <div className="card">
                    <h3>–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</h3>
                    <p className="text-muted">
                        –í –ø–ª–∞–Ω–µ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –±–æ—Ç–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ.
                    </p>
                    <button className="btn btn-secondary" type="button" onClick={loadSession}>
                        –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω
                    </button>
                </div>
            )}
        </div>
    );
};

export default ReportView;
