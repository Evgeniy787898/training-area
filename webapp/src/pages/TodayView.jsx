import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { format, isToday } from 'date-fns';
import { ru } from 'date-fns/locale';
import { apiClient } from '../api/client';
import { useAppContext } from '../context/AppContext';
import SkeletonCard from '../components/SkeletonCard';
import ErrorState from '../components/ErrorState';
import DaySwitcher from '../components/DaySwitcher';
import StatusBadge from '../components/StatusBadge';
import SessionNotebook from '../components/SessionNotebook';
import TabataTimer from '../components/TabataTimer';
import { getStaticSessionForDate } from '../services/staticPlan';

const REST_MESSAGES = [
    'üßò –°–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ–º—Å—è: –ø—Ä–æ–≥—É–ª–∫–∞ 30 –º–∏–Ω—É—Ç –∏ —Ä–∞—Å—Ç—è–∂–∫–∞ —Å–ø–∏–Ω—ã.',
    'üí§ –°–æ–Ω + –≤–æ–¥–∞ + 10 –º–∏–Ω—É—Ç –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –ª—É—á—à–∏–π –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å.',
    'üßä –î–æ–±–∞–≤—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à –∏–ª–∏ –ª—ë–≥–∫—É—é –±–∞–Ω—é, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ.',
    'üçΩÔ∏è –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø–∏—Ç–∞–Ω–∏–∏: –±–µ–ª–æ–∫ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ –∏ –≤–æ–¥–∞ 2–ª.',
    'üß† –†–∞–∑–±–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∏: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –ø—Ä–æ—à–ª–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–º–µ—Ç—å –Ω—é–∞–Ω—Å—ã.',
];

const formatSourceLabel = (state) => {
    if (state.fallback) {
        return '–ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ñ–ª–∞–π–Ω-–ø–ª–∞–Ω';
    }
    if (state.source === 'database') {
        return '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase';
    }
    if (state.source === 'fallback') {
        return '–±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏';
    }
    return '–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
};

const TodayView = () => {
    const { showToast, refreshProfile, demoMode } = useAppContext();
    const [selectedDate, setSelectedDate] = useState(new Date());
    const [state, setState] = useState({ loading: true, session: null, source: null, error: null, fallback: false });
    const [exerciseResults, setExerciseResults] = useState({});
    const [saving, setSaving] = useState(false);
    const [timerVisible, setTimerVisible] = useState(false);

    const loadSession = useCallback(async (date) => {
        setState(prev => ({ ...prev, loading: true, error: null, fallback: false }));
        setTimerVisible(false);
        setExerciseResults({});

        try {
            const isoDate = format(date, 'yyyy-MM-dd');
            const { data } = await apiClient.getTodaySession(isoDate);
            setState({
                loading: false,
                session: data.session,
                source: data.source,
                error: null,
                fallback: data.source !== 'database',
            });
        } catch (error) {
            const fallbackSession = getStaticSessionForDate(date);
            if (fallbackSession) {
                setState({
                    loading: false,
                    session: fallbackSession,
                    source: 'static_plan',
                    error: null,
                    fallback: true,
                });
                showToast?.({
                    title: '–†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
                    message: '–ü–æ–∫–∞–∑—ã–≤–∞—é –æ—Ñ–ª–∞–π–Ω-–ø–ª–∞–Ω. –ü–æ–¥–∫–ª—é—á–∏ Telegram WebApp, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
                    type: 'warning',
                    traceId: error.traceId,
                });
            } else {
                setState({ loading: false, session: null, source: null, error, fallback: false });
            }
        }
    }, [showToast]);

    useEffect(() => {
        loadSession(selectedDate);
    }, [selectedDate, loadSession]);

    const restMessage = useMemo(() => {
        const index = selectedDate.getDate() % REST_MESSAGES.length;
        return REST_MESSAGES[index];
    }, [selectedDate]);

    const handleExerciseChange = (exerciseKey, value) => {
        setExerciseResults(prev => ({
            ...prev,
            [exerciseKey]: Number.isFinite(value) ? value : 0,
        }));
    };

    const handleSaveSession = async () => {
        if (!state.session?.id) {
            showToast?.({
                title: demoMode ? '–î–µ–º–æ —Ä–µ–∂–∏–º' : '–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                message: demoMode
                    ? '–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–º–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ü–æ–¥–∫–ª—é—á–∏ Telegram, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Supabase.'
                    : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –û—Ç–∫—Ä–æ–π –ø–∞–Ω–µ–ª—å –∏–∑ Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.',
                type: demoMode ? 'info' : 'error',
            });
            return;
        }

        setSaving(true);
        try {
            const exercisesPayload = (state.session.exercises || []).map((exercise, index) => {
                const key = exercise.exercise_key || `exercise_${index}`;
                const actual = exerciseResults[key];
                const payload = {
                    exercise_key: exercise.exercise_key || exercise.name || key,
                    target: exercise.target || {},
                    state: 'done',
                };

                if (Number.isFinite(actual)) {
                    payload.actual = { reps: actual };
                }

                return payload;
            });

            const payload = {
                status: 'done',
                completed_at: new Date().toISOString(),
                rpe: state.session.rpe || 7,
                exercises: exercisesPayload,
            };

            const { data } = await apiClient.updateSession(state.session.id, payload);
            showToast?.({
                title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞',
                message: data.next_steps || '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é!',
                type: 'success',
            });

            await Promise.all([loadSession(selectedDate), refreshProfile?.()]);
        } catch (error) {
            showToast?.({
                title: '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
                message: error.message,
                type: 'error',
                traceId: error.traceId,
            });
        } finally {
            setSaving(false);
        }
    };

    const handleStartTimer = () => {
        setTimerVisible(true);
    };

    const handleTimerComplete = () => {
        showToast?.({
            title: '–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω',
            message: '–û—Ç–º–µ—Ç—å –æ–±—ä—ë–º –∏ –Ω–∞–∂–º–∏ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç¬ª, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.',
            type: 'success',
        });
    };

    const isRestDay = !state.session;
    const isFuture = selectedDate > new Date() && !isToday(selectedDate);

    if (state.loading) {
        return (
            <div className="view today-view">
                <div className="today-top">
                    <DaySwitcher date={selectedDate} onChange={setSelectedDate} />
                    <StatusBadge status="training" compact />
                </div>
                <SkeletonCard lines={5} />
            </div>
        );
    }

    if (state.error && !state.session) {
        return (
            <div className="view today-view">
                <div className="today-top">
                    <DaySwitcher date={selectedDate} onChange={setSelectedDate} />
                    <StatusBadge status="training" compact />
                </div>
                <ErrorState
                    message={state.error.message}
                    actionLabel="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑"
                    onRetry={() => loadSession(selectedDate)}
                />
            </div>
        );
    }

    return (
        <div className="view today-view">
            <div className="today-top">
                <DaySwitcher date={selectedDate} onChange={setSelectedDate} />
                <StatusBadge status={isRestDay ? 'rest' : 'training'} />
            </div>

            {isRestDay ? (
                <div className="card rest-card">
                    <h3>–°–µ–≥–æ–¥–Ω—è —Ñ–æ–∫—É—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏</h3>
                    <p>{restMessage}</p>
                    {isFuture && (
                        <p className="text-muted">–≠—Ç–∞ –¥–∞—Ç–∞ –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏. –ü–ª–∞–Ω –ø–æ—è–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –ø—Ä–∏–±–ª–∏–∑–∏—Ç—Å—è –¥–µ–Ω—å.</p>
                    )}
                    <div className="rest-actions">
                        <button
                            className="btn btn-secondary"
                            onClick={() => showToast?.({
                                title: '–•–æ—á–µ—à—å –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
                                message: '–í —Ä–∞–∑–¥–µ–ª–µ ¬´–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è¬ª —Å–æ–±—Ä–∞–Ω—ã —É—Ä–æ–≤–Ω–∏ –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞ –ª—é–±–æ–π —Å–ª—É—á–∞–π.',
                                type: 'info',
                            })}
                        >
                            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
                        </button>
                        <button
                            className="btn btn-secondary"
                            onClick={() => showToast?.({
                                title: '–ö–æ–Ω—Ç—Ä–æ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
                                message: '–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –ª—ë–≥–∫—É—é –ø—Ä–æ–≥—É–ª–∫—É, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à.',
                                type: 'info',
                            })}
                        >
                            –ò–¥–µ–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        </button>
                    </div>
                </div>
            ) : (
                <>
                    <div className="card session-wrapper">
                        <div className="session-meta">
                            <span className="source-chip">–ò—Å—Ç–æ—á–Ω–∏–∫: {formatSourceLabel(state)}</span>
                            <span className="date-chip">
                                {format(selectedDate, 'd MMMM, EEEE', { locale: ru }).replace(/^./, char => char.toUpperCase())}
                            </span>
                        </div>
                        <SessionNotebook
                            session={state.session}
                            history={{}}
                            onExerciseChange={handleExerciseChange}
                        />

                        <div className="session-actions">
                            <button className="btn btn-primary" onClick={handleStartTimer}>
                                üöÄ –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
                            </button>
                            <button className="btn btn-success" onClick={handleSaveSession} disabled={saving}>
                                {saving ? '–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶' : '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
                            </button>
                        </div>
                    </div>

                    {timerVisible && (
                        <div className="card timer-card">
                            <TabataTimer onSessionComplete={handleTimerComplete} />
                        </div>
                    )}
                </>
            )}
        </div>
    );
};

export default TodayView;
