import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { apiClient } from '../api/client';
import { useAppContext } from '../context/AppContext';
import SkeletonCard from '../components/SkeletonCard';
import ErrorState from '../components/ErrorState';
import ExerciseCard from '../components/ExerciseCard';
import { STATIC_EXERCISE_CATALOG } from '../services/staticCatalog';

const STANDALONE_MODE = import.meta.env.VITE_STANDALONE_MODE === '1';

const PROGRAMS = [
    { id: 'calisthenics', title: '–ö–∞–ª–∏—Å—Ç–µ–Ω–∏–∫–∞', subtitle: '–¢—É—Ä–Ω–∏–∫, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å, –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å' },
    { id: 'functional', title: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥', subtitle: '–°–∫–æ—Ä–æ', locked: true },
    { id: 'weights', title: '–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', subtitle: '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', locked: true },
];

const ExercisesView = () => {
    const { showToast } = useAppContext();
    const [catalogState, setCatalogState] = useState({ loading: true, error: null, items: [], fallback: false });
    const [expandedKey, setExpandedKey] = useState(null);
    const [historyMap, setHistoryMap] = useState({});
    const [historyLoading, setHistoryLoading] = useState({});
    const [activeProgram, setActiveProgram] = useState('calisthenics');

    const loadCatalog = useCallback(async () => {
        setCatalogState(prev => ({ ...prev, loading: true, error: null, fallback: false }));
        try {
            const { data } = await apiClient.getExerciseCatalog();
            setCatalogState({ loading: false, error: null, items: data.items || [], fallback: false });
        } catch (error) {
            setCatalogState({ loading: false, error: null, items: STATIC_EXERCISE_CATALOG, fallback: true });
            showToast({
                title: '–ö–∞—Ç–∞–ª–æ–≥ –æ—Ñ–ª–∞–π–Ω',
                message: '–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏, –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.',
                type: 'warning',
                traceId: error.traceId,
            });
        }
    }, [showToast]);

    useEffect(() => {
        loadCatalog();
    }, [loadCatalog]);

    const loadHistory = useCallback(async (exerciseKey) => {
        if (historyMap[exerciseKey] || historyLoading[exerciseKey]) {
            return;
        }

        if (catalogState.fallback) {
            setHistoryMap(prev => ({ ...prev, [exerciseKey]: [] }));
            return;
        }

        setHistoryLoading(prev => ({ ...prev, [exerciseKey]: true }));
        try {
            const { data } = await apiClient.getExerciseHistory(exerciseKey);
            setHistoryMap(prev => ({ ...prev, [exerciseKey]: data.items || [] }));
        } catch (error) {
            showToast({
                title: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é',
                message: error.message,
                type: 'error',
            });
        } finally {
            setHistoryLoading(prev => ({ ...prev, [exerciseKey]: false }));
        }
    }, [historyMap, historyLoading, showToast, catalogState.fallback]);

    const handleToggle = (exerciseKey) => {
        setExpandedKey(prev => (prev === exerciseKey ? null : exerciseKey));
        if (expandedKey !== exerciseKey) {
            loadHistory(exerciseKey);
        }
    };

    const handleProgramChange = (programId, locked) => {
        if (locked) {
            showToast({
                title: '–°–∫–æ—Ä–æ',
                message: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞.',
                type: 'info',
            });
            return;
        }
        setActiveProgram(programId);
        setExpandedKey(null);
    };

    const filteredExercises = useMemo(() => {
        return (catalogState.items || []).filter(item => (item.program || 'calisthenics') === activeProgram);
    }, [catalogState.items, activeProgram]);

    if (catalogState.loading) {
        return (
            <div className="view exercises-view">
                <h2>üß± –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</h2>
                <SkeletonCard lines={5} />
                <SkeletonCard lines={4} />
            </div>
        );
    }

    if (catalogState.error && !catalogState.items.length) {
        return (
            <div className="view exercises-view">
                <h2>üß± –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</h2>
                <ErrorState
                    title="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
                    message={catalogState.error.message}
                    actionLabel="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑"
                    onRetry={loadCatalog}
                />
            </div>
        );
    }

    return (
        <div className="view exercises-view">
            <h2>üß± –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</h2>
            <p className="text-muted">
                –ó–¥–µ—Å—å –∂–∏–≤—É—Ç —É—Ä–æ–≤–Ω–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ. –û—Ç–∫—Ä—ã–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏, —Å–º–æ—Ç—Ä–∏ —É—Ä–æ–≤–Ω–∏, –æ—Ç–º–µ—á–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –í–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ Supabase ‚Äî –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞—é —à–∞–±–ª–æ–Ω.
            </p>

            <div className="program-switcher">
                {PROGRAMS.map(program => (
                    <button
                        key={program.id}
                        className={`program-chip ${activeProgram === program.id ? 'active' : ''} ${program.locked ? 'locked' : ''}`}
                        onClick={() => handleProgramChange(program.id, program.locked)}
                    >
                        <span className="program-title">{program.title}</span>
                        <span className="program-subtitle">{program.subtitle}</span>
                    </button>
                ))}
            </div>

            <div className="card program-info">
                <h3>üéØ –¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å ‚Äî {PROGRAMS.find(program => program.id === activeProgram)?.title}</h3>
                <p>
                    –û–¥–∏–Ω –∫–ª–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¥–µ–ª–∞–µ—Ç –µ—ë –æ—Å–Ω–æ–≤–Ω–æ–π. –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ–∫—É—Å. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞ ‚Äî –º—ã —É–∂–µ –≥–æ—Ç–æ–≤–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –≤–∏–¥–µ–æ –∏ —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏.
                </p>
                <div className="info-actions">
                    <button
                        className="btn btn-secondary"
                        onClick={() => showToast({
                            title: '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –≤–∏–¥–µ–æ',
                            message: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.',
                            type: 'info',
                        })}
                    >
                        –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –≤–∏–¥–µ–æ (—Å–∫–æ—Ä–æ)
                    </button>
                    <button
                        className="btn btn-secondary"
                        onClick={() => showToast({
                            title: '–ù–æ–≤—ã–π –ø–ª–∞–Ω',
                            message: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚Äî —Å–∫–æ—Ä–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ–∏ —Ü–∏–∫–ª—ã.',
                            type: 'info',
                        })}
                    >
                        –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
                    </button>
                </div>
                {catalogState.fallback && (
                    <p className="text-muted">
                        {STANDALONE_MODE
                            ? '–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Supabase, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'
                            : '–ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥. –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Supabase –æ—Ç–∫—Ä–æ–π WebApp –∏–∑ Telegram.'}
                    </p>
                )}
            </div>

            <div className="exercise-grid">
                {filteredExercises.map(exercise => (
                    <ExerciseCard
                        key={exercise.key}
                        exercise={exercise}
                        expanded={expandedKey === exercise.key}
                        onToggle={handleToggle}
                        history={historyMap[exercise.key] || []}
                        loadingHistory={!!historyLoading[exercise.key]}
                    />
                ))}
            </div>
        </div>
    );
};

export default ExercisesView;
