import React, { useEffect, useState, useCallback } from 'react';
import { apiClient } from '../api/client';
import { useAppContext } from '../context/AppContext';
import SkeletonCard from '../components/SkeletonCard';
import ErrorState from '../components/ErrorState';
import ExerciseCard from '../components/ExerciseCard';
import { STATIC_EXERCISE_CATALOG } from '../services/staticCatalog';

const ExercisesView = () => {
    const { showToast } = useAppContext();
    const [catalogState, setCatalogState] = useState({ loading: true, error: null, items: [], fallback: false });
    const [expandedKey, setExpandedKey] = useState(null);
    const [historyMap, setHistoryMap] = useState({});
    const [historyLoading, setHistoryLoading] = useState({});

    const loadCatalog = useCallback(async () => {
        setCatalogState(prev => ({ ...prev, loading: true, error: null, fallback: false }));
        try {
            const { data } = await apiClient.getExerciseCatalog();
            setCatalogState({ loading: false, error: null, items: data.items || [], fallback: false });
        } catch (error) {
            setCatalogState({ loading: false, error: null, items: STATIC_EXERCISE_CATALOG, fallback: true });
            showToast({
                title: '–ü–æ–∫–∞–∑–∞–Ω –∫–∞—Ç–∞–ª–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
                message: error.message,
                type: 'warning',
                traceId: error.traceId,
            });
        }
    }, [showToast]);

    useEffect(() => {
        loadCatalog();
    }, [loadCatalog]);

    const loadHistory = useCallback(async (exerciseKey) => {
        if (historyMap[exerciseKey] || historyLoading[exerciseKey]) {
            return;
        }

        if (catalogState.fallback) {
            setHistoryMap(prev => ({ ...prev, [exerciseKey]: [] }));
            return;
        }

        setHistoryLoading(prev => ({ ...prev, [exerciseKey]: true }));
        try {
            const { data } = await apiClient.getExerciseHistory(exerciseKey);
            setHistoryMap(prev => ({ ...prev, [exerciseKey]: data.items || [] }));
        } catch (error) {
            showToast({
                title: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é',
                message: error.message,
                type: 'error',
            });
        } finally {
            setHistoryLoading(prev => ({ ...prev, [exerciseKey]: false }));
        }
    }, [historyMap, historyLoading, showToast, catalogState.fallback]);

    const handleToggle = (exerciseKey) => {
        setExpandedKey(prev => (prev === exerciseKey ? null : exerciseKey));
        if (expandedKey !== exerciseKey) {
            loadHistory(exerciseKey);
        }
    };

    if (catalogState.loading) {
        return (
            <div className="view exercises-view">
                <h2>üìö –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π</h2>
                <SkeletonCard lines={5} />
                <SkeletonCard lines={4} />
            </div>
        );
    }

    if (catalogState.error && !catalogState.items.length) {
        return (
            <div className="view exercises-view">
                <h2>üìö –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π</h2>
                <ErrorState
                    title="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
                    message={catalogState.error.message}
                    actionLabel="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑"
                    onRetry={loadCatalog}
                />
            </div>
        );
    }

    return (
        <div className="view exercises-view">
            <h2>üìö –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π</h2>
            <p className="text-muted">
                –ò–∑—É—á–∏ –ø—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞–ª–∏—Å—Ç–µ–Ω–∏–∫–∏. –ù–∞–∂–º–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —É—Ä–æ–≤–Ω–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
            </p>

            <div className="card">
                <h3>üß≠ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è–º–∏</h3>
                <p>
                    –ö–∞–∂–¥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π. –í—ã–ø–æ–ª–Ω—è–π —Ü–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º –ª–µ–≥–∫–æ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
                    –ï—Å–ª–∏ —Ç—è–∂–µ–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –æ—Ç–∫–∞—Ç–∏ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥.
                </p>
                <ul className="text-muted">
                    <li>üî• –£—Ä–æ–≤–Ω–∏ —Å –≤—ã—Å–æ–∫–∏–º RPE –¥–µ—Ä–∂–∏–º –¥–≤–∞–∂–¥—ã –ø–æ–¥—Ä—è–¥, –ø—Ä–µ–∂–¥–µ —á–µ–º —É—Å–ª–æ–∂–Ω—è—Ç—å.</li>
                    <li>üõ†Ô∏è –ü–æ—è–≤–∏–ª–∞—Å—å –±–æ–ª—å ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–π —Ç–µ—Ö–Ω–∏–∫—É.</li>
                    <li>üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Ç—á—ë—Ç–æ–≤ /report –∏ –æ—Ç–º–µ—Ç–æ–∫ –≤ WebApp.</li>
                </ul>
                {catalogState.fallback && (
                    <p className="text-muted">
                        –ü–æ–∫–∞–∑–∞–Ω—ã —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π –æ—Ç–∫—Ä–æ–π WebApp –∏–∑ —á–∞—Ç–∞ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
                    </p>
                )}
            </div>

            <div className="exercise-grid">
                {catalogState.items.map((exercise) => (
                    <ExerciseCard
                        key={exercise.key}
                        exercise={exercise}
                        expanded={expandedKey === exercise.key}
                        onToggle={handleToggle}
                        history={historyMap[exercise.key] || []}
                        loadingHistory={!!historyLoading[exercise.key]}
                    />
                ))}
            </div>
        </div>
    );
};

export default ExercisesView;
