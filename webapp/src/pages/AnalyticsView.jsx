import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { format, parseISO } from 'date-fns';
import { ru } from 'date-fns/locale';
import {
    Bar,
    BarChart,
    CartesianGrid,
    Line,
    LineChart,
    ResponsiveContainer,
    Tooltip,
    XAxis,
    YAxis,
} from 'recharts';
import { apiClient } from '../api/client';
import { useAppContext } from '../context/AppContext';
import SkeletonCard from '../components/SkeletonCard';
import ErrorState from '../components/ErrorState';
import { DEMO_ANALYTICS, DEMO_REPORT_HINT } from '../services/demoData';

const AnalyticsView = () => {
    const { profileSummary, showToast, demoMode } = useAppContext();
    const [state, setState] = useState({ loading: true, error: null, volume: null, rpe: null, achievements: [], fallback: false });
    const [selectedPoint, setSelectedPoint] = useState(0);

    const loadAnalytics = useCallback(async () => {
        setState(prev => ({ ...prev, loading: true, error: null, fallback: false }));
        try {
            const [volume, rpe, achievements] = await Promise.all([
                apiClient.getReport('volume_trend', { range: '30d' }),
                apiClient.getReport('rpe_distribution', { range: '30d' }),
                apiClient.getAchievements(),
            ]);

            setState({
                loading: false,
                error: null,
                volume: volume.data,
                rpe: rpe.data,
                achievements: achievements.data.achievements || [],
                fallback: false,
            });
        } catch (error) {
            setState({
                loading: false,
                error: null,
                volume: DEMO_ANALYTICS.volume,
                rpe: DEMO_ANALYTICS.rpe,
                achievements: DEMO_ANALYTICS.achievements,
                fallback: true,
            });
            showToast?.({
                title: '–î–µ–º–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                message: '–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.',
                type: 'warning',
                traceId: error.traceId,
            });
        }
    }, [showToast]);

    useEffect(() => {
        loadAnalytics();
    }, [loadAnalytics]);

    useEffect(() => {
        if (state.volume?.chart?.length) {
            setSelectedPoint(state.volume.chart.length - 1);
        }
    }, [state.volume]);

    const adherence = profileSummary?.adherence?.adherence_percent || 0;
    const averageVolume = state.volume?.summary?.average_volume || 0;
    const heavyShare = state.rpe?.summary?.heavy_share || 0;

    const volumeSeries = useMemo(() => {
        return (state.volume?.chart || []).map(item => ({
            ...item,
            label: format(parseISO(item.date), 'd MMM', { locale: ru }),
        }));
    }, [state.volume]);

    const selectedSession = volumeSeries[selectedPoint] || null;

    const renderVolumeChart = () => {
        if (!volumeSeries.length) {
            return <p className="text-muted">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –û—Ç–º–µ—á–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª—Å—è –≥—Ä–∞—Ñ–∏–∫.</p>;
        }

        return (
            <ResponsiveContainer width="100%" height={240}>
                <LineChart data={volumeSeries} margin={{ top: 16, right: 16, left: -8, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
                    <XAxis dataKey="label" stroke="var(--text-secondary)" interval={Math.max(0, Math.floor(volumeSeries.length / 6))} />
                    <YAxis stroke="var(--text-secondary)" allowDecimals={false} />
                    <Tooltip formatter={(value) => [`–û–±—ä—ë–º: ${value}`, '']} />
                    <Line type="monotone" dataKey="volume" stroke="var(--primary-color)" strokeWidth={3} dot={false} />
                </LineChart>
            </ResponsiveContainer>
        );
    };

    const renderRpeChart = () => {
        const data = state.rpe?.chart || [];

        if (!data.length) {
            return <p className="text-muted">RPE –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã ‚Äî –æ—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.</p>;
        }

        return (
            <ResponsiveContainer width="100%" height={220}>
                <BarChart data={data} margin={{ top: 16, right: 16, left: -8, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
                    <XAxis dataKey="label" stroke="var(--text-secondary)" interval={0} angle={-12} textAnchor="end" height={60} />
                    <YAxis stroke="var(--text-secondary)" allowDecimals={false} />
                    <Tooltip formatter={(value) => [`${value} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`, '']} />
                    <Bar dataKey="value" fill="var(--accent-color)" radius={[6, 6, 0, 0]} />
                </BarChart>
            </ResponsiveContainer>
        );
    };

    const handleOpenReport = () => {
        showToast?.({
            title: '–û—Ç—á—ë—Ç –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ',
            message: '–û—Ç–º–µ—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–°–µ–≥–æ–¥–Ω—è¬ª, —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Supabase.',
            type: 'info',
        });
    };

    if (state.loading) {
        return (
            <div className="view analytics-view">
                <div className="analytics-header">
                    <h2>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã</h2>
                </div>
                <SkeletonCard lines={5} />
            </div>
        );
    }

    if (state.error) {
        return (
            <div className="view analytics-view">
                <div className="analytics-header">
                    <h2>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã</h2>
                </div>
                <ErrorState message={state.error.message} actionLabel="–û–±–Ω–æ–≤–∏—Ç—å" onRetry={loadAnalytics} />
            </div>
        );
    }

    return (
        <div className="view analytics-view">
            <div className="analytics-header">
                <h2>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã</h2>
                {(state.fallback || demoMode) && (
                    <span className="demo-chip">–ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö</span>
                )}
            </div>

            <div className="stats-summary">
                <div className="stat-card">
                    <div className="stat-icon">üî•</div>
                    <div className="stat-content">
                        <div className="stat-value">{adherence}%</div>
                        <div className="stat-label">–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å</div>
                    </div>
                </div>
                <div className="stat-card">
                    <div className="stat-icon">üí™</div>
                    <div className="stat-content">
                        <div className="stat-value">{averageVolume}</div>
                        <div className="stat-label">–°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º</div>
                    </div>
                </div>
                <div className="stat-card">
                    <div className="stat-icon">üìà</div>
                    <div className="stat-content">
                        <div className="stat-value">{heavyShare}%</div>
                        <div className="stat-label">–¢—è–∂—ë–ª—ã—Ö —Å–µ—Å—Å–∏–π</div>
                    </div>
                </div>
            </div>

            <div className="card">
                <div className="card-header">
                    <div>
                        <h3>üìà –û–±—ä—ë–º –∑–∞ 30 –¥–Ω–µ–π</h3>
                        <p className="card-subtitle">–°–ª–µ–¥–∏, –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–≤–æ–π –æ–±—ä—ë–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>
                    </div>
                    <span className="badge">{state.volume?.summary?.period_sessions || 0} —Ç—Ä–µ–Ω.</span>
                </div>
                {renderVolumeChart()}
                {volumeSeries.length > 0 && (
                    <div className="timeline-slider">
                        <input
                            type="range"
                            min="0"
                            max={volumeSeries.length - 1}
                            value={selectedPoint}
                            onChange={event => setSelectedPoint(Number(event.target.value))}
                        />
                        {selectedSession && (
                            <div className="timeline-details">
                                <span>{selectedSession.label}</span>
                                <span>–û–±—ä—ë–º: {selectedSession.volume}</span>
                            </div>
                        )}
                    </div>
                )}
            </div>

            <div className="card">
                <div className="card-header">
                    <div>
                        <h3>üí• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ RPE</h3>
                        <p className="card-subtitle">–ë–∞–ª–∞–Ω—Å–∏—Ä—É–π –ª—ë–≥–∫–∏–µ –∏ —Ç—è–∂—ë–ª—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</p>
                    </div>
                    <span className="badge">30 –¥–Ω–µ–π</span>
                </div>
                {renderRpeChart()}
            </div>

            <div className="card report-card">
                <div className="card-header">
                    <div>
                        <h3>üìù –û—Ç—á—ë—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏</h3>
                        <p className="card-subtitle">–§–∏–∫—Å–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
                    </div>
                    <button className="btn btn-secondary" onClick={handleOpenReport}>
                        –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á—ë—Ç
                    </button>
                </div>
                <pre className="report-hint">{DEMO_REPORT_HINT}</pre>
            </div>

            <div className="card achievements-card">
                <div className="card-header">
                    <div>
                        <h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                        <p className="card-subtitle">–ù–∞–≥—Ä–∞–¥—ã –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</p>
                    </div>
                </div>
                {state.achievements.length === 0 ? (
                    <p className="text-muted">–í—ã–ø–æ–ª–Ω—è–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏ —è –±—É–¥—É –æ—Ç–º–µ—á–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.</p>
                ) : (
                    <div className="achievements">
                        {state.achievements.map(item => (
                            <div key={item.id} className="achievement-badge">
                                <span className="achievement-icon">üèÖ</span>
                                <div>
                                    <span className="achievement-name">{item.title}</span>
                                    {item.description && (
                                        <span className="achievement-description">{item.description}</span>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
};

export default AnalyticsView;
